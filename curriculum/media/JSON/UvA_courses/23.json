{
  "nodes": [
    {
      "id": "944a7846-2cb2-4652-bfde-e27802b0f4d0",
      "label": "Functional Programming",
      "cog_level": "Understand",
      "title": "Functional Programming",
      "description": "Functional Programming: ",
      "node_type": "course",
      "shape": "circle",
      "color": {
        "background": "#ffd2af",
        "border": "#ffd2af"
      }
    },
    {
      "id": "134a934d-9f19-4938-8cd4-d187971c74dc",
      "label": "Introduction to Lambda calculus",
      "cog_level": "Understand",
      "title": "Introduction to Lambda calculus",
      "description": "Introduction to Lambda calculus: Lambda calculus is a formal system for expressing computation based on function abstraction and application.",
      "node_type": "knowledge unit",
      "shape": "ellipse",
      "color": {
        "background": "#ffd2af",
        "border": "#ffd2af"
      }
    },
    {
      "id": "7cea6833-c777-42c6-beba-51d9bd2a6126",
      "label": "Lambda-terms",
      "cog_level": "Understand",
      "title": "Lambda-terms",
      "description": "Lambda-terms: Lambda-terms consist of variables, lambda abstractions, and applications. ",
      "node_type": "knowledge point",
      "shape": "box",
      "color": {
        "background": "#ffd2af",
        "border": "#ffd2af"
      }
    },
    {
      "id": "29d746c2-ba37-442a-85f2-ca0934b54706",
      "label": "Substitution",
      "cog_level": "Understand",
      "title": "Substitution",
      "description": "Substitution: Substitution is the process of replacing occurrences of a variable in a lambda-term with another lambda-term.",
      "node_type": "knowledge point",
      "shape": "box",
      "color": {
        "background": "#ffd2af",
        "border": "#ffd2af"
      }
    },
    {
      "id": "10faef06-f24e-45ae-be19-d73ce52fd500",
      "label": "Name clashes",
      "cog_level": "Understand",
      "title": "Name clashes",
      "description": "Name clashes: Name clashes occur when the names of bound variables in a lambda abstraction conflict with names in the surrounding context.",
      "node_type": "knowledge point",
      "shape": "box",
      "color": {
        "background": "#ffd2af",
        "border": "#ffd2af"
      }
    },
    {
      "id": "c6475c33-1953-43e4-8e84-908947d15df2",
      "label": "The rules",
      "cog_level": "Understand",
      "title": "The rules",
      "description": "The rules: Lambda calculus operates based on reduction rules",
      "node_type": "knowledge point",
      "shape": "box",
      "color": {
        "background": "#ffd2af",
        "border": "#ffd2af"
      }
    },
    {
      "id": "6fd2650c-e9fd-441a-bed9-0de58b55bc7e",
      "label": "Building algorithms",
      "cog_level": "Understand",
      "title": "Building algorithms",
      "description": "Building algorithms: Lambda calculus serves as the foundation for building algorithms and expressing computations in functional programming languages.",
      "node_type": "knowledge point",
      "shape": "box",
      "color": {
        "background": "#ffd2af",
        "border": "#ffd2af"
      }
    },
    {
      "id": "6bcf7808-bcef-437c-9f42-b241ecb667c6",
      "label": "Selection",
      "cog_level": "Understand",
      "title": "Selection",
      "description": "Selection: Selection refers to the process of choosing appropriate lambda abstractions and arguments to construct lambda-terms representing desired computations.",
      "node_type": "knowledge point",
      "shape": "box",
      "color": {
        "background": "#ffd2af",
        "border": "#ffd2af"
      }
    },
    {
      "id": "a0594c01-4943-41d0-b2d8-bd4a1a854df3",
      "label": "Currying",
      "cog_level": "Understand",
      "title": "Currying",
      "description": "Currying: Currying is a technique in lambda calculus where functions of multiple arguments are transformed into a sequence of functions, each taking a single argument.",
      "node_type": "knowledge point",
      "shape": "box",
      "color": {
        "background": "#ffd2af",
        "border": "#ffd2af"
      }
    },
    {
      "id": "d81d6d0e-32d8-4b2a-badd-c062df73b8dd",
      "label": "Successor",
      "cog_level": "Understand",
      "title": "Successor",
      "description": "Successor: The successor function is a fundamental function in lambda calculus that increments the input by one.",
      "node_type": "knowledge point",
      "shape": "box",
      "color": {
        "background": "#ffd2af",
        "border": "#ffd2af"
      }
    },
    {
      "id": "3afac3f7-99f0-4256-83d9-027d3a6fafcd",
      "label": "Multiplication",
      "cog_level": "Understand",
      "title": "Multiplication",
      "description": "Multiplication: Multiplication can be defined in lambda calculus using repeated addition or recursion, representing a fundamental arithmetic operation within the system.",
      "node_type": "knowledge point",
      "shape": "box",
      "color": {
        "background": "#ffd2af",
        "border": "#ffd2af"
      }
    },
    {
      "id": "894e530d-0a66-4de8-854d-993416d0702b",
      "label": "Introduction to Haskell",
      "cog_level": "Understand",
      "title": "Introduction to Haskell",
      "description": "Introduction to Haskell: ",
      "node_type": "knowledge unit",
      "shape": "ellipse",
      "color": {
        "background": "#ffd2af",
        "border": "#ffd2af"
      }
    },
    {
      "id": "5b4918a2-42b1-473b-b2aa-bc38484da8fa",
      "label": "Haskell: Introduction",
      "cog_level": "Understand",
      "title": "Haskell: Introduction",
      "description": "Haskell: Introduction: Haskell is a purely functional programming language known for its strong static typing, lazy evaluation, and expressive type system.",
      "node_type": "knowledge point",
      "shape": "box",
      "color": {
        "background": "#ffd2af",
        "border": "#ffd2af"
      }
    },
    {
      "id": "0aa746b7-c6bf-4825-a9f9-a81602a93f8f",
      "label": "Lambdas in Haskell",
      "cog_level": "Understand",
      "title": "Lambdas in Haskell",
      "description": "Lambdas in Haskell: Haskell supports anonymous functions or lambdas",
      "node_type": "knowledge point",
      "shape": "box",
      "color": {
        "background": "#ffd2af",
        "border": "#ffd2af"
      }
    },
    {
      "id": "f92de48f-b14c-4b4a-980e-ff9990edfa73",
      "label": "Lists",
      "cog_level": "Understand",
      "title": "Lists",
      "description": "Lists: Lists are a fundamental data structure in Haskell",
      "node_type": "knowledge point",
      "shape": "box",
      "color": {
        "background": "#ffd2af",
        "border": "#ffd2af"
      }
    },
    {
      "id": "1f571781-6070-4f3a-a577-40cd6eb14854",
      "label": "Types",
      "cog_level": "Understand",
      "title": "Types",
      "description": "Types: Haskell is statically typed, meaning every expression has a type that is known at compile time.",
      "node_type": "knowledge point",
      "shape": "box",
      "color": {
        "background": "#ffd2af",
        "border": "#ffd2af"
      }
    },
    {
      "id": "1ea1b479-3076-44dc-98af-86974b0e8e5a",
      "label": "Pattern matching",
      "cog_level": "Understand",
      "title": "Pattern matching",
      "description": "Pattern matching: Pattern matching in Haskell allows for defining functions with different behavior based on the structure of input data.",
      "node_type": "knowledge point",
      "shape": "box",
      "color": {
        "background": "#ffd2af",
        "border": "#ffd2af"
      }
    },
    {
      "id": "ee7ec99f-8f7c-40b7-8ae3-3020b4538a43",
      "label": "Lambda calculus in Haskell",
      "cog_level": "Understand",
      "title": "Lambda calculus in Haskell",
      "description": "Lambda calculus in Haskell: Haskell supports lambda calculus concepts through its function definitions and anonymous function syntax.",
      "node_type": "knowledge unit",
      "shape": "ellipse",
      "color": {
        "background": "#ffd2af",
        "border": "#ffd2af"
      }
    },
    {
      "id": "7eba12f2-7c24-4529-868e-33f6dfa97b11",
      "label": "Sequential composition",
      "cog_level": "Understand",
      "title": "Sequential composition",
      "description": "Sequential composition: Sequential composition in Haskell involves executing multiple actions or functions in a specified order.",
      "node_type": "knowledge point",
      "shape": "box",
      "color": {
        "background": "#ffd2af",
        "border": "#ffd2af"
      }
    },
    {
      "id": "c6fd9fd8-6802-488d-bb3d-fc6ab607f22e",
      "label": "Equality and subtraction",
      "cog_level": "Understand",
      "title": "Equality and subtraction",
      "description": "Equality and subtraction: Equality in Haskell is checked using the == operator for value equality and the /= operator for inequality.",
      "node_type": "knowledge point",
      "shape": "box",
      "color": {
        "background": "#ffd2af",
        "border": "#ffd2af"
      }
    },
    {
      "id": "0090b80c-aad3-4bc6-b6f6-7697112f8b69",
      "label": "Pairs and lists",
      "cog_level": "Understand",
      "title": "Pairs and lists",
      "description": "Pairs and lists: Pairs and lists are fundamental data structures used extensively in Haskell programming.",
      "node_type": "knowledge point",
      "shape": "box",
      "color": {
        "background": "#ffd2af",
        "border": "#ffd2af"
      }
    },
    {
      "id": "98bb64d7-afdb-47ca-bf2a-fac7de913a35",
      "label": "The construction principle",
      "cog_level": "Understand",
      "title": "The construction principle",
      "description": "The construction principle: The construction principle in Haskell refers to building complex structures or computations from simpler components through composition and combination.",
      "node_type": "knowledge point",
      "shape": "box",
      "color": {
        "background": "#ffd2af",
        "border": "#ffd2af"
      }
    },
    {
      "id": "0248c518-e7fb-43b1-9543-f6a34ea55e58",
      "label": "Recursion ",
      "cog_level": "Understand",
      "title": "Recursion ",
      "description": "Recursion : Recursion is a fundamental technique in Haskell for solving problems by defining functions in terms of themselves.",
      "node_type": "knowledge point",
      "shape": "box",
      "color": {
        "background": "#ffd2af",
        "border": "#ffd2af"
      }
    },
    {
      "id": "54573ee8-5e8f-4171-9e07-2daf17684033",
      "label": "Evaluation order",
      "cog_level": "Understand",
      "title": "Evaluation order",
      "description": "Evaluation order: Haskell uses lazy evaluation by default, where expressions are only evaluated when their values are needed.",
      "node_type": "knowledge point",
      "shape": "box",
      "color": {
        "background": "#ffd2af",
        "border": "#ffd2af"
      }
    },
    {
      "id": "94d60bdb-5496-4e9c-beac-71cb37d4be64",
      "label": "Abstraction of values",
      "cog_level": "Understand",
      "title": "Abstraction of values",
      "description": "Abstraction of values: Abstraction of values in Haskell involves defining functions and data types that encapsulate specific behaviors or concepts.",
      "node_type": "knowledge point",
      "shape": "box",
      "color": {
        "background": "#ffd2af",
        "border": "#ffd2af"
      }
    },
    {
      "id": "5ec66b33-765c-4121-af0b-bbcd7175bcb8",
      "label": "Theory of functional programming",
      "cog_level": "Understand",
      "title": "Theory of functional programming",
      "description": "Theory of functional programming: Functional programming is based on the mathematical concept of functions as first-class citizens",
      "node_type": "knowledge unit",
      "shape": "ellipse",
      "color": {
        "background": "#ffd2af",
        "border": "#ffd2af"
      }
    },
    {
      "id": "60ac14a9-a4fe-4c33-aae2-8634b18f01ac",
      "label": "Type theory",
      "cog_level": "Understand",
      "title": "Type theory",
      "description": "Type theory: Type theory is a branch of mathematics and computer science concerned with the study of types, which classify the various constructs of programming languages.",
      "node_type": "knowledge point",
      "shape": "box",
      "color": {
        "background": "#ffd2af",
        "border": "#ffd2af"
      }
    },
    {
      "id": "6d014dd7-f886-4baa-8cc4-8e2d0b4f71fd",
      "label": "Algebraic data types",
      "cog_level": "Understand",
      "title": "Algebraic data types",
      "description": "Algebraic data types: Algebraic data types (ADTs) are a fundamental concept in functional programming languages like Haskell.",
      "node_type": "knowledge point",
      "shape": "box",
      "color": {
        "background": "#ffd2af",
        "border": "#ffd2af"
      }
    },
    {
      "id": "2755eb1d-2d62-4f58-b9cb-e577261fec42",
      "label": "Polymorphism",
      "cog_level": "Understand",
      "title": "Polymorphism",
      "description": "Polymorphism: Polymorphism refers to the ability of functions or data types to operate on values of different types.",
      "node_type": "knowledge point",
      "shape": "box",
      "color": {
        "background": "#ffd2af",
        "border": "#ffd2af"
      }
    },
    {
      "id": "67cbf611-21ba-49f0-8942-a720ece33dfb",
      "label": "Type classes",
      "cog_level": "Understand",
      "title": "Type classes",
      "description": "Type classes: Type classes are a feature of Haskell that enables ad-hoc polymorphism by grouping types that support a common set of operations.",
      "node_type": "knowledge point",
      "shape": "box",
      "color": {
        "background": "#ffd2af",
        "border": "#ffd2af"
      }
    },
    {
      "id": "5a318462-7538-4335-b6df-297ccd94391e",
      "label": "Kinds",
      "cog_level": "Understand",
      "title": "Kinds",
      "description": "Kinds: Kinds are a type system concept in Haskell that classifies types based on their arity or number of type arguments.",
      "node_type": "knowledge point",
      "shape": "box",
      "color": {
        "background": "#ffd2af",
        "border": "#ffd2af"
      }
    }
  ],
  "edges": [
    {
      "from": "944a7846-2cb2-4652-bfde-e27802b0f4d0",
      "to": "134a934d-9f19-4938-8cd4-d187971c74dc",
      "title": "",
      "id": "ba02b8fe-04a2-45a0-ab9a-f566bfea3e7a"
    },
    {
      "from": "134a934d-9f19-4938-8cd4-d187971c74dc",
      "to": "7cea6833-c777-42c6-beba-51d9bd2a6126",
      "title": "",
      "id": "510dce0c-db68-4835-8b3b-8475932b36dc"
    },
    {
      "from": "134a934d-9f19-4938-8cd4-d187971c74dc",
      "to": "29d746c2-ba37-442a-85f2-ca0934b54706",
      "title": "",
      "id": "866d7b27-d2db-4deb-ae96-336fc8453bda"
    },
    {
      "from": "134a934d-9f19-4938-8cd4-d187971c74dc",
      "to": "10faef06-f24e-45ae-be19-d73ce52fd500",
      "title": "",
      "id": "b3ab4a75-274b-4875-85ae-a2d789153efc"
    },
    {
      "from": "134a934d-9f19-4938-8cd4-d187971c74dc",
      "to": "c6475c33-1953-43e4-8e84-908947d15df2",
      "title": "",
      "id": "5e847d3e-98b9-4c00-a13f-af18b34b364c"
    },
    {
      "from": "134a934d-9f19-4938-8cd4-d187971c74dc",
      "to": "6fd2650c-e9fd-441a-bed9-0de58b55bc7e",
      "title": "",
      "id": "cb2971d5-f73d-45f5-be90-3c127897722b"
    },
    {
      "from": "134a934d-9f19-4938-8cd4-d187971c74dc",
      "to": "6bcf7808-bcef-437c-9f42-b241ecb667c6",
      "title": "",
      "id": "75bf9112-5275-4602-868c-61fd35a04bc8"
    },
    {
      "from": "134a934d-9f19-4938-8cd4-d187971c74dc",
      "to": "a0594c01-4943-41d0-b2d8-bd4a1a854df3",
      "title": "",
      "id": "bc0a1fa3-6cf1-4fb0-8647-f7d7ed39b75d"
    },
    {
      "from": "134a934d-9f19-4938-8cd4-d187971c74dc",
      "to": "d81d6d0e-32d8-4b2a-badd-c062df73b8dd",
      "title": "",
      "id": "43a7e16c-e2e0-4d89-8fa5-57fe4efb894f"
    },
    {
      "from": "134a934d-9f19-4938-8cd4-d187971c74dc",
      "to": "3afac3f7-99f0-4256-83d9-027d3a6fafcd",
      "title": "",
      "id": "1f8d6bab-ef9d-45d3-b718-b3527db73116"
    },
    {
      "from": "944a7846-2cb2-4652-bfde-e27802b0f4d0",
      "to": "894e530d-0a66-4de8-854d-993416d0702b",
      "title": "",
      "id": "ffdd4655-2755-4737-b51e-6b51648359ff"
    },
    {
      "from": "894e530d-0a66-4de8-854d-993416d0702b",
      "to": "5b4918a2-42b1-473b-b2aa-bc38484da8fa",
      "title": "",
      "id": "2a320a7b-4b0f-4587-8c1a-b28099189522"
    },
    {
      "from": "894e530d-0a66-4de8-854d-993416d0702b",
      "to": "0aa746b7-c6bf-4825-a9f9-a81602a93f8f",
      "title": "",
      "id": "1ee2bac9-fadc-4296-aa01-7d3c5f160ba9"
    },
    {
      "from": "894e530d-0a66-4de8-854d-993416d0702b",
      "to": "f92de48f-b14c-4b4a-980e-ff9990edfa73",
      "title": "",
      "id": "0e54db38-5e0a-4bd9-a404-1402a48d5fae"
    },
    {
      "from": "894e530d-0a66-4de8-854d-993416d0702b",
      "to": "1f571781-6070-4f3a-a577-40cd6eb14854",
      "title": "",
      "id": "92015deb-02ce-4574-8cd0-713069441340"
    },
    {
      "from": "894e530d-0a66-4de8-854d-993416d0702b",
      "to": "1ea1b479-3076-44dc-98af-86974b0e8e5a",
      "title": "",
      "id": "c48d98a7-7fc1-40dd-b6ed-ed89c41ffce5"
    },
    {
      "from": "944a7846-2cb2-4652-bfde-e27802b0f4d0",
      "to": "ee7ec99f-8f7c-40b7-8ae3-3020b4538a43",
      "title": "",
      "id": "ebbfeffa-c046-46ab-80bb-d46f70d27bb0"
    },
    {
      "from": "ee7ec99f-8f7c-40b7-8ae3-3020b4538a43",
      "to": "7eba12f2-7c24-4529-868e-33f6dfa97b11",
      "title": "",
      "id": "44c8b357-a198-4ffa-a9fd-2176bc16289d"
    },
    {
      "from": "ee7ec99f-8f7c-40b7-8ae3-3020b4538a43",
      "to": "c6fd9fd8-6802-488d-bb3d-fc6ab607f22e",
      "title": "",
      "id": "51a39b62-dc1e-4404-b8bf-beba6aa4c374"
    },
    {
      "from": "ee7ec99f-8f7c-40b7-8ae3-3020b4538a43",
      "to": "0090b80c-aad3-4bc6-b6f6-7697112f8b69",
      "title": "",
      "id": "b6f14336-93fe-47e3-b3ac-fd1e2d52ac37"
    },
    {
      "from": "ee7ec99f-8f7c-40b7-8ae3-3020b4538a43",
      "to": "98bb64d7-afdb-47ca-bf2a-fac7de913a35",
      "title": "",
      "id": "7a5b9fc6-a6c3-4540-8ded-78df5fe7380f"
    },
    {
      "from": "ee7ec99f-8f7c-40b7-8ae3-3020b4538a43",
      "to": "0248c518-e7fb-43b1-9543-f6a34ea55e58",
      "title": "",
      "id": "232c28de-975c-45e8-adb1-cd588305325c"
    },
    {
      "from": "ee7ec99f-8f7c-40b7-8ae3-3020b4538a43",
      "to": "54573ee8-5e8f-4171-9e07-2daf17684033",
      "title": "",
      "id": "cee5ea5d-3738-4637-b10d-511f7393d56d"
    },
    {
      "from": "ee7ec99f-8f7c-40b7-8ae3-3020b4538a43",
      "to": "94d60bdb-5496-4e9c-beac-71cb37d4be64",
      "title": "",
      "id": "1f68651f-526e-44da-838c-f6cb3157d7af"
    },
    {
      "from": "944a7846-2cb2-4652-bfde-e27802b0f4d0",
      "to": "5ec66b33-765c-4121-af0b-bbcd7175bcb8",
      "title": "",
      "id": "0a056e7c-5921-44dc-a319-974ab6d39ef0"
    },
    {
      "from": "5ec66b33-765c-4121-af0b-bbcd7175bcb8",
      "to": "60ac14a9-a4fe-4c33-aae2-8634b18f01ac",
      "title": "",
      "id": "89025964-f17f-49a7-b5d5-8cebaedfe4b7"
    },
    {
      "from": "5ec66b33-765c-4121-af0b-bbcd7175bcb8",
      "to": "6d014dd7-f886-4baa-8cc4-8e2d0b4f71fd",
      "title": "",
      "id": "804ed805-81d0-4d05-ab5e-ab4cb281d802"
    },
    {
      "from": "5ec66b33-765c-4121-af0b-bbcd7175bcb8",
      "to": "2755eb1d-2d62-4f58-b9cb-e577261fec42",
      "title": "",
      "id": "613b1c4a-44df-4fe0-b583-7196b6dbe3b7"
    },
    {
      "from": "5ec66b33-765c-4121-af0b-bbcd7175bcb8",
      "to": "67cbf611-21ba-49f0-8942-a720ece33dfb",
      "title": "",
      "id": "7496e4ae-24f0-47e1-9c78-e73c0b793673"
    },
    {
      "from": "5ec66b33-765c-4121-af0b-bbcd7175bcb8",
      "to": "5a318462-7538-4335-b6df-297ccd94391e",
      "title": "",
      "id": "e671bd2d-bd29-44cc-a464-04547ed0479a"
    }
  ]
}