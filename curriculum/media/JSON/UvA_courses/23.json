{
  "nodes": [
    {
      "id": "b5bd33c1-9eef-46e3-8505-4c356ec1d788",
      "label": "Functional Programming",
      "shape": "circle",
      "cog_level": "Understand",
      "title": "Functional Programming",
      "description": "Functional Programming: ",
      "layer": 0,
      "color": {
        "background": "#ffd2af",
        "border": "#ffd2af"
      }
    },
    {
      "id": "8936d902-0528-4590-86c1-cadf6d2e7cd6",
      "label": "Introduction to Lambda calculus",
      "shape": "ellipse",
      "cog_level": "Understand",
      "title": "Introduction to Lambda calculus",
      "description": "Introduction to Lambda calculus: Lambda calculus is a formal system for expressing computation based on function abstraction and application.",
      "layer": 1,
      "color": {
        "background": "#ffd2af",
        "border": "#ffd2af"
      }
    },
    {
      "id": "0bec6751-b0d2-4e6c-92d7-b6faa6d89439",
      "label": "Lambda-terms",
      "shape": "box",
      "cog_level": "Understand",
      "title": "Lambda-terms",
      "description": "Lambda-terms: Lambda-terms consist of variables, lambda abstractions, and applications. ",
      "layer": 2,
      "color": {
        "background": "#ffd2af",
        "border": "#ffd2af"
      }
    },
    {
      "id": "9286d1fb-41c0-4d1a-8fd0-df377f880ec3",
      "label": "Substitution",
      "shape": "box",
      "cog_level": "Understand",
      "title": "Substitution",
      "description": "Substitution: Substitution is the process of replacing occurrences of a variable in a lambda-term with another lambda-term.",
      "layer": 2,
      "color": {
        "background": "#ffd2af",
        "border": "#ffd2af"
      }
    },
    {
      "id": "756aad08-7172-4604-b03a-4ba3aa2f793e",
      "label": "Name clashes",
      "shape": "box",
      "cog_level": "Understand",
      "title": "Name clashes",
      "description": "Name clashes: Name clashes occur when the names of bound variables in a lambda abstraction conflict with names in the surrounding context.",
      "layer": 2,
      "color": {
        "background": "#ffd2af",
        "border": "#ffd2af"
      }
    },
    {
      "id": "e6bfba21-da59-4af7-a255-41045e0e4136",
      "label": "The rules",
      "shape": "box",
      "cog_level": "Understand",
      "title": "The rules",
      "description": "The rules: Lambda calculus operates based on reduction rules",
      "layer": 2,
      "color": {
        "background": "#ffd2af",
        "border": "#ffd2af"
      }
    },
    {
      "id": "586b6238-7fe9-4155-8b19-1e7d610ccfeb",
      "label": "Building algorithms",
      "shape": "box",
      "cog_level": "Understand",
      "title": "Building algorithms",
      "description": "Building algorithms: Lambda calculus serves as the foundation for building algorithms and expressing computations in functional programming languages.",
      "layer": 2,
      "color": {
        "background": "#ffd2af",
        "border": "#ffd2af"
      }
    },
    {
      "id": "8c204c40-ef0f-4325-a6ef-cb89519c6aa8",
      "label": "Selection",
      "shape": "box",
      "cog_level": "Understand",
      "title": "Selection",
      "description": "Selection: Selection refers to the process of choosing appropriate lambda abstractions and arguments to construct lambda-terms representing desired computations.",
      "layer": 2,
      "color": {
        "background": "#ffd2af",
        "border": "#ffd2af"
      }
    },
    {
      "id": "646b5554-d036-41bb-9462-b52fdde13062",
      "label": "Currying",
      "shape": "box",
      "cog_level": "Understand",
      "title": "Currying",
      "description": "Currying: Currying is a technique in lambda calculus where functions of multiple arguments are transformed into a sequence of functions, each taking a single argument.",
      "layer": 2,
      "color": {
        "background": "#ffd2af",
        "border": "#ffd2af"
      }
    },
    {
      "id": "a2601114-b00b-48dd-bb70-542d496cfefc",
      "label": "Successor",
      "shape": "box",
      "cog_level": "Understand",
      "title": "Successor",
      "description": "Successor: The successor function is a fundamental function in lambda calculus that increments the input by one.",
      "layer": 2,
      "color": {
        "background": "#ffd2af",
        "border": "#ffd2af"
      }
    },
    {
      "id": "79135b1d-f976-41e1-a8d5-83220bf13ced",
      "label": "Multiplication",
      "shape": "box",
      "cog_level": "Understand",
      "title": "Multiplication",
      "description": "Multiplication: Multiplication can be defined in lambda calculus using repeated addition or recursion, representing a fundamental arithmetic operation within the system.",
      "layer": 2,
      "color": {
        "background": "#ffd2af",
        "border": "#ffd2af"
      }
    },
    {
      "id": "20c55f4a-6563-4462-8c2c-3823c4ad2d1c",
      "label": "Introduction to Haskell",
      "shape": "ellipse",
      "cog_level": "Understand",
      "title": "Introduction to Haskell",
      "description": "Introduction to Haskell: ",
      "layer": 1,
      "color": {
        "background": "#ffd2af",
        "border": "#ffd2af"
      }
    },
    {
      "id": "04d34b80-c315-448d-90e5-60294e7027d1",
      "label": "Haskell: Introduction",
      "shape": "box",
      "cog_level": "Understand",
      "title": "Haskell: Introduction",
      "description": "Haskell: Introduction: Haskell is a purely functional programming language known for its strong static typing, lazy evaluation, and expressive type system.",
      "layer": 2,
      "color": {
        "background": "#ffd2af",
        "border": "#ffd2af"
      }
    },
    {
      "id": "db647d95-1e13-49ee-ab88-99ca0317038a",
      "label": "Lambdas in Haskell",
      "shape": "box",
      "cog_level": "Understand",
      "title": "Lambdas in Haskell",
      "description": "Lambdas in Haskell: Haskell supports anonymous functions or lambdas",
      "layer": 2,
      "color": {
        "background": "#ffd2af",
        "border": "#ffd2af"
      }
    },
    {
      "id": "cff75d6d-7845-45c6-86b8-33f62feaca52",
      "label": "Lists",
      "shape": "box",
      "cog_level": "Understand",
      "title": "Lists",
      "description": "Lists: Lists are a fundamental data structure in Haskell",
      "layer": 2,
      "color": {
        "background": "#ffd2af",
        "border": "#ffd2af"
      }
    },
    {
      "id": "3df645a1-fd7b-4bee-8c3c-c5f11accfdf6",
      "label": "Types",
      "shape": "box",
      "cog_level": "Understand",
      "title": "Types",
      "description": "Types: Haskell is statically typed, meaning every expression has a type that is known at compile time.",
      "layer": 2,
      "color": {
        "background": "#ffd2af",
        "border": "#ffd2af"
      }
    },
    {
      "id": "5efe63e3-4e10-4b7e-9c52-e5190242aa19",
      "label": "Pattern matching",
      "shape": "box",
      "cog_level": "Understand",
      "title": "Pattern matching",
      "description": "Pattern matching: Pattern matching in Haskell allows for defining functions with different behavior based on the structure of input data.",
      "layer": 2,
      "color": {
        "background": "#ffd2af",
        "border": "#ffd2af"
      }
    },
    {
      "id": "b50493b3-80cb-4709-87fb-c72bef3c0009",
      "label": "Lambda calculus in Haskell",
      "shape": "ellipse",
      "cog_level": "Understand",
      "title": "Lambda calculus in Haskell",
      "description": "Lambda calculus in Haskell: Haskell supports lambda calculus concepts through its function definitions and anonymous function syntax.",
      "layer": 1,
      "color": {
        "background": "#ffd2af",
        "border": "#ffd2af"
      }
    },
    {
      "id": "332c4944-9db4-4b10-afc3-229fb984d3eb",
      "label": "Sequential composition",
      "shape": "box",
      "cog_level": "Understand",
      "title": "Sequential composition",
      "description": "Sequential composition: Sequential composition in Haskell involves executing multiple actions or functions in a specified order.",
      "layer": 2,
      "color": {
        "background": "#ffd2af",
        "border": "#ffd2af"
      }
    },
    {
      "id": "78e2c456-529d-4c24-8ed3-0fa2a2efd56e",
      "label": "Equality and subtraction",
      "shape": "box",
      "cog_level": "Understand",
      "title": "Equality and subtraction",
      "description": "Equality and subtraction: Equality in Haskell is checked using the == operator for value equality and the /= operator for inequality.",
      "layer": 2,
      "color": {
        "background": "#ffd2af",
        "border": "#ffd2af"
      }
    },
    {
      "id": "59debf1b-09a8-43e7-b79a-0ee8d128543f",
      "label": "Pairs and lists",
      "shape": "box",
      "cog_level": "Understand",
      "title": "Pairs and lists",
      "description": "Pairs and lists: Pairs and lists are fundamental data structures used extensively in Haskell programming.",
      "layer": 2,
      "color": {
        "background": "#ffd2af",
        "border": "#ffd2af"
      }
    },
    {
      "id": "64a92632-56d6-4a3e-b2f4-fc5adb3c3761",
      "label": "The construction principle",
      "shape": "box",
      "cog_level": "Understand",
      "title": "The construction principle",
      "description": "The construction principle: The construction principle in Haskell refers to building complex structures or computations from simpler components through composition and combination.",
      "layer": 2,
      "color": {
        "background": "#ffd2af",
        "border": "#ffd2af"
      }
    },
    {
      "id": "eaf83776-e69a-492f-b7c1-ac82f21d20b0",
      "label": "Recursion ",
      "shape": "box",
      "cog_level": "Understand",
      "title": "Recursion ",
      "description": "Recursion : Recursion is a fundamental technique in Haskell for solving problems by defining functions in terms of themselves.",
      "layer": 2,
      "color": {
        "background": "#ffd2af",
        "border": "#ffd2af"
      }
    },
    {
      "id": "4eab4d5c-a5e2-46cc-850e-f97c78163fd8",
      "label": "Evaluation order",
      "shape": "box",
      "cog_level": "Understand",
      "title": "Evaluation order",
      "description": "Evaluation order: Haskell uses lazy evaluation by default, where expressions are only evaluated when their values are needed.",
      "layer": 2,
      "color": {
        "background": "#ffd2af",
        "border": "#ffd2af"
      }
    },
    {
      "id": "d1f32643-7fc1-40dd-9d5e-26df8fae357e",
      "label": "Abstraction of values",
      "shape": "box",
      "cog_level": "Understand",
      "title": "Abstraction of values",
      "description": "Abstraction of values: Abstraction of values in Haskell involves defining functions and data types that encapsulate specific behaviors or concepts.",
      "layer": 2,
      "color": {
        "background": "#ffd2af",
        "border": "#ffd2af"
      }
    },
    {
      "id": "b3ccb737-a86d-459d-983e-6d0ba2aec89b",
      "label": "Theory of functional programming",
      "shape": "ellipse",
      "cog_level": "Understand",
      "title": "Theory of functional programming",
      "description": "Theory of functional programming: Functional programming is based on the mathematical concept of functions as first-class citizens",
      "layer": 1,
      "color": {
        "background": "#ffd2af",
        "border": "#ffd2af"
      }
    },
    {
      "id": "62647ef3-9ae5-4bf0-bdcc-ed9b32bec71d",
      "label": "Type theory",
      "shape": "box",
      "cog_level": "Understand",
      "title": "Type theory",
      "description": "Type theory: Type theory is a branch of mathematics and computer science concerned with the study of types, which classify the various constructs of programming languages.",
      "layer": 2,
      "color": {
        "background": "#ffd2af",
        "border": "#ffd2af"
      }
    },
    {
      "id": "8c98e9a5-6cde-44b3-a545-4a206675b6d7",
      "label": "Algebraic data types",
      "shape": "box",
      "cog_level": "Understand",
      "title": "Algebraic data types",
      "description": "Algebraic data types: Algebraic data types (ADTs) are a fundamental concept in functional programming languages like Haskell.",
      "layer": 2,
      "color": {
        "background": "#ffd2af",
        "border": "#ffd2af"
      }
    },
    {
      "id": "e36ab84e-f511-4efe-829c-77c1a0d3f8ec",
      "label": "Polymorphism",
      "shape": "box",
      "cog_level": "Understand",
      "title": "Polymorphism",
      "description": "Polymorphism: Polymorphism refers to the ability of functions or data types to operate on values of different types.",
      "layer": 2,
      "color": {
        "background": "#ffd2af",
        "border": "#ffd2af"
      }
    },
    {
      "id": "a46e508f-284b-4e24-90ec-703a2ae02714",
      "label": "Type classes",
      "shape": "box",
      "cog_level": "Understand",
      "title": "Type classes",
      "description": "Type classes: Type classes are a feature of Haskell that enables ad-hoc polymorphism by grouping types that support a common set of operations.",
      "layer": 2,
      "color": {
        "background": "#ffd2af",
        "border": "#ffd2af"
      }
    },
    {
      "id": "de3209c3-a828-4f08-a27b-22cda26ffc2a",
      "label": "Kinds",
      "shape": "box",
      "cog_level": "Understand",
      "title": "Kinds",
      "description": "Kinds: Kinds are a type system concept in Haskell that classifies types based on their arity or number of type arguments.",
      "layer": 2,
      "color": {
        "background": "#ffd2af",
        "border": "#ffd2af"
      }
    }
  ],
  "edges": [
    {
      "from": "b5bd33c1-9eef-46e3-8505-4c356ec1d788",
      "to": "8936d902-0528-4590-86c1-cadf6d2e7cd6",
      "title": "",
      "id": "3e9ff2f7-d09e-40d5-a2c5-513e68ecf1f3"
    },
    {
      "from": "8936d902-0528-4590-86c1-cadf6d2e7cd6",
      "to": "0bec6751-b0d2-4e6c-92d7-b6faa6d89439",
      "title": "",
      "id": "cb590222-ac42-4867-b9ff-2b0dd0f78465"
    },
    {
      "from": "8936d902-0528-4590-86c1-cadf6d2e7cd6",
      "to": "9286d1fb-41c0-4d1a-8fd0-df377f880ec3",
      "title": "",
      "id": "0d362ce2-284a-4ede-b59a-6c698a4b72d5"
    },
    {
      "from": "8936d902-0528-4590-86c1-cadf6d2e7cd6",
      "to": "756aad08-7172-4604-b03a-4ba3aa2f793e",
      "title": "",
      "id": "33b256e4-d0c2-406a-941d-dfe334106bc2"
    },
    {
      "from": "8936d902-0528-4590-86c1-cadf6d2e7cd6",
      "to": "e6bfba21-da59-4af7-a255-41045e0e4136",
      "title": "",
      "id": "91830f13-13e5-40d5-958d-7dc4e9497e01"
    },
    {
      "from": "8936d902-0528-4590-86c1-cadf6d2e7cd6",
      "to": "586b6238-7fe9-4155-8b19-1e7d610ccfeb",
      "title": "",
      "id": "0b640881-9aca-4007-bec5-ecba0305cba7"
    },
    {
      "from": "8936d902-0528-4590-86c1-cadf6d2e7cd6",
      "to": "8c204c40-ef0f-4325-a6ef-cb89519c6aa8",
      "title": "",
      "id": "5f83245a-f269-4027-8875-8f5defed03f9"
    },
    {
      "from": "8936d902-0528-4590-86c1-cadf6d2e7cd6",
      "to": "646b5554-d036-41bb-9462-b52fdde13062",
      "title": "",
      "id": "370b8f13-c670-46bc-a2ae-933d7fdfa614"
    },
    {
      "from": "8936d902-0528-4590-86c1-cadf6d2e7cd6",
      "to": "a2601114-b00b-48dd-bb70-542d496cfefc",
      "title": "",
      "id": "daf56076-6121-41a5-803b-b6ee8b014a4b"
    },
    {
      "from": "8936d902-0528-4590-86c1-cadf6d2e7cd6",
      "to": "79135b1d-f976-41e1-a8d5-83220bf13ced",
      "title": "",
      "id": "99a07a0a-1279-4166-9483-897f4053f9cf"
    },
    {
      "from": "b5bd33c1-9eef-46e3-8505-4c356ec1d788",
      "to": "20c55f4a-6563-4462-8c2c-3823c4ad2d1c",
      "title": "",
      "id": "e9f40e10-89aa-4b99-b3f2-ec98a40ecad9"
    },
    {
      "from": "20c55f4a-6563-4462-8c2c-3823c4ad2d1c",
      "to": "04d34b80-c315-448d-90e5-60294e7027d1",
      "title": "",
      "id": "9aec45ee-d5ea-4876-9a77-f3a081e2f934"
    },
    {
      "from": "20c55f4a-6563-4462-8c2c-3823c4ad2d1c",
      "to": "db647d95-1e13-49ee-ab88-99ca0317038a",
      "title": "",
      "id": "8e2ee83b-abb2-43c1-bb81-2fdd39f73045"
    },
    {
      "from": "20c55f4a-6563-4462-8c2c-3823c4ad2d1c",
      "to": "cff75d6d-7845-45c6-86b8-33f62feaca52",
      "title": "",
      "id": "73c7bc8b-4ebe-4a74-89ab-05f462ce2b22"
    },
    {
      "from": "20c55f4a-6563-4462-8c2c-3823c4ad2d1c",
      "to": "3df645a1-fd7b-4bee-8c3c-c5f11accfdf6",
      "title": "",
      "id": "2184c9a1-f2d2-4da4-a9d5-53ef35ca93fa"
    },
    {
      "from": "20c55f4a-6563-4462-8c2c-3823c4ad2d1c",
      "to": "5efe63e3-4e10-4b7e-9c52-e5190242aa19",
      "title": "",
      "id": "a5e0e091-5419-4668-b886-cafb35bfe407"
    },
    {
      "from": "b5bd33c1-9eef-46e3-8505-4c356ec1d788",
      "to": "b50493b3-80cb-4709-87fb-c72bef3c0009",
      "title": "",
      "id": "9115dc93-201a-4867-b862-624cf4ccc25e"
    },
    {
      "from": "b50493b3-80cb-4709-87fb-c72bef3c0009",
      "to": "332c4944-9db4-4b10-afc3-229fb984d3eb",
      "title": "",
      "id": "9e7ca4de-c0e2-49b4-aed5-6b9075e9d21a"
    },
    {
      "from": "b50493b3-80cb-4709-87fb-c72bef3c0009",
      "to": "78e2c456-529d-4c24-8ed3-0fa2a2efd56e",
      "title": "",
      "id": "f32e1312-c735-4b0f-abf6-545b4f3ba6e0"
    },
    {
      "from": "b50493b3-80cb-4709-87fb-c72bef3c0009",
      "to": "59debf1b-09a8-43e7-b79a-0ee8d128543f",
      "title": "",
      "id": "dc37904c-e3dd-4ef8-ac8b-0e7afc7dd872"
    },
    {
      "from": "b50493b3-80cb-4709-87fb-c72bef3c0009",
      "to": "64a92632-56d6-4a3e-b2f4-fc5adb3c3761",
      "title": "",
      "id": "17001109-5dd6-4a9c-b28c-4e23d59cbf73"
    },
    {
      "from": "b50493b3-80cb-4709-87fb-c72bef3c0009",
      "to": "eaf83776-e69a-492f-b7c1-ac82f21d20b0",
      "title": "",
      "id": "aaff6c31-eb4c-4981-affb-fe2deb0d9b1d"
    },
    {
      "from": "b50493b3-80cb-4709-87fb-c72bef3c0009",
      "to": "4eab4d5c-a5e2-46cc-850e-f97c78163fd8",
      "title": "",
      "id": "ecd0cd58-20d2-41a9-80e8-d1115fca6b21"
    },
    {
      "from": "b50493b3-80cb-4709-87fb-c72bef3c0009",
      "to": "d1f32643-7fc1-40dd-9d5e-26df8fae357e",
      "title": "",
      "id": "446194d8-a007-4b87-8f58-99c36397bec6"
    },
    {
      "from": "b5bd33c1-9eef-46e3-8505-4c356ec1d788",
      "to": "b3ccb737-a86d-459d-983e-6d0ba2aec89b",
      "title": "",
      "id": "4dd1faa3-0a96-489b-9f65-f50439c84247"
    },
    {
      "from": "b3ccb737-a86d-459d-983e-6d0ba2aec89b",
      "to": "62647ef3-9ae5-4bf0-bdcc-ed9b32bec71d",
      "title": "",
      "id": "666fb2a8-8473-4ce6-aece-9b2e838d64d1"
    },
    {
      "from": "b3ccb737-a86d-459d-983e-6d0ba2aec89b",
      "to": "8c98e9a5-6cde-44b3-a545-4a206675b6d7",
      "title": "",
      "id": "e5c77f50-5bdc-4eeb-9b93-89f0e6172d96"
    },
    {
      "from": "b3ccb737-a86d-459d-983e-6d0ba2aec89b",
      "to": "e36ab84e-f511-4efe-829c-77c1a0d3f8ec",
      "title": "",
      "id": "a66f11f3-06c9-4773-bcdd-c445650e5f9d"
    },
    {
      "from": "b3ccb737-a86d-459d-983e-6d0ba2aec89b",
      "to": "a46e508f-284b-4e24-90ec-703a2ae02714",
      "title": "",
      "id": "05439ef8-1486-4667-bda4-90b9435a6f30"
    },
    {
      "from": "b3ccb737-a86d-459d-983e-6d0ba2aec89b",
      "to": "de3209c3-a828-4f08-a27b-22cda26ffc2a",
      "title": "",
      "id": "f4537100-afa9-4b9f-bc33-e12b975e0995"
    }
  ]
}