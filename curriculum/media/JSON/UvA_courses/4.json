{
  "nodes": [
    {
      "id": "8d914036-c40e-44f6-a277-36daf549fde6",
      "label": "Programming Languages",
      "cog_level": "Understand",
      "title": "Programming Languages",
      "description": "Programming Languages: ",
      "node_type": "course",
      "shape": "circle",
      "color": {
        "background": "#ffd2af",
        "border": "#ffd2af"
      }
    },
    {
      "id": "7fedf2f0-999e-4ea5-b2e2-06f422a75ccd",
      "label": "Programming Languages, Paradigms, and Environments",
      "cog_level": "Understand",
      "title": "Programming Languages, Paradigms, and Environments",
      "description": "Programming Languages, Paradigms, and Environments: ",
      "node_type": "knowledge unit",
      "shape": "ellipse",
      "color": {
        "background": "#ffd2af",
        "border": "#ffd2af"
      }
    },
    {
      "id": "2f2c1d55-8646-41bd-91aa-46d0e063ba40",
      "label": "Programming languages",
      "cog_level": "Understand",
      "title": "Programming languages",
      "description": "Programming languages: Programming Languages: High-level languages (Python, Java), Low-level languages (Assembly), Scripting languages (Perl, Ruby), Domain-specific languages (SQL, HTML).",
      "node_type": "knowledge point",
      "shape": "box",
      "color": {
        "background": "#ffd2af",
        "border": "#ffd2af"
      }
    },
    {
      "id": "0692fb49-c4aa-489a-a6f2-f5a60bbebbc1",
      "label": "Programming Paradigms",
      "cog_level": "Understand",
      "title": "Programming Paradigms",
      "description": "Programming Paradigms: Programming Paradigms: Imperative (C, Pascal), Declarative (Functional, Logic), Object-Oriented (Java, C++), Procedural (C, Fortran).",
      "node_type": "knowledge point",
      "shape": "box",
      "color": {
        "background": "#ffd2af",
        "border": "#ffd2af"
      }
    },
    {
      "id": "f8b0dc6f-561f-4380-8fc2-cb530273011a",
      "label": "Programming environments",
      "cog_level": "Understand",
      "title": "Programming environments",
      "description": "Programming environments: Programming Environments: Integrated Development Environments (IDEs), Text Editors, Notebook Environments (Jupyter), Web-based Development Environments (CodePen).",
      "node_type": "knowledge point",
      "shape": "box",
      "color": {
        "background": "#ffd2af",
        "border": "#ffd2af"
      }
    },
    {
      "id": "5457abaf-fc5f-4230-acd6-e4911667a671",
      "label": "Python",
      "cog_level": "Understand",
      "title": "Python",
      "description": "Python: Python: High-level, interpreted, general-purpose programming language.",
      "node_type": "knowledge unit",
      "shape": "ellipse",
      "color": {
        "background": "#ffd2af",
        "border": "#ffd2af"
      }
    },
    {
      "id": "bf411719-ae47-4f3e-b6c5-96f2bf52364b",
      "label": "Programming Paradigm",
      "cog_level": "Understand",
      "title": "Programming Paradigm",
      "description": "Programming Paradigm: Programming Paradigm: Multi-paradigm, supporting object-oriented, imperative, functional, and procedural programming.",
      "node_type": "knowledge point",
      "shape": "box",
      "color": {
        "background": "#ffd2af",
        "border": "#ffd2af"
      }
    },
    {
      "id": "19527b81-de60-45bf-b8cd-e1a19fa96c6b",
      "label": "Fundamental Types",
      "cog_level": "Understand",
      "title": "Fundamental Types",
      "description": "Fundamental Types: Fundamental Types: Integers, floats, strings, booleans, lists, tuples, dictionaries, sets.",
      "node_type": "knowledge point",
      "shape": "box",
      "color": {
        "background": "#ffd2af",
        "border": "#ffd2af"
      }
    },
    {
      "id": "be564ec7-1e43-491e-b69b-6d7c3875f4e0",
      "label": "The Type System",
      "cog_level": "Understand",
      "title": "The Type System",
      "description": "The Type System: The Type System: Dynamic typing, strong typing.",
      "node_type": "knowledge point",
      "shape": "box",
      "color": {
        "background": "#ffd2af",
        "border": "#ffd2af"
      }
    },
    {
      "id": "8926f748-3e07-4ee9-8f26-3a4347fa0e81",
      "label": "Flow Control",
      "cog_level": "Understand",
      "title": "Flow Control",
      "description": "Flow Control: Flow Control: if-else statements, loops (for, while).",
      "node_type": "knowledge point",
      "shape": "box",
      "color": {
        "background": "#ffd2af",
        "border": "#ffd2af"
      }
    },
    {
      "id": "37530721-5e09-4d15-b558-4659ce2d8ab1",
      "label": "Compound Data Types",
      "cog_level": "Understand",
      "title": "Compound Data Types",
      "description": "Compound Data Types: Compound Data Types: Lists, tuples, dictionaries, sets.",
      "node_type": "knowledge point",
      "shape": "box",
      "color": {
        "background": "#ffd2af",
        "border": "#ffd2af"
      }
    },
    {
      "id": "c413d04d-3e9d-422e-8ec9-99252ab41ee6",
      "label": "Strings",
      "cog_level": "Understand",
      "title": "Strings",
      "description": "Strings: Strings: Immutable sequences of characters, supporting a wide range of string manipulation operations.",
      "node_type": "knowledge point",
      "shape": "box",
      "color": {
        "background": "#ffd2af",
        "border": "#ffd2af"
      }
    },
    {
      "id": "3b2e87d3-5da8-4648-9699-696d264a3941",
      "label": "Exceptions",
      "cog_level": "Understand",
      "title": "Exceptions",
      "description": "Exceptions: Exceptions: Mechanism for handling errors and exceptional situations in Python code.",
      "node_type": "knowledge point",
      "shape": "box",
      "color": {
        "background": "#ffd2af",
        "border": "#ffd2af"
      }
    },
    {
      "id": "236a4b9c-e10e-49ae-ab59-168a65a2087a",
      "label": "Memory Model",
      "cog_level": "Understand",
      "title": "Memory Model",
      "description": "Memory Model: Memory Model: Garbage collection, reference counting.",
      "node_type": "knowledge point",
      "shape": "box",
      "color": {
        "background": "#ffd2af",
        "border": "#ffd2af"
      }
    },
    {
      "id": "7e63f487-96a5-4d95-890d-8526c70c4de1",
      "label": "Iteratie of Recursie",
      "cog_level": "Understand",
      "title": "Iteratie of Recursie",
      "description": "Iteratie of Recursie: Iteratie of Recursie: Iteration (for loops) and recursion (calling functions within themselves) are common control flow mechanisms.",
      "node_type": "knowledge point",
      "shape": "box",
      "color": {
        "background": "#ffd2af",
        "border": "#ffd2af"
      }
    },
    {
      "id": "158ac0eb-50cc-4d0a-bb92-9e969b7ca531",
      "label": "Higher Order Functions",
      "cog_level": "Understand",
      "title": "Higher Order Functions",
      "description": "Higher Order Functions: Higher Order Functions: Functions that can accept other functions as arguments or return functions as results.",
      "node_type": "knowledge point",
      "shape": "box",
      "color": {
        "background": "#ffd2af",
        "border": "#ffd2af"
      }
    },
    {
      "id": "38f50973-b252-48c1-8d1a-4c0b888f8f5b",
      "label": "Iterable",
      "cog_level": "Understand",
      "title": "Iterable",
      "description": "Iterable: Iterable: Objects that can be iterated over using loops or comprehension expressions.",
      "node_type": "knowledge point",
      "shape": "box",
      "color": {
        "background": "#ffd2af",
        "border": "#ffd2af"
      }
    },
    {
      "id": "5bf06011-5f7c-4699-a43d-e6844f5f5a41",
      "label": "Generator",
      "cog_level": "Understand",
      "title": "Generator",
      "description": "Generator: Generator: Functions that return iterators, allowing lazy evaluation of values.",
      "node_type": "knowledge point",
      "shape": "box",
      "color": {
        "background": "#ffd2af",
        "border": "#ffd2af"
      }
    },
    {
      "id": "cacc43f3-c2c4-4e71-bc25-06baa721cbd3",
      "label": "C++",
      "cog_level": "Understand",
      "title": "C++",
      "description": "C++: ",
      "node_type": "knowledge unit",
      "shape": "ellipse",
      "color": {
        "background": "#ffd2af",
        "border": "#ffd2af"
      }
    },
    {
      "id": "0c0cf18d-ff56-40aa-8508-19b5f893d411",
      "label": "History",
      "cog_level": "Understand",
      "title": "History",
      "description": "History: History: Developed by Bjarne Stroustrup in 1983 as an extension of the C programming language.",
      "node_type": "knowledge point",
      "shape": "box",
      "color": {
        "background": "#ffd2af",
        "border": "#ffd2af"
      }
    },
    {
      "id": "af0f9ecb-c08b-4a87-8702-f653c43a5339",
      "label": "Usage",
      "cog_level": "Understand",
      "title": "Usage",
      "description": "Usage: Usage: Widely used in systems and application programming, game development, and high-performance computing.",
      "node_type": "knowledge point",
      "shape": "box",
      "color": {
        "background": "#ffd2af",
        "border": "#ffd2af"
      }
    },
    {
      "id": "9ead9bce-f4ef-4b0b-a972-e035fa3e77cb",
      "label": "Types",
      "cog_level": "Understand",
      "title": "Types",
      "description": "Types: Types: Strongly typed language supporting fundamental types like integers, floats, characters, as well as user-defined types.",
      "node_type": "knowledge point",
      "shape": "box",
      "color": {
        "background": "#ffd2af",
        "border": "#ffd2af"
      }
    },
    {
      "id": "ea90f7d7-1581-4ad0-a0d9-c7815927fe81",
      "label": "Memory Model",
      "cog_level": "Understand",
      "title": "Memory Model",
      "description": "Memory Model: Memory Model: Manual memory management with support for dynamic allocation and deallocation using new and delete keywords.",
      "node_type": "knowledge point",
      "shape": "box",
      "color": {
        "background": "#ffd2af",
        "border": "#ffd2af"
      }
    },
    {
      "id": "d9c7127b-f023-46c3-a53e-c72921813986",
      "label": "RAII",
      "cog_level": "Understand",
      "title": "RAII",
      "description": "RAII: RAII (Resource Acquisition Is Initialization): Idiomatic C++ pattern for managing resource allocation and deallocation using constructors and destructors.",
      "node_type": "knowledge point",
      "shape": "box",
      "color": {
        "background": "#ffd2af",
        "border": "#ffd2af"
      }
    },
    {
      "id": "55a0c733-0380-4bf5-868a-112a273c8743",
      "label": "Operator Overloading",
      "cog_level": "Understand",
      "title": "Operator Overloading",
      "description": "Operator Overloading: Operator Overloading: Ability to redefine the behavior of operators for user-defined types.",
      "node_type": "knowledge point",
      "shape": "box",
      "color": {
        "background": "#ffd2af",
        "border": "#ffd2af"
      }
    },
    {
      "id": "a638aecf-6d86-49fb-b8da-4a468f3258c1",
      "label": "Polymorphism",
      "cog_level": "Understand",
      "title": "Polymorphism",
      "description": "Polymorphism: Polymorphism: Achieved through virtual functions and inheritance hierarchies, allowing objects of different types to be treated uniformly.",
      "node_type": "knowledge point",
      "shape": "box",
      "color": {
        "background": "#ffd2af",
        "border": "#ffd2af"
      }
    },
    {
      "id": "5cb5dc11-a993-4ade-bedd-aaaf19e61f58",
      "label": "Data structures",
      "cog_level": "Understand",
      "title": "Data structures",
      "description": "Data structures: Data Structures: C++ offers a rich set of data structures including arrays, vectors, linked lists, stacks, queues, trees, and maps, among others.",
      "node_type": "knowledge point",
      "shape": "box",
      "color": {
        "background": "#ffd2af",
        "border": "#ffd2af"
      }
    },
    {
      "id": "1b3d8bdd-5cc9-40d1-ac6f-1f1e6a0abede",
      "label": "inheritance",
      "cog_level": "Understand",
      "title": "inheritance",
      "description": "inheritance: Inheritance: Allows a class to inherit properties and behavior from another class, facilitating code reuse and promoting a hierarchical relationship between classes.",
      "node_type": "knowledge point",
      "shape": "box",
      "color": {
        "background": "#ffd2af",
        "border": "#ffd2af"
      }
    },
    {
      "id": "4139d7dd-8bcd-454f-aba0-abe740320d74",
      "label": "Inclusion Polymorphism",
      "cog_level": "Understand",
      "title": "Inclusion Polymorphism",
      "description": "Inclusion Polymorphism: Inclusion Polymorphism: Also known as runtime polymorphism or method overriding, it allows objects of different classes to be treated as objects of a common superclass, enabling dynamic method dispatch.",
      "node_type": "knowledge point",
      "shape": "box",
      "color": {
        "background": "#ffd2af",
        "border": "#ffd2af"
      }
    },
    {
      "id": "f03a6ae0-a73c-4733-9064-6c6cb95652ba",
      "label": "Software engineering principes",
      "cog_level": "Understand",
      "title": "Software engineering principes",
      "description": "Software engineering principes: Software Engineering Principles: Principles such as SOLID (Single Responsibility, Open/Closed, Liskov Substitution, Interface Segregation, Dependency Inversion) guide object-oriented design and promote maintainability, scalability, and robustness.",
      "node_type": "knowledge point",
      "shape": "box",
      "color": {
        "background": "#ffd2af",
        "border": "#ffd2af"
      }
    },
    {
      "id": "2030a2ce-5bdf-4e71-b461-eac73e6116b5",
      "label": "Coupling\uff08not treated\uff09",
      "cog_level": "Understand",
      "title": "Coupling\uff08not treated\uff09",
      "description": "Coupling\uff08not treated\uff09: ",
      "node_type": "knowledge point",
      "shape": "box",
      "color": {
        "background": "#ffd2af",
        "border": "#ffd2af"
      }
    },
    {
      "id": "d2094ee8-c59d-4a02-8551-12d9b31a0749",
      "label": "Design patterns\uff08not covered\uff09",
      "cog_level": "Understand",
      "title": "Design patterns\uff08not covered\uff09",
      "description": "Design patterns\uff08not covered\uff09: ",
      "node_type": "knowledge point",
      "shape": "box",
      "color": {
        "background": "#ffd2af",
        "border": "#ffd2af"
      }
    },
    {
      "id": "c8e6598a-d5af-41b4-8b60-b53e706a14a7",
      "label": "Encapsulation and information hiding",
      "cog_level": "Understand",
      "title": "Encapsulation and information hiding",
      "description": "Encapsulation and information hiding: Encapsulation and Information Hiding: Encapsulation is the bundling of data and methods that operate on the data into a single unit (class), while information hiding restricts access to certain components of an object, promoting modularity and reducing dependencies.",
      "node_type": "knowledge point",
      "shape": "box",
      "color": {
        "background": "#ffd2af",
        "border": "#ffd2af"
      }
    },
    {
      "id": "126e96a7-d0da-461e-aa76-37463647926b",
      "label": "OO in Python en C++",
      "cog_level": "Understand",
      "title": "OO in Python en C++",
      "description": "OO in Python en C++: OO in Python and C++: Both Python and C++ are object-oriented languages, but they have different approaches to implementing OOP concepts. Python emphasizes simplicity and readability, while C++ offers more control over memory management and performance.",
      "node_type": "knowledge point",
      "shape": "box",
      "color": {
        "background": "#ffd2af",
        "border": "#ffd2af"
      }
    },
    {
      "id": "16c2612d-6ffb-49a4-9eff-adf4d6ec1995",
      "label": "Haskell",
      "cog_level": "Understand",
      "title": "Haskell",
      "description": "Haskell: Haskell: A purely functional programming language known for its strong type system and lazy evaluation.",
      "node_type": "knowledge unit",
      "shape": "ellipse",
      "color": {
        "background": "#ffd2af",
        "border": "#ffd2af"
      }
    },
    {
      "id": "5571f54c-cd89-4109-bb59-d77427b977f4",
      "label": "First steps",
      "cog_level": "Understand",
      "title": "First steps",
      "description": "First steps: First steps: Basic introduction to Haskell syntax, data types, and functional programming concepts.",
      "node_type": "knowledge point",
      "shape": "box",
      "color": {
        "background": "#ffd2af",
        "border": "#ffd2af"
      }
    },
    {
      "id": "f792b28e-b135-4c39-b5f7-55eab0bb34e7",
      "label": "Lists and tuples",
      "cog_level": "Understand",
      "title": "Lists and tuples",
      "description": "Lists and tuples: Lists and tuples: Common data structures in Haskell; lists are sequences of elements, tuples are fixed-size heterogeneous collections of elements.",
      "node_type": "knowledge point",
      "shape": "box",
      "color": {
        "background": "#ffd2af",
        "border": "#ffd2af"
      }
    },
    {
      "id": "4d10c9dc-e148-4b00-bbfc-9420bf629d67",
      "label": "Functions",
      "cog_level": "Understand",
      "title": "Functions",
      "description": "Functions: Functions: Fundamental building blocks for defining computations, often using pattern matching and recursion.",
      "node_type": "knowledge point",
      "shape": "box",
      "color": {
        "background": "#ffd2af",
        "border": "#ffd2af"
      }
    },
    {
      "id": "f7cd3609-dbd7-45e5-a551-e4958f143cd0",
      "label": "Working with lists",
      "cog_level": "Understand",
      "title": "Working with lists",
      "description": "Working with lists: Working with lists: Various operations for efficient manipulation of lists, such as mapping, filtering, folding, and list comprehensions.",
      "node_type": "knowledge point",
      "shape": "box",
      "color": {
        "background": "#ffd2af",
        "border": "#ffd2af"
      }
    },
    {
      "id": "df7d4572-c1ab-498f-a8b8-1c02ab2c1e87",
      "label": "Tips'n Tricks",
      "cog_level": "Understand",
      "title": "Tips'n Tricks",
      "description": "Tips'n Tricks: Tips'n Tricks: Practical tips and best practices for writing clear, concise, and idiomatic Haskell code.",
      "node_type": "knowledge point",
      "shape": "box",
      "color": {
        "background": "#ffd2af",
        "border": "#ffd2af"
      }
    },
    {
      "id": "dc0462ce-03b9-4913-9a02-1950627ede3d",
      "label": "Types",
      "cog_level": "Understand",
      "title": "Types",
      "description": "Types: Types: Haskell boasts a powerful type system ensuring type safety and expressive type signatures for functions and data structures.",
      "node_type": "knowledge point",
      "shape": "box",
      "color": {
        "background": "#ffd2af",
        "border": "#ffd2af"
      }
    },
    {
      "id": "fb6a5fe6-d9ab-47b9-9c63-3f4ccd059c98",
      "label": "Polymorphism",
      "cog_level": "Understand",
      "title": "Polymorphism",
      "description": "Polymorphism: Polymorphism: Haskell supports both parametric polymorphism using type variables and ad-hoc polymorphism using type classes.",
      "node_type": "knowledge point",
      "shape": "box",
      "color": {
        "background": "#ffd2af",
        "border": "#ffd2af"
      }
    },
    {
      "id": "6710e4bc-7ce0-433b-ac5a-f29dcc7baa1c",
      "label": "Input/Output",
      "cog_level": "Understand",
      "title": "Input/Output",
      "description": "Input/Output: Input/Output: Interaction with the outside world, including reading from and writing to files, handling user input, and performing IO operations.",
      "node_type": "knowledge point",
      "shape": "box",
      "color": {
        "background": "#ffd2af",
        "border": "#ffd2af"
      }
    },
    {
      "id": "d0e2fcab-8933-4024-a5ed-93c10148a0cd",
      "label": "Functors",
      "cog_level": "Understand",
      "title": "Functors",
      "description": "Functors: Functors: Types that can be mapped over, allowing for serialization of computations while preserving structure.",
      "node_type": "knowledge point",
      "shape": "box",
      "color": {
        "background": "#ffd2af",
        "border": "#ffd2af"
      }
    },
    {
      "id": "9ab79432-2009-4712-9e73-8676e964af3f",
      "label": "do-notation",
      "cog_level": "Understand",
      "title": "do-notation",
      "description": "do-notation: do-notation: Syntax sugar in Haskell used to serialize IO operations in a more imperative style, making IO code more readable and manageable.",
      "node_type": "knowledge point",
      "shape": "box",
      "color": {
        "background": "#ffd2af",
        "border": "#ffd2af"
      }
    },
    {
      "id": "e255cf6e-08ba-4a08-9b88-f827b44c2e08",
      "label": "Functional programming",
      "cog_level": "Understand",
      "title": "Functional programming",
      "description": "Functional programming: Functional programming: A programming paradigm centered around the evaluation of mathematical functions and avoiding mutable state and side effects.",
      "node_type": "knowledge unit",
      "shape": "ellipse",
      "color": {
        "background": "#ffd2af",
        "border": "#ffd2af"
      }
    },
    {
      "id": "7a9f7bfd-8288-4855-b2ce-c49554bc2750",
      "label": "Haskell design choices",
      "cog_level": "Understand",
      "title": "Haskell design choices",
      "description": "Haskell design choices: Haskell design choices: Haskell is a purely functional programming language designed to be concise, expressive, and efficient, featuring lazy evaluation and strong static typing.",
      "node_type": "knowledge point",
      "shape": "box",
      "color": {
        "background": "#ffd2af",
        "border": "#ffd2af"
      }
    },
    {
      "id": "a951f009-17af-454e-8f52-517e9c7e2fe9",
      "label": "Procedures versus functions",
      "cog_level": "Understand",
      "title": "Procedures versus functions",
      "description": "Procedures versus functions: Procedures versus functions: Functions in functional programming are pure and deterministic, while procedures may have side effects and mutable state, common in imperative programming.",
      "node_type": "knowledge point",
      "shape": "box",
      "color": {
        "background": "#ffd2af",
        "border": "#ffd2af"
      }
    },
    {
      "id": "f8631d76-308d-41d4-ae3b-ca280870140d",
      "label": "Program State and Input/Output",
      "cog_level": "Understand",
      "title": "Program State and Input/Output",
      "description": "Program State and Input/Output: Program State and Input/Output: In functional programming, program state is typically immutable, and IO operations are handled in a referentially transparent manner using monads or other abstractions.",
      "node_type": "knowledge point",
      "shape": "box",
      "color": {
        "background": "#ffd2af",
        "border": "#ffd2af"
      }
    },
    {
      "id": "66796aae-5a6b-44d9-8c4a-c82a23b129ee",
      "label": "Evaluation strategy",
      "cog_level": "Understand",
      "title": "Evaluation strategy",
      "description": "Evaluation strategy: Evaluation strategy: Functional programming languages often use lazy evaluation, where expressions are only evaluated when their results are needed, enabling more efficient and modular code.",
      "node_type": "knowledge point",
      "shape": "box",
      "color": {
        "background": "#ffd2af",
        "border": "#ffd2af"
      }
    },
    {
      "id": "27b68858-990c-4ce0-aa09-c1bc928c8f7b",
      "label": "Lazy evaluation",
      "cog_level": "Understand",
      "title": "Lazy evaluation",
      "description": "Lazy evaluation: Lazy evaluation: In lazy evaluation, expressions are not evaluated until their results are needed, allowing for more efficient use of resources and enabling the creation of infinite data structures.",
      "node_type": "knowledge point",
      "shape": "box",
      "color": {
        "background": "#ffd2af",
        "border": "#ffd2af"
      }
    },
    {
      "id": "cecc932c-c89b-4a15-a9bc-66624dce8fbc",
      "label": "Enlang",
      "cog_level": "Understand",
      "title": "Enlang",
      "description": "Enlang: ",
      "node_type": "knowledge unit",
      "shape": "ellipse",
      "color": {
        "background": "#ffd2af",
        "border": "#ffd2af"
      }
    },
    {
      "id": "001dfde6-a451-415e-8271-bc33a10b475b",
      "label": "History",
      "cog_level": "Understand",
      "title": "History",
      "description": "History: History: Erlang is a programming language developed by Ericsson in the 1980s for telecommunications applications, known for its fault tolerance and concurrency features.",
      "node_type": "knowledge point",
      "shape": "box",
      "color": {
        "background": "#ffd2af",
        "border": "#ffd2af"
      }
    },
    {
      "id": "ee3cbc8e-62cb-467a-87e5-0416f670c7d8",
      "label": "Imperative vs Functional",
      "cog_level": "Understand",
      "title": "Imperative vs Functional",
      "description": "Imperative vs Functional: Imperative vs Functional: Erlang is primarily a functional programming language, emphasizing immutability and declarative programming, although it does support some imperative constructs.",
      "node_type": "knowledge point",
      "shape": "box",
      "color": {
        "background": "#ffd2af",
        "border": "#ffd2af"
      }
    },
    {
      "id": "52354c5c-2399-41ea-935e-c2010aacc888",
      "label": "Strict vs lazy evaluation",
      "cog_level": "Understand",
      "title": "Strict vs lazy evaluation",
      "description": "Strict vs lazy evaluation: Strict vs lazy evaluation: Erlang primarily uses strict evaluation, meaning expressions are evaluated as soon as they are bound to variables. Lazy evaluation is not a primary feature of Erlang.",
      "node_type": "knowledge point",
      "shape": "box",
      "color": {
        "background": "#ffd2af",
        "border": "#ffd2af"
      }
    },
    {
      "id": "52757610-311d-45ba-be11-f39fc13c6ca3",
      "label": "IO in Erlang",
      "cog_level": "Understand",
      "title": "IO in Erlang",
      "description": "IO in Erlang: IO in Erlang: Input/output operations in Erlang are handled through message passing between Erlang processes, allowing for asynchronous and concurrent IO operations.",
      "node_type": "knowledge point",
      "shape": "box",
      "color": {
        "background": "#ffd2af",
        "border": "#ffd2af"
      }
    },
    {
      "id": "88d3bba2-4ae4-4f36-937f-a9b6a79189bc",
      "label": "Data types",
      "cog_level": "Understand",
      "title": "Data types",
      "description": "Data types: Data types: Erlang supports a variety of data types including integers, floats, atoms, tuples, lists, binaries, and maps, as well as user-defined data structures.",
      "node_type": "knowledge point",
      "shape": "box",
      "color": {
        "background": "#ffd2af",
        "border": "#ffd2af"
      }
    },
    {
      "id": "aa1e8ef7-435e-46d7-831f-4c6b061e8514",
      "label": "Functions",
      "cog_level": "Understand",
      "title": "Functions",
      "description": "Functions: Functions: Functions in Erlang are first-class citizens, meaning they can be passed as arguments to other functions, returned from functions, and assigned to variables.",
      "node_type": "knowledge point",
      "shape": "box",
      "color": {
        "background": "#ffd2af",
        "border": "#ffd2af"
      }
    },
    {
      "id": "d687f0d6-7897-416d-add8-cadc2056d7e0",
      "label": "Regular expressions",
      "cog_level": "Understand",
      "title": "Regular expressions",
      "description": "Regular expressions: Regular expressions: Erlang provides support for regular expressions through the re module, allowing for pattern matching and manipulation of strings based on regular expressions.",
      "node_type": "knowledge point",
      "shape": "box",
      "color": {
        "background": "#ffd2af",
        "border": "#ffd2af"
      }
    },
    {
      "id": "2968b252-cf8e-47c8-ae36-efb86513013d",
      "label": "Error handling",
      "cog_level": "Understand",
      "title": "Error handling",
      "description": "Error handling: Error handling: Erlang has built-in mechanisms for error handling, including the use of exception handling with try...catch blocks and the error function for raising errors.",
      "node_type": "knowledge point",
      "shape": "box",
      "color": {
        "background": "#ffd2af",
        "border": "#ffd2af"
      }
    }
  ],
  "edges": [
    {
      "from": "8d914036-c40e-44f6-a277-36daf549fde6",
      "to": "7fedf2f0-999e-4ea5-b2e2-06f422a75ccd",
      "title": "",
      "id": "02680a82-f2f3-4816-a453-e3ae0e761876"
    },
    {
      "from": "7fedf2f0-999e-4ea5-b2e2-06f422a75ccd",
      "to": "2f2c1d55-8646-41bd-91aa-46d0e063ba40",
      "title": "",
      "id": "dcb73bcf-7df2-46d4-bf53-e030ffbd884f"
    },
    {
      "from": "7fedf2f0-999e-4ea5-b2e2-06f422a75ccd",
      "to": "0692fb49-c4aa-489a-a6f2-f5a60bbebbc1",
      "title": "",
      "id": "d6f2a981-1182-459b-b0c0-2ae8613e6fec"
    },
    {
      "from": "7fedf2f0-999e-4ea5-b2e2-06f422a75ccd",
      "to": "f8b0dc6f-561f-4380-8fc2-cb530273011a",
      "title": "",
      "id": "898bbed5-6af0-439a-acf7-ad13b148e883"
    },
    {
      "from": "8d914036-c40e-44f6-a277-36daf549fde6",
      "to": "5457abaf-fc5f-4230-acd6-e4911667a671",
      "title": "",
      "id": "031c6269-4ccc-4007-8d6d-921a845e2867"
    },
    {
      "from": "5457abaf-fc5f-4230-acd6-e4911667a671",
      "to": "bf411719-ae47-4f3e-b6c5-96f2bf52364b",
      "title": "",
      "id": "906e3842-e37a-4506-875b-771181e96618"
    },
    {
      "from": "5457abaf-fc5f-4230-acd6-e4911667a671",
      "to": "19527b81-de60-45bf-b8cd-e1a19fa96c6b",
      "title": "",
      "id": "96bc0034-e7a1-440d-bfbc-40571ce409b5"
    },
    {
      "from": "5457abaf-fc5f-4230-acd6-e4911667a671",
      "to": "be564ec7-1e43-491e-b69b-6d7c3875f4e0",
      "title": "",
      "id": "92a62a76-3b29-4eff-ba40-856200ee5b7a"
    },
    {
      "from": "5457abaf-fc5f-4230-acd6-e4911667a671",
      "to": "8926f748-3e07-4ee9-8f26-3a4347fa0e81",
      "title": "",
      "id": "06d1fe3f-1cd5-4a99-b4ff-7431bd5bec5d"
    },
    {
      "from": "5457abaf-fc5f-4230-acd6-e4911667a671",
      "to": "37530721-5e09-4d15-b558-4659ce2d8ab1",
      "title": "",
      "id": "f726e535-e67d-4a2f-93d1-b1add016c4f0"
    },
    {
      "from": "5457abaf-fc5f-4230-acd6-e4911667a671",
      "to": "c413d04d-3e9d-422e-8ec9-99252ab41ee6",
      "title": "",
      "id": "f0596188-6bcf-473b-8549-25e3879af7ff"
    },
    {
      "from": "5457abaf-fc5f-4230-acd6-e4911667a671",
      "to": "3b2e87d3-5da8-4648-9699-696d264a3941",
      "title": "",
      "id": "2f2ee619-c7f2-4adc-8d68-66f260a4ddb7"
    },
    {
      "from": "5457abaf-fc5f-4230-acd6-e4911667a671",
      "to": "236a4b9c-e10e-49ae-ab59-168a65a2087a",
      "title": "",
      "id": "2e69c3cf-930d-432e-b782-8cf07787af15"
    },
    {
      "from": "5457abaf-fc5f-4230-acd6-e4911667a671",
      "to": "7e63f487-96a5-4d95-890d-8526c70c4de1",
      "title": "",
      "id": "c4f6f858-338c-4a37-b0e0-23c2c3b5c36b"
    },
    {
      "from": "5457abaf-fc5f-4230-acd6-e4911667a671",
      "to": "158ac0eb-50cc-4d0a-bb92-9e969b7ca531",
      "title": "",
      "id": "fa4e0131-37e3-425a-be59-4d2aacb6e4f1"
    },
    {
      "from": "5457abaf-fc5f-4230-acd6-e4911667a671",
      "to": "38f50973-b252-48c1-8d1a-4c0b888f8f5b",
      "title": "",
      "id": "c0bc383d-b92d-46c4-b58c-118f7dcf70c7"
    },
    {
      "from": "5457abaf-fc5f-4230-acd6-e4911667a671",
      "to": "5bf06011-5f7c-4699-a43d-e6844f5f5a41",
      "title": "",
      "id": "86008495-97e6-4d0a-ba9f-b95e3e86700a"
    },
    {
      "from": "8d914036-c40e-44f6-a277-36daf549fde6",
      "to": "cacc43f3-c2c4-4e71-bc25-06baa721cbd3",
      "title": "",
      "id": "7b97af4e-e71c-4573-942e-458c07ce3097"
    },
    {
      "from": "cacc43f3-c2c4-4e71-bc25-06baa721cbd3",
      "to": "0c0cf18d-ff56-40aa-8508-19b5f893d411",
      "title": "",
      "id": "a57a0f38-beb3-4d86-8e0f-e095dd5154b3"
    },
    {
      "from": "cacc43f3-c2c4-4e71-bc25-06baa721cbd3",
      "to": "af0f9ecb-c08b-4a87-8702-f653c43a5339",
      "title": "",
      "id": "71c4d37a-499d-4fe6-b9a5-a474bfc9dd3b"
    },
    {
      "from": "cacc43f3-c2c4-4e71-bc25-06baa721cbd3",
      "to": "9ead9bce-f4ef-4b0b-a972-e035fa3e77cb",
      "title": "",
      "id": "688e7694-04ba-47d5-ae28-dcb5a2f65076"
    },
    {
      "from": "cacc43f3-c2c4-4e71-bc25-06baa721cbd3",
      "to": "ea90f7d7-1581-4ad0-a0d9-c7815927fe81",
      "title": "",
      "id": "7994e51a-ccf9-4533-b810-0d09e32795a2"
    },
    {
      "from": "cacc43f3-c2c4-4e71-bc25-06baa721cbd3",
      "to": "d9c7127b-f023-46c3-a53e-c72921813986",
      "title": "",
      "id": "bf6b09aa-548b-420d-b6d5-2c1629a57b71"
    },
    {
      "from": "cacc43f3-c2c4-4e71-bc25-06baa721cbd3",
      "to": "55a0c733-0380-4bf5-868a-112a273c8743",
      "title": "",
      "id": "369f77b1-34d4-4bd3-9312-4460d653cd5c"
    },
    {
      "from": "cacc43f3-c2c4-4e71-bc25-06baa721cbd3",
      "to": "a638aecf-6d86-49fb-b8da-4a468f3258c1",
      "title": "",
      "id": "4cfe34b4-50d3-43ae-a499-8e79452ff872"
    },
    {
      "from": "cacc43f3-c2c4-4e71-bc25-06baa721cbd3",
      "to": "5cb5dc11-a993-4ade-bedd-aaaf19e61f58",
      "title": "",
      "id": "1334575f-1d17-4144-bd1a-feef68a17be5"
    },
    {
      "from": "f03a6ae0-a73c-4733-9064-6c6cb95652ba",
      "to": "2030a2ce-5bdf-4e71-b461-eac73e6116b5",
      "title": "",
      "id": "1680c106-63bb-4520-b62a-3aa54d98f5ac"
    },
    {
      "from": "f03a6ae0-a73c-4733-9064-6c6cb95652ba",
      "to": "d2094ee8-c59d-4a02-8551-12d9b31a0749",
      "title": "",
      "id": "bf0e6c05-53b9-451f-88b6-305f701e141c"
    },
    {
      "from": "f03a6ae0-a73c-4733-9064-6c6cb95652ba",
      "to": "c8e6598a-d5af-41b4-8b60-b53e706a14a7",
      "title": "",
      "id": "9844c935-718d-4041-9a30-c7169fd1feb1"
    },
    {
      "from": "8d914036-c40e-44f6-a277-36daf549fde6",
      "to": "16c2612d-6ffb-49a4-9eff-adf4d6ec1995",
      "title": "",
      "id": "41b1dcf0-c851-4bc6-b28d-50af5ac700d8"
    },
    {
      "from": "16c2612d-6ffb-49a4-9eff-adf4d6ec1995",
      "to": "5571f54c-cd89-4109-bb59-d77427b977f4",
      "title": "",
      "id": "6c0389c2-a1a2-4b8d-a720-ccc29e6c1efb"
    },
    {
      "from": "16c2612d-6ffb-49a4-9eff-adf4d6ec1995",
      "to": "f792b28e-b135-4c39-b5f7-55eab0bb34e7",
      "title": "",
      "id": "625aac31-0c66-45f3-bc38-7df0166b94e0"
    },
    {
      "from": "16c2612d-6ffb-49a4-9eff-adf4d6ec1995",
      "to": "4d10c9dc-e148-4b00-bbfc-9420bf629d67",
      "title": "",
      "id": "8f7226db-59d5-4880-8a04-ba69b0bd05f5"
    },
    {
      "from": "16c2612d-6ffb-49a4-9eff-adf4d6ec1995",
      "to": "f7cd3609-dbd7-45e5-a551-e4958f143cd0",
      "title": "",
      "id": "5a905bb3-28c6-43b2-9a20-5f0aa9393dd8"
    },
    {
      "from": "16c2612d-6ffb-49a4-9eff-adf4d6ec1995",
      "to": "df7d4572-c1ab-498f-a8b8-1c02ab2c1e87",
      "title": "",
      "id": "f5768945-1caf-42fd-8b94-93c9437ecf36"
    },
    {
      "from": "16c2612d-6ffb-49a4-9eff-adf4d6ec1995",
      "to": "dc0462ce-03b9-4913-9a02-1950627ede3d",
      "title": "",
      "id": "2e23498e-ae85-471d-98be-fbcf5ca8b916"
    },
    {
      "from": "16c2612d-6ffb-49a4-9eff-adf4d6ec1995",
      "to": "fb6a5fe6-d9ab-47b9-9c63-3f4ccd059c98",
      "title": "",
      "id": "bf2c6c18-86eb-4bf8-b227-cd0a4fcc4c18"
    },
    {
      "from": "16c2612d-6ffb-49a4-9eff-adf4d6ec1995",
      "to": "6710e4bc-7ce0-433b-ac5a-f29dcc7baa1c",
      "title": "",
      "id": "b2e4555c-b0c4-4913-b2b0-e94049ee05ce"
    },
    {
      "from": "16c2612d-6ffb-49a4-9eff-adf4d6ec1995",
      "to": "d0e2fcab-8933-4024-a5ed-93c10148a0cd",
      "title": "",
      "id": "71d61cca-2336-4343-9f2b-8c894ab31ea5"
    },
    {
      "from": "16c2612d-6ffb-49a4-9eff-adf4d6ec1995",
      "to": "9ab79432-2009-4712-9e73-8676e964af3f",
      "title": "",
      "id": "8d67e32c-4b8c-4878-930c-d9140da5a77e"
    },
    {
      "from": "8d914036-c40e-44f6-a277-36daf549fde6",
      "to": "e255cf6e-08ba-4a08-9b88-f827b44c2e08",
      "title": "",
      "id": "883e1036-ecce-47d4-a6cd-10e39e32f2a3"
    },
    {
      "from": "e255cf6e-08ba-4a08-9b88-f827b44c2e08",
      "to": "7a9f7bfd-8288-4855-b2ce-c49554bc2750",
      "title": "",
      "id": "b1190cb1-78f8-4595-9e86-7449f2b5d459"
    },
    {
      "from": "e255cf6e-08ba-4a08-9b88-f827b44c2e08",
      "to": "a951f009-17af-454e-8f52-517e9c7e2fe9",
      "title": "",
      "id": "5a1d95dd-8edd-4cfe-a51f-a482f910b800"
    },
    {
      "from": "a951f009-17af-454e-8f52-517e9c7e2fe9",
      "to": "f8631d76-308d-41d4-ae3b-ca280870140d",
      "title": "",
      "id": "a24676bb-334e-4835-abaa-06bf85845c93"
    },
    {
      "from": "a951f009-17af-454e-8f52-517e9c7e2fe9",
      "to": "66796aae-5a6b-44d9-8c4a-c82a23b129ee",
      "title": "",
      "id": "327c9e83-469b-4dc2-b509-464c75694e8c"
    },
    {
      "from": "e255cf6e-08ba-4a08-9b88-f827b44c2e08",
      "to": "27b68858-990c-4ce0-aa09-c1bc928c8f7b",
      "title": "",
      "id": "7326b6b8-a847-4ac1-9612-523978651d2b"
    },
    {
      "from": "8d914036-c40e-44f6-a277-36daf549fde6",
      "to": "cecc932c-c89b-4a15-a9bc-66624dce8fbc",
      "title": "",
      "id": "1eb9389b-fc3f-4b24-a612-b36d62987426"
    },
    {
      "from": "cecc932c-c89b-4a15-a9bc-66624dce8fbc",
      "to": "001dfde6-a451-415e-8271-bc33a10b475b",
      "title": "",
      "id": "75765c2c-270c-4a2f-a263-ee3add072114"
    },
    {
      "from": "cecc932c-c89b-4a15-a9bc-66624dce8fbc",
      "to": "ee3cbc8e-62cb-467a-87e5-0416f670c7d8",
      "title": "",
      "id": "73a6a912-3ca0-4f93-a04b-da4e5d791fde"
    },
    {
      "from": "cecc932c-c89b-4a15-a9bc-66624dce8fbc",
      "to": "52354c5c-2399-41ea-935e-c2010aacc888",
      "title": "",
      "id": "110a1a4d-0cff-46a3-9eb4-59bb9c39dbef"
    },
    {
      "from": "cecc932c-c89b-4a15-a9bc-66624dce8fbc",
      "to": "52757610-311d-45ba-be11-f39fc13c6ca3",
      "title": "",
      "id": "d54e5c37-cc8b-42dd-9b9b-92a1dbff1d92"
    },
    {
      "from": "cecc932c-c89b-4a15-a9bc-66624dce8fbc",
      "to": "88d3bba2-4ae4-4f36-937f-a9b6a79189bc",
      "title": "",
      "id": "7ab4290e-61aa-4fab-9bc6-220404a8c3a5"
    },
    {
      "from": "cecc932c-c89b-4a15-a9bc-66624dce8fbc",
      "to": "aa1e8ef7-435e-46d7-831f-4c6b061e8514",
      "title": "",
      "id": "c312745e-e618-47a4-a3ac-e1156cf59e9b"
    },
    {
      "from": "cecc932c-c89b-4a15-a9bc-66624dce8fbc",
      "to": "d687f0d6-7897-416d-add8-cadc2056d7e0",
      "title": "",
      "id": "051185a6-18a6-429e-b230-249281ec4450"
    },
    {
      "from": "cecc932c-c89b-4a15-a9bc-66624dce8fbc",
      "to": "2968b252-cf8e-47c8-ae36-efb86513013d",
      "title": "",
      "id": "9a2dae80-4a60-4c33-a3f3-37c1671f93fd"
    }
  ]
}