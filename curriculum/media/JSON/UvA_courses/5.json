{
  "nodes": [
    {
      "id": "04927e48-b396-461b-9598-ebc6372ce76a",
      "label": "Data Structures",
      "cog_level": "Understand",
      "title": "Data Structures",
      "description": "Data Structures: ",
      "node_type": "course",
      "shape": "circle",
      "color": {
        "background": "#ffd2af",
        "border": "#ffd2af"
      }
    },
    {
      "id": "50bbfc7b-31f8-4032-b191-bea56efe105e",
      "label": "Data Structures Introduction",
      "cog_level": "Understand",
      "title": "Data Structures Introduction",
      "description": "Data Structures Introduction: Data Structures Introduction: Fundamentals of organizing and storing data efficiently.",
      "node_type": "knowledge unit",
      "shape": "ellipse",
      "color": {
        "background": "#ffd2af",
        "border": "#ffd2af"
      }
    },
    {
      "id": "0bb0ced0-8443-42b3-9baf-a255e67beb12",
      "label": "ADT: STACK",
      "cog_level": "Understand",
      "title": "ADT: STACK",
      "description": "ADT: STACK: ADT: STACK: Abstract Data Type representing a collection of elements with Last In, First Out (LIFO) access.",
      "node_type": "knowledge point",
      "shape": "box",
      "color": {
        "background": "#ffd2af",
        "border": "#ffd2af"
      }
    },
    {
      "id": "38b3e838-f8f5-4614-8599-6e083a6bc5a8",
      "label": "ADT: QUEUE",
      "cog_level": "Understand",
      "title": "ADT: QUEUE",
      "description": "ADT: QUEUE: ADT: QUEUE: Abstract Data Type representing a collection of elements with First In, First Out (FIFO) access.",
      "node_type": "knowledge point",
      "shape": "box",
      "color": {
        "background": "#ffd2af",
        "border": "#ffd2af"
      }
    },
    {
      "id": "0dda492c-2cfa-4790-ae98-6e94d694f669",
      "label": "DS: ARRAY",
      "cog_level": "Understand",
      "title": "DS: ARRAY",
      "description": "DS: ARRAY: DS: ARRAY: Data Structure storing elements in contiguous memory locations with constant-time access to elements using indices.",
      "node_type": "knowledge point",
      "shape": "box",
      "color": {
        "background": "#ffd2af",
        "border": "#ffd2af"
      }
    },
    {
      "id": "c91dd239-d24b-4da6-bbcf-1cfafad3a112",
      "label": "Searching And Lists",
      "cog_level": "Understand",
      "title": "Searching And Lists",
      "description": "Searching And Lists: Searching And Lists: Techniques for searching data efficiently and organizing data in lists.",
      "node_type": "knowledge unit",
      "shape": "ellipse",
      "color": {
        "background": "#ffd2af",
        "border": "#ffd2af"
      }
    },
    {
      "id": "b3bb1a62-7ecd-4164-bdf5-be1ae4199be4",
      "label": "ALG: Search algorithms",
      "cog_level": "Understand",
      "title": "ALG: Search algorithms",
      "description": "ALG: Search algorithms: ALG: Search algorithms: Various algorithms for searching data including linear search, binary search, and more.",
      "node_type": "knowledge point",
      "shape": "box",
      "color": {
        "background": "#ffd2af",
        "border": "#ffd2af"
      }
    },
    {
      "id": "ddfb8247-69d6-4558-8655-4c033029a10a",
      "label": "DS: Dynamic array",
      "cog_level": "Understand",
      "title": "DS: Dynamic array",
      "description": "DS: Dynamic array: DS: Dynamic array: Data Structure similar to an array but with the ability to resize dynamically as needed.",
      "node_type": "knowledge point",
      "shape": "box",
      "color": {
        "background": "#ffd2af",
        "border": "#ffd2af"
      }
    },
    {
      "id": "a7710a0d-ed4e-4d9d-b47f-e61c3420d05b",
      "label": "Searching And Lists",
      "cog_level": "Understand",
      "title": "Searching And Lists",
      "description": "Searching And Lists: DS: Linked list: Data Structure where elements are stored in nodes, each containing a reference to the next node in the sequence.",
      "node_type": "knowledge point",
      "shape": "box",
      "color": {
        "background": "#ffd2af",
        "border": "#ffd2af"
      }
    },
    {
      "id": "14faa07a-8592-40f0-b953-8c472e0f2220",
      "label": "Measuring performance",
      "cog_level": "Understand",
      "title": "Measuring performance",
      "description": "Measuring performance: Measuring performance: Methods for evaluating the efficiency and effectiveness of algorithms and data structures.",
      "node_type": "knowledge point",
      "shape": "box",
      "color": {
        "background": "#ffd2af",
        "border": "#ffd2af"
      }
    },
    {
      "id": "08400146-5abb-49a5-b6ac-031a900c1e06",
      "label": "Analysing Performance",
      "cog_level": "Understand",
      "title": "Analysing Performance",
      "description": "Analysing Performance: Analysing Performance: Techniques for analyzing the performance of algorithms and data structures under various conditions.",
      "node_type": "knowledge unit",
      "shape": "ellipse",
      "color": {
        "background": "#ffd2af",
        "border": "#ffd2af"
      }
    },
    {
      "id": "7d503969-205c-400d-ad50-c42f1a8908c3",
      "label": "Simplifying With Bounds",
      "cog_level": "Understand",
      "title": "Simplifying With Bounds",
      "description": "Simplifying With Bounds: Simplifying With Bounds: Using upper and lower bounds to simplify the analysis of algorithms and data structures.",
      "node_type": "knowledge point",
      "shape": "box",
      "color": {
        "background": "#ffd2af",
        "border": "#ffd2af"
      }
    },
    {
      "id": "2de07e7b-9bcd-4291-bad3-cf0f81e64f1f",
      "label": "Sets And Maps",
      "cog_level": "Understand",
      "title": "Sets And Maps",
      "description": "Sets And Maps: Sets And Maps: Fundamental data structures for storing unique elements (sets) and key-value pairs (maps).",
      "node_type": "knowledge point",
      "shape": "box",
      "color": {
        "background": "#ffd2af",
        "border": "#ffd2af"
      }
    },
    {
      "id": "b71e2931-6766-4fdf-8415-bb8260c6f400",
      "label": "A Naive Set Implementation",
      "cog_level": "Understand",
      "title": "A Naive Set Implementation",
      "description": "A Naive Set Implementation: A Naive Set Implementation: Basic implementation of a set data structure without optimization or sophisticated features.",
      "node_type": "knowledge point",
      "shape": "box",
      "color": {
        "background": "#ffd2af",
        "border": "#ffd2af"
      }
    },
    {
      "id": "a2081d59-325f-4981-b244-f775177ff116",
      "label": "Efficient Sets",
      "cog_level": "Understand",
      "title": "Efficient Sets",
      "description": "Efficient Sets: Efficient Sets: Data structures optimized for efficient storage and retrieval of unique elements.",
      "node_type": "knowledge unit",
      "shape": "ellipse",
      "color": {
        "background": "#ffd2af",
        "border": "#ffd2af"
      }
    },
    {
      "id": "70cde5e4-3b24-4bbf-bdef-b7ff44a72637",
      "label": "ALG: BINARY SEARCH",
      "cog_level": "Understand",
      "title": "ALG: BINARY SEARCH",
      "description": "ALG: BINARY SEARCH: ALG: BINARY SEARCH: Algorithm for searching sorted data by repeatedly dividing the search interval in half.",
      "node_type": "knowledge point",
      "shape": "box",
      "color": {
        "background": "#ffd2af",
        "border": "#ffd2af"
      }
    },
    {
      "id": "6f49267e-2e45-4f55-a5c2-db8a42fe02bb",
      "label": "Better Sets And Maps With Hash Tables",
      "cog_level": "Understand",
      "title": "Better Sets And Maps With Hash Tables",
      "description": "Better Sets And Maps With Hash Tables: Better Sets And Maps With Hash Tables: Data structures utilizing hash tables to achieve efficient insertion, deletion, and retrieval operations for sets and maps.",
      "node_type": "knowledge point",
      "shape": "box",
      "color": {
        "background": "#ffd2af",
        "border": "#ffd2af"
      }
    },
    {
      "id": "dc797bf3-2f6f-4834-84f6-55c8411bd1ab",
      "label": "Algorithmic Bounds and Tree",
      "cog_level": "Understand",
      "title": "Algorithmic Bounds and Tree",
      "description": "Algorithmic Bounds and Tree: ",
      "node_type": "knowledge unit",
      "shape": "ellipse",
      "color": {
        "background": "#ffd2af",
        "border": "#ffd2af"
      }
    },
    {
      "id": "fd762462-da5b-4913-8458-5733df0c5051",
      "label": "Algorithmic Bounds",
      "cog_level": "Understand",
      "title": "Algorithmic Bounds",
      "description": "Algorithmic Bounds: ",
      "node_type": "knowledge point",
      "shape": "box",
      "color": {
        "background": "#ffd2af",
        "border": "#ffd2af"
      }
    },
    {
      "id": "a44461b2-66ed-4243-9795-a0e0e6669e8b",
      "label": "Upper Bound: Big O",
      "cog_level": "Understand",
      "title": "Upper Bound: Big O",
      "description": "Upper Bound: Big O: Upper Bound: Big O: Represents the worst-case time complexity of an algorithm.",
      "node_type": "knowledge point",
      "shape": "box",
      "color": {
        "background": "#ffd2af",
        "border": "#ffd2af"
      }
    },
    {
      "id": "f60c3d4f-80d2-411e-b1e3-c8c17123767d",
      "label": "Lower Bound: Omega",
      "cog_level": "Understand",
      "title": "Lower Bound: Omega",
      "description": "Lower Bound: Omega: Lower Bound: Omega: Represents the best-case time complexity of an algorithm.",
      "node_type": "knowledge point",
      "shape": "box",
      "color": {
        "background": "#ffd2af",
        "border": "#ffd2af"
      }
    },
    {
      "id": "4f670378-f307-4d82-86b6-4884f345f806",
      "label": "Sharp Bounds: Theta",
      "cog_level": "Understand",
      "title": "Sharp Bounds: Theta",
      "description": "Sharp Bounds: Theta: Sharp Bounds: Theta: Represents both upper and lower bounds, indicating tight asymptotic behavior.",
      "node_type": "knowledge point",
      "shape": "box",
      "color": {
        "background": "#ffd2af",
        "border": "#ffd2af"
      }
    },
    {
      "id": "044503c1-6642-4141-978e-4271f3db11d1",
      "label": "Data Structure: Tree",
      "cog_level": "Understand",
      "title": "Data Structure: Tree",
      "description": "Data Structure: Tree: ",
      "node_type": "knowledge point",
      "shape": "box",
      "color": {
        "background": "#ffd2af",
        "border": "#ffd2af"
      }
    },
    {
      "id": "10be23a6-c3a8-4f77-aeb6-5601a6acefe6",
      "label": "tree",
      "cog_level": "Understand",
      "title": "tree",
      "description": "tree: Tree: A hierarchical data structure consisting of nodes connected by edges, typically with one designated as the root.",
      "node_type": "knowledge point",
      "shape": "box",
      "color": {
        "background": "#ffd2af",
        "border": "#ffd2af"
      }
    },
    {
      "id": "6c67f2d0-6688-4417-900c-02050865c4ab",
      "label": "Trie",
      "cog_level": "Understand",
      "title": "Trie",
      "description": "Trie: Trie: A tree data structure used for efficient retrieval of strings, particularly in dictionary implementations.",
      "node_type": "knowledge point",
      "shape": "box",
      "color": {
        "background": "#ffd2af",
        "border": "#ffd2af"
      }
    },
    {
      "id": "6f2d88b1-183c-4cfb-87d4-5c13788d7c45",
      "label": "Suffix tree",
      "cog_level": "Understand",
      "title": "Suffix tree",
      "description": "Suffix tree: Suffix Tree: A tree data structure used for pattern matching in strings, particularly for finding all occurrences of a substring in a larger string.",
      "node_type": "knowledge point",
      "shape": "box",
      "color": {
        "background": "#ffd2af",
        "border": "#ffd2af"
      }
    },
    {
      "id": "ea449f5d-ba58-476f-a0cd-84a5f47ed40d",
      "label": "Data Structure: Binary Tree",
      "cog_level": "Understand",
      "title": "Data Structure: Binary Tree",
      "description": "Data Structure: Binary Tree: ",
      "node_type": "knowledge unit",
      "shape": "ellipse",
      "color": {
        "background": "#ffd2af",
        "border": "#ffd2af"
      }
    },
    {
      "id": "738b6b04-5673-4249-9675-6fe1bf901045",
      "label": "Binary Tree",
      "cog_level": "Understand",
      "title": "Binary Tree",
      "description": "Binary Tree: Binary Tree: A tree data structure in which each node has at most two children, commonly referred to as the left child and the right child.",
      "node_type": "knowledge point",
      "shape": "box",
      "color": {
        "background": "#ffd2af",
        "border": "#ffd2af"
      }
    },
    {
      "id": "56f0ae35-8876-4199-ac61-8a6438140335",
      "label": "ADT: Priority Queue",
      "cog_level": "Understand",
      "title": "ADT: Priority Queue",
      "description": "ADT: Priority Queue: A data structure that supports efficient retrieval of the highest (or lowest) priority element.",
      "node_type": "knowledge point",
      "shape": "box",
      "color": {
        "background": "#ffd2af",
        "border": "#ffd2af"
      }
    },
    {
      "id": "46f4f692-a0b0-442c-a262-1faa5d061ea2",
      "label": "DS: Binary Heap",
      "cog_level": "Understand",
      "title": "DS: Binary Heap",
      "description": "DS: Binary Heap: A complete binary tree with a special property where the value of each node is greater than or equal to (or less than or equal to) the values of its children.",
      "node_type": "knowledge point",
      "shape": "box",
      "color": {
        "background": "#ffd2af",
        "border": "#ffd2af"
      }
    },
    {
      "id": "17299b0d-d1fb-4fd6-8d7a-37fe0de58c2f",
      "label": "Algorithm: Heapsort",
      "cog_level": "Understand",
      "title": "Algorithm: Heapsort",
      "description": "Algorithm: Heapsort: A comparison-based sorting algorithm that uses a binary heap data structure to sort elements in-place.",
      "node_type": "knowledge point",
      "shape": "box",
      "color": {
        "background": "#ffd2af",
        "border": "#ffd2af"
      }
    },
    {
      "id": "256391ad-ea28-4990-8352-4a208f10d05b",
      "label": "DS: Binary Search Tree",
      "cog_level": "Understand",
      "title": "DS: Binary Search Tree",
      "description": "DS: Binary Search Tree: A binary tree data structure in which each node has a key greater than all keys in its left subtree and less than all keys in its right subtree.",
      "node_type": "knowledge unit",
      "shape": "ellipse",
      "color": {
        "background": "#ffd2af",
        "border": "#ffd2af"
      }
    },
    {
      "id": "52c547a3-f21d-4503-8be1-152979939b24",
      "label": "Balancing A Bst",
      "cog_level": "Understand",
      "title": "Balancing A Bst",
      "description": "Balancing A Bst: Process of ensuring that the height of a binary search tree remains balanced to maintain efficient search, insertion, and deletion operations.",
      "node_type": "knowledge unit",
      "shape": "ellipse",
      "color": {
        "background": "#ffd2af",
        "border": "#ffd2af"
      }
    },
    {
      "id": "5f9fcb41-d63e-4fb0-9a9a-7fcb4054b1a5",
      "label": "Rebalancing A Bst",
      "cog_level": "Understand",
      "title": "Rebalancing A Bst",
      "description": "Rebalancing A Bst: The process of restoring balance in a binary search tree after an insertion or deletion operation that may have caused it to become unbalanced.",
      "node_type": "knowledge point",
      "shape": "box",
      "color": {
        "background": "#ffd2af",
        "border": "#ffd2af"
      }
    },
    {
      "id": "c4147eba-0521-4c73-b6f3-8c07fb1b1ca6",
      "label": "Limitations",
      "cog_level": "Understand",
      "title": "Limitations",
      "description": "Limitations: Constraints or drawbacks associated with binary search trees, such as the potential for degeneration into a linear data structure.",
      "node_type": "knowledge point",
      "shape": "box",
      "color": {
        "background": "#ffd2af",
        "border": "#ffd2af"
      }
    },
    {
      "id": "eb62d419-ab58-464e-94d9-6499d80de77d",
      "label": "Self-Balancing Trees: AVL Trees",
      "cog_level": "Understand",
      "title": "Self-Balancing Trees: AVL Trees",
      "description": "Self-Balancing Trees: AVL Trees: A type of binary search tree that automatically maintains balance by performing rotations after insertions and deletions to ensure a maximum height difference of 1 between subtrees.",
      "node_type": "knowledge point",
      "shape": "box",
      "color": {
        "background": "#ffd2af",
        "border": "#ffd2af"
      }
    },
    {
      "id": "745ae121-d64c-45d4-ad53-ec3f547c1d9e",
      "label": "Amortized Analysis",
      "cog_level": "Understand",
      "title": "Amortized Analysis",
      "description": "Amortized Analysis: A method of analyzing the time complexity of algorithms over a sequence of operations, considering both expensive and inexpensive operations to provide an average performance guarantee.",
      "node_type": "knowledge unit",
      "shape": "ellipse",
      "color": {
        "background": "#ffd2af",
        "border": "#ffd2af"
      }
    },
    {
      "id": "43bf0179-ad72-4d4d-ab58-7a46b5a03220",
      "label": "Graph",
      "cog_level": "Understand",
      "title": "Graph",
      "description": "Graph: A data structure composed of a set of vertices and a set of edges connecting pairs of vertices.",
      "node_type": "knowledge unit",
      "shape": "ellipse",
      "color": {
        "background": "#ffd2af",
        "border": "#ffd2af"
      }
    },
    {
      "id": "266db0a9-dec6-46cb-872f-f3c91644d3d5",
      "label": "Graph Representations",
      "cog_level": "Understand",
      "title": "Graph Representations",
      "description": "Graph Representations: Various ways to represent graphs, such as adjacency matrix, adjacency list, and edge list.",
      "node_type": "knowledge point",
      "shape": "box",
      "color": {
        "background": "#ffd2af",
        "border": "#ffd2af"
      }
    },
    {
      "id": "05b81534-54c4-429f-ae2d-80e9fb7ed6ea",
      "label": "Graph Search",
      "cog_level": "Understand",
      "title": "Graph Search",
      "description": "Graph Search: Algorithms for traversing or searching a graph to visit all vertices or find specific paths or patterns within the graph.",
      "node_type": "knowledge point",
      "shape": "box",
      "color": {
        "background": "#ffd2af",
        "border": "#ffd2af"
      }
    },
    {
      "id": "ca8ad08a-92f5-4b93-a05b-f7cef65afcc5",
      "label": "Disjoint Set And Minimum Spanning Tree",
      "cog_level": "Understand",
      "title": "Disjoint Set And Minimum Spanning Tree",
      "description": "Disjoint Set And Minimum Spanning Tree: Techniques and algorithms related to disjoint set data structures and the construction of minimum spanning trees in graphs.",
      "node_type": "knowledge point",
      "shape": "box",
      "color": {
        "background": "#ffd2af",
        "border": "#ffd2af"
      }
    }
  ],
  "edges": [
    {
      "from": "04927e48-b396-461b-9598-ebc6372ce76a",
      "to": "50bbfc7b-31f8-4032-b191-bea56efe105e",
      "title": "",
      "id": "ca724dda-1dab-4a0e-903c-dde9b0a49804"
    },
    {
      "from": "50bbfc7b-31f8-4032-b191-bea56efe105e",
      "to": "0bb0ced0-8443-42b3-9baf-a255e67beb12",
      "title": "",
      "id": "0a17b7aa-dd8e-43f1-9b0c-f9fd9b40fa8f"
    },
    {
      "from": "50bbfc7b-31f8-4032-b191-bea56efe105e",
      "to": "38b3e838-f8f5-4614-8599-6e083a6bc5a8",
      "title": "",
      "id": "3f4090e2-241b-4384-a8b5-533d31b8ab24"
    },
    {
      "from": "50bbfc7b-31f8-4032-b191-bea56efe105e",
      "to": "0dda492c-2cfa-4790-ae98-6e94d694f669",
      "title": "",
      "id": "82edf8b2-8b3e-4091-9257-c4283144ec5f"
    },
    {
      "from": "04927e48-b396-461b-9598-ebc6372ce76a",
      "to": "c91dd239-d24b-4da6-bbcf-1cfafad3a112",
      "title": "",
      "id": "b80c6c9a-b3ae-4686-bf48-b4bef04f7308"
    },
    {
      "from": "c91dd239-d24b-4da6-bbcf-1cfafad3a112",
      "to": "b3bb1a62-7ecd-4164-bdf5-be1ae4199be4",
      "title": "",
      "id": "4f016d89-66eb-4c8b-8bc1-e366bed7c3f4"
    },
    {
      "from": "c91dd239-d24b-4da6-bbcf-1cfafad3a112",
      "to": "ddfb8247-69d6-4558-8655-4c033029a10a",
      "title": "",
      "id": "e2c72d7e-7f29-4b59-bd19-937226fcefcb"
    },
    {
      "from": "c91dd239-d24b-4da6-bbcf-1cfafad3a112",
      "to": "a7710a0d-ed4e-4d9d-b47f-e61c3420d05b",
      "title": "",
      "id": "122a6f8d-82d1-4da9-85ce-cf6c40bf7e47"
    },
    {
      "from": "c91dd239-d24b-4da6-bbcf-1cfafad3a112",
      "to": "14faa07a-8592-40f0-b953-8c472e0f2220",
      "title": "",
      "id": "688fa5ac-bf0f-46b6-9a3c-9597de1cccce"
    },
    {
      "from": "04927e48-b396-461b-9598-ebc6372ce76a",
      "to": "08400146-5abb-49a5-b6ac-031a900c1e06",
      "title": "",
      "id": "d2ccc029-b66c-40fa-b100-ffd9f70dfc71"
    },
    {
      "from": "08400146-5abb-49a5-b6ac-031a900c1e06",
      "to": "7d503969-205c-400d-ad50-c42f1a8908c3",
      "title": "",
      "id": "ce0ea774-0702-458a-b86a-cca62a46575d"
    },
    {
      "from": "08400146-5abb-49a5-b6ac-031a900c1e06",
      "to": "2de07e7b-9bcd-4291-bad3-cf0f81e64f1f",
      "title": "",
      "id": "d3298dec-266e-49ec-af94-14d7a3ef06aa"
    },
    {
      "from": "08400146-5abb-49a5-b6ac-031a900c1e06",
      "to": "b71e2931-6766-4fdf-8415-bb8260c6f400",
      "title": "",
      "id": "f8967753-f32b-4ab6-9400-08fb67f8925c"
    },
    {
      "from": "04927e48-b396-461b-9598-ebc6372ce76a",
      "to": "a2081d59-325f-4981-b244-f775177ff116",
      "title": "",
      "id": "1c7ae61a-dc91-4c24-8af4-8dabf127adca"
    },
    {
      "from": "a2081d59-325f-4981-b244-f775177ff116",
      "to": "70cde5e4-3b24-4bbf-bdef-b7ff44a72637",
      "title": "",
      "id": "ffdcef12-3ee8-4e31-8a6c-d203ad5996f3"
    },
    {
      "from": "a2081d59-325f-4981-b244-f775177ff116",
      "to": "6f49267e-2e45-4f55-a5c2-db8a42fe02bb",
      "title": "",
      "id": "b66ada1b-2bd9-4122-8e62-6be0a5d569b3"
    },
    {
      "from": "04927e48-b396-461b-9598-ebc6372ce76a",
      "to": "dc797bf3-2f6f-4834-84f6-55c8411bd1ab",
      "title": "",
      "id": "1ce57123-1eb6-4c5f-a93f-a2d9fcafedb2"
    },
    {
      "from": "dc797bf3-2f6f-4834-84f6-55c8411bd1ab",
      "to": "fd762462-da5b-4913-8458-5733df0c5051",
      "title": "",
      "id": "826002eb-34eb-491f-8dad-389f8b42c13a"
    },
    {
      "from": "fd762462-da5b-4913-8458-5733df0c5051",
      "to": "a44461b2-66ed-4243-9795-a0e0e6669e8b",
      "title": "",
      "id": "dddfde23-97bd-4056-8e4a-2db2fe9fef7d"
    },
    {
      "from": "fd762462-da5b-4913-8458-5733df0c5051",
      "to": "f60c3d4f-80d2-411e-b1e3-c8c17123767d",
      "title": "",
      "id": "053f89a5-83a2-4d52-acfb-538bf94e5f1c"
    },
    {
      "from": "fd762462-da5b-4913-8458-5733df0c5051",
      "to": "4f670378-f307-4d82-86b6-4884f345f806",
      "title": "",
      "id": "be1b0864-dfc4-4e1c-a4ab-bd7769bb5cdd"
    },
    {
      "from": "dc797bf3-2f6f-4834-84f6-55c8411bd1ab",
      "to": "044503c1-6642-4141-978e-4271f3db11d1",
      "title": "",
      "id": "bd6bd125-e5e7-4485-ab32-f5a7436a22be"
    },
    {
      "from": "044503c1-6642-4141-978e-4271f3db11d1",
      "to": "10be23a6-c3a8-4f77-aeb6-5601a6acefe6",
      "title": "",
      "id": "9d46ff41-1643-4b96-a323-6dc7e9e0b99f"
    },
    {
      "from": "044503c1-6642-4141-978e-4271f3db11d1",
      "to": "6c67f2d0-6688-4417-900c-02050865c4ab",
      "title": "",
      "id": "910fc088-8c3e-4116-9b50-1bceb8fb2dda"
    },
    {
      "from": "044503c1-6642-4141-978e-4271f3db11d1",
      "to": "6f2d88b1-183c-4cfb-87d4-5c13788d7c45",
      "title": "",
      "id": "a70642b7-6a23-46b1-82a1-876090183662"
    },
    {
      "from": "04927e48-b396-461b-9598-ebc6372ce76a",
      "to": "ea449f5d-ba58-476f-a0cd-84a5f47ed40d",
      "title": "",
      "id": "23917320-71ba-42d5-b188-aaec18d7b5dd"
    },
    {
      "from": "ea449f5d-ba58-476f-a0cd-84a5f47ed40d",
      "to": "738b6b04-5673-4249-9675-6fe1bf901045",
      "title": "",
      "id": "6043da88-61c2-4324-b524-2b8e8a0fa516"
    },
    {
      "from": "ea449f5d-ba58-476f-a0cd-84a5f47ed40d",
      "to": "56f0ae35-8876-4199-ac61-8a6438140335",
      "title": "",
      "id": "3a76a862-37b6-45f2-9bbe-dd29e9a54cd6"
    },
    {
      "from": "ea449f5d-ba58-476f-a0cd-84a5f47ed40d",
      "to": "46f4f692-a0b0-442c-a262-1faa5d061ea2",
      "title": "",
      "id": "1131fda6-6e39-401c-af7f-458b5ee2edf9"
    },
    {
      "from": "ea449f5d-ba58-476f-a0cd-84a5f47ed40d",
      "to": "17299b0d-d1fb-4fd6-8d7a-37fe0de58c2f",
      "title": "",
      "id": "9e775342-4398-418d-b980-e4159b33d7bc"
    },
    {
      "from": "04927e48-b396-461b-9598-ebc6372ce76a",
      "to": "256391ad-ea28-4990-8352-4a208f10d05b",
      "title": "",
      "id": "d7393ace-9db6-4649-8f2d-d1156e032bcc"
    },
    {
      "from": "04927e48-b396-461b-9598-ebc6372ce76a",
      "to": "52c547a3-f21d-4503-8be1-152979939b24",
      "title": "",
      "id": "762c2c71-0545-48fc-9b5c-2a8e789a2f70"
    },
    {
      "from": "52c547a3-f21d-4503-8be1-152979939b24",
      "to": "5f9fcb41-d63e-4fb0-9a9a-7fcb4054b1a5",
      "title": "",
      "id": "8dd7e97c-adb2-4dee-b04e-5324c6b749e5"
    },
    {
      "from": "52c547a3-f21d-4503-8be1-152979939b24",
      "to": "c4147eba-0521-4c73-b6f3-8c07fb1b1ca6",
      "title": "",
      "id": "cd4d34f1-96dc-42d7-abc0-f9a9bb5660ce"
    },
    {
      "from": "52c547a3-f21d-4503-8be1-152979939b24",
      "to": "eb62d419-ab58-464e-94d9-6499d80de77d",
      "title": "",
      "id": "1604755c-de1f-4ba0-82e2-48219ab882df"
    },
    {
      "from": "04927e48-b396-461b-9598-ebc6372ce76a",
      "to": "745ae121-d64c-45d4-ad53-ec3f547c1d9e",
      "title": "",
      "id": "c7fc71a4-c6f9-4bab-9087-3bd78234147f"
    },
    {
      "from": "04927e48-b396-461b-9598-ebc6372ce76a",
      "to": "43bf0179-ad72-4d4d-ab58-7a46b5a03220",
      "title": "",
      "id": "fa88d5ba-2394-4db5-beb5-c23d742e4e95"
    },
    {
      "from": "43bf0179-ad72-4d4d-ab58-7a46b5a03220",
      "to": "266db0a9-dec6-46cb-872f-f3c91644d3d5",
      "title": "",
      "id": "33c9ee64-b541-42df-afea-b97c90180966"
    },
    {
      "from": "43bf0179-ad72-4d4d-ab58-7a46b5a03220",
      "to": "05b81534-54c4-429f-ae2d-80e9fb7ed6ea",
      "title": "",
      "id": "06cf9780-34f7-48ad-aa4d-7665b8cd4f77"
    },
    {
      "from": "43bf0179-ad72-4d4d-ab58-7a46b5a03220",
      "to": "ca8ad08a-92f5-4b93-a05b-f7cef65afcc5",
      "title": "",
      "id": "731b0877-06d2-437b-8019-3ce0a1f5c8b6"
    }
  ]
}