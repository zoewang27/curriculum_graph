{
  "nodes": [
    {
      "id": "9bb9833b-bb33-4e42-9307-8ad7eba6803d",
      "label": "Algorithm and Complexity",
      "cog_level": "Understand",
      "title": "Algorithm and Complexity",
      "description": "Algorithm and Complexity: ",
      "node_type": "course",
      "shape": "circle",
      "color": {
        "background": "#ffd2af",
        "border": "#ffd2af"
      }
    },
    {
      "id": "9018da37-7a7b-421c-8ce6-3ca733bbd8e4",
      "label": "Algorithmic Techniques",
      "cog_level": "Understand",
      "title": "Algorithmic Techniques",
      "description": "Algorithmic Techniques: ",
      "node_type": "knowledge unit",
      "shape": "ellipse",
      "color": {
        "background": "#ffd2af",
        "border": "#ffd2af"
      }
    },
    {
      "id": "e7a47d1d-ceea-47f2-a974-96365c4ded9d",
      "label": "Recursion",
      "cog_level": "Understand",
      "title": "Recursion",
      "description": "Recursion: A technique where a function calls itself in order to solve smaller instances of the same problem.",
      "node_type": "knowledge point",
      "shape": "box",
      "color": {
        "background": "#ffd2af",
        "border": "#ffd2af"
      }
    },
    {
      "id": "928f8d31-75ba-4d8c-b7e2-f0476af65ff0",
      "label": "Divide and Conquer",
      "cog_level": "Understand",
      "title": "Divide and Conquer",
      "description": "Divide and Conquer: Divides a problem into smaller subproblems, solves each subproblem independently, and then combines the solutions.",
      "node_type": "knowledge point",
      "shape": "box",
      "color": {
        "background": "#ffd2af",
        "border": "#ffd2af"
      }
    },
    {
      "id": "eea7287a-0499-4afb-a9ee-7a04d202f7ee",
      "label": "Binary search",
      "cog_level": "Understand",
      "title": "Binary search",
      "description": "Binary search: An efficient search algorithm for finding a target value within a sorted array by repeatedly dividing the search interval in half.",
      "node_type": "knowledge point",
      "shape": "box",
      "color": {
        "background": "#ffd2af",
        "border": "#ffd2af"
      }
    },
    {
      "id": "53c11474-edf7-4269-be1a-b1e240f5bf50",
      "label": "Mergesort",
      "cog_level": "Understand",
      "title": "Mergesort",
      "description": "Mergesort: A sorting algorithm that follows the divide and conquer strategy by recursively dividing the array into halves, sorting each half, and then merging the sorted halves.",
      "node_type": "knowledge point",
      "shape": "box",
      "color": {
        "background": "#ffd2af",
        "border": "#ffd2af"
      }
    },
    {
      "id": "0debd5a5-d162-4cc7-8136-d5d3984592c3",
      "label": "Quicksort",
      "cog_level": "Understand",
      "title": "Quicksort",
      "description": "Quicksort: A sorting algorithm that uses the divide and conquer strategy by partitioning the array into smaller subarrays based on a pivot element and recursively sorting each subarray.",
      "node_type": "knowledge point",
      "shape": "box",
      "color": {
        "background": "#ffd2af",
        "border": "#ffd2af"
      }
    },
    {
      "id": "08f1d2a1-f18d-4515-a24f-7a4e4c9eaacb",
      "label": "Matrix multiplication",
      "cog_level": "Understand",
      "title": "Matrix multiplication",
      "description": "Matrix multiplication: A mathematical operation that computes the product of two matrices.",
      "node_type": "knowledge point",
      "shape": "box",
      "color": {
        "background": "#ffd2af",
        "border": "#ffd2af"
      }
    },
    {
      "id": "0839614b-4be6-46cf-ba6a-b6d764e3f450",
      "label": "Karatsuba Multiplication",
      "cog_level": "Understand",
      "title": "Karatsuba Multiplication",
      "description": "Karatsuba Multiplication: An algorithm for fast multiplication of large numbers using a divide and conquer approach.",
      "node_type": "knowledge point",
      "shape": "box",
      "color": {
        "background": "#ffd2af",
        "border": "#ffd2af"
      }
    },
    {
      "id": "83cf4b41-bc79-4ca9-8abf-8ccbcc8ecc57",
      "label": "Fast Fourier Transform",
      "cog_level": "Understand",
      "title": "Fast Fourier Transform",
      "description": "Fast Fourier Transform: An efficient algorithm for computing the discrete Fourier transform and its inverse.",
      "node_type": "knowledge point",
      "shape": "box",
      "color": {
        "background": "#ffd2af",
        "border": "#ffd2af"
      }
    },
    {
      "id": "d4b8d90b-e75b-4a9b-8d8c-d24b6e6daa87",
      "label": "Backtracking",
      "cog_level": "Understand",
      "title": "Backtracking",
      "description": "Backtracking: A technique for systematically searching through all possible solutions to find the optimal one, often used in constraint satisfaction problems.",
      "node_type": "knowledge point",
      "shape": "box",
      "color": {
        "background": "#ffd2af",
        "border": "#ffd2af"
      }
    },
    {
      "id": "618d6cc7-206d-43ca-a042-911bb0e62174",
      "label": "Gauss\u2019 algorithm",
      "cog_level": "Understand",
      "title": "Gauss\u2019 algorithm",
      "description": "Gauss\u2019 algorithm: Various algorithms attributed to Carl Friedrich Gauss, often used for solving linear equations and finding determinants.",
      "node_type": "knowledge point",
      "shape": "box",
      "color": {
        "background": "#ffd2af",
        "border": "#ffd2af"
      }
    },
    {
      "id": "334933fc-c632-43b0-9d90-2a8483f48cb2",
      "label": "Recursive algorithm",
      "cog_level": "Understand",
      "title": "Recursive algorithm",
      "description": "Recursive algorithm: An algorithm that solves a problem by solving smaller instances of the same problem.",
      "node_type": "knowledge point",
      "shape": "box",
      "color": {
        "background": "#ffd2af",
        "border": "#ffd2af"
      }
    },
    {
      "id": "d4480bb1-5444-4be3-a456-b51b95d3d976",
      "label": "Game-playing algorithm",
      "cog_level": "Understand",
      "title": "Game-playing algorithm",
      "description": "Game-playing algorithm: Algorithms used in artificial intelligence for making decisions in games, such as minimax algorithm with alpha-beta pruning.",
      "node_type": "knowledge point",
      "shape": "box",
      "color": {
        "background": "#ffd2af",
        "border": "#ffd2af"
      }
    },
    {
      "id": "2b6635d2-62fd-458c-bef4-ca9ee7aeb162",
      "label": "subset sum",
      "cog_level": "Understand",
      "title": "subset sum",
      "description": "subset sum: A problem in combinatorial optimization that asks whether there exists a subset of a given set whose elements sum to a given target value.",
      "node_type": "knowledge point",
      "shape": "box",
      "color": {
        "background": "#ffd2af",
        "border": "#ffd2af"
      }
    },
    {
      "id": "73e2b5cb-5691-4902-8ed7-4e779215052f",
      "label": "LIS algorithm",
      "cog_level": "Understand",
      "title": "LIS algorithm",
      "description": "LIS algorithm: An algorithm for finding the longest increasing subsequence in a given sequence of numbers.",
      "node_type": "knowledge point",
      "shape": "box",
      "color": {
        "background": "#ffd2af",
        "border": "#ffd2af"
      }
    },
    {
      "id": "0991fff1-84d0-4824-aa43-756c1b0864bb",
      "label": "Dynamic Programming",
      "cog_level": "Understand",
      "title": "Dynamic Programming",
      "description": "Dynamic Programming: A technique used to solve problems by breaking them down into smaller overlapping subproblems and solving each subproblem only once",
      "node_type": "knowledge point",
      "shape": "box",
      "color": {
        "background": "#ffd2af",
        "border": "#ffd2af"
      }
    },
    {
      "id": "e1f07401-7ad4-4029-bcc5-d0229442d5e6",
      "label": "Fibonacci Sequence",
      "cog_level": "Understand",
      "title": "Fibonacci Sequence",
      "description": "Fibonacci Sequence: Finding the nth Fibonacci number using dynamic programming to avoid redundant recursive calls.",
      "node_type": "knowledge point",
      "shape": "box",
      "color": {
        "background": "#ffd2af",
        "border": "#ffd2af"
      }
    },
    {
      "id": "b982e9ee-58b1-43a9-8465-1ee2e8349932",
      "label": "Text Segmentation",
      "cog_level": "Understand",
      "title": "Text Segmentation",
      "description": "Text Segmentation: Breaking a given text into words such that the concatenation of these words forms the original text, with the minimum number of words.",
      "node_type": "knowledge point",
      "shape": "box",
      "color": {
        "background": "#ffd2af",
        "border": "#ffd2af"
      }
    },
    {
      "id": "a0f0ccf8-dc1d-4705-88e9-63d4675fa57d",
      "label": "Subset Sum",
      "cog_level": "Understand",
      "title": "Subset Sum",
      "description": "Subset Sum: Determining whether there exists a subset of a given set whose elements sum to a given target value.",
      "node_type": "knowledge point",
      "shape": "box",
      "color": {
        "background": "#ffd2af",
        "border": "#ffd2af"
      }
    },
    {
      "id": "7e0aa8aa-4b6c-4742-a325-44ac3112cbca",
      "label": "Longest Increasing Subsequence",
      "cog_level": "Understand",
      "title": "Longest Increasing Subsequence",
      "description": "Longest Increasing Subsequence: Finding the longest subsequence in a given sequence of numbers that is strictly increasing.",
      "node_type": "knowledge point",
      "shape": "box",
      "color": {
        "background": "#ffd2af",
        "border": "#ffd2af"
      }
    },
    {
      "id": "2c289570-6eee-40e0-9265-b6c840c6a4cd",
      "label": "Edit Distance",
      "cog_level": "Understand",
      "title": "Edit Distance",
      "description": "Edit Distance: Calculating the minimum number of operations (insertion, deletion, substitution) required to transform one string into another.",
      "node_type": "knowledge point",
      "shape": "box",
      "color": {
        "background": "#ffd2af",
        "border": "#ffd2af"
      }
    },
    {
      "id": "d4c05c02-ce19-4922-ba99-3a25bff7f82c",
      "label": "Maximum Independent Set",
      "cog_level": "Understand",
      "title": "Maximum Independent Set",
      "description": "Maximum Independent Set: Finding the largest subset of vertices in a graph such that no two vertices are adjacent (i.e., there are no edges between any two vertices in the subset).",
      "node_type": "knowledge point",
      "shape": "box",
      "color": {
        "background": "#ffd2af",
        "border": "#ffd2af"
      }
    },
    {
      "id": "21c99aa2-04bc-4e54-a4a8-873450196ec7",
      "label": "Greedy Algorithms",
      "cog_level": "Understand",
      "title": "Greedy Algorithms",
      "description": "Greedy Algorithms: A class of algorithms that make locally optimal choices at each step with the hope of finding a global optimum solution.",
      "node_type": "knowledge point",
      "shape": "box",
      "color": {
        "background": "#ffd2af",
        "border": "#ffd2af"
      }
    },
    {
      "id": "fc1b256c-9fff-4d41-937b-2d6ab43c65fa",
      "label": "Sorting Files on Tape",
      "cog_level": "Understand",
      "title": "Sorting Files on Tape",
      "description": "Sorting Files on Tape: Arranging files stored on multiple tapes in a specific order to minimize the total time required to access all files.",
      "node_type": "knowledge point",
      "shape": "box",
      "color": {
        "background": "#ffd2af",
        "border": "#ffd2af"
      }
    },
    {
      "id": "e0a7d8a7-7990-466d-b91b-6d682af9dc24",
      "label": "Exchange Arguments",
      "cog_level": "Understand",
      "title": "Exchange Arguments",
      "description": "Exchange Arguments: A technique used in proving the optimality of greedy algorithms by showing that any optimal solution must have certain properties.",
      "node_type": "knowledge point",
      "shape": "box",
      "color": {
        "background": "#ffd2af",
        "border": "#ffd2af"
      }
    },
    {
      "id": "bba89e92-3521-4b2e-995f-f057152f6926",
      "label": "Scheduling Problem",
      "cog_level": "Understand",
      "title": "Scheduling Problem",
      "description": "Scheduling Problem: Assigning tasks or jobs to resources such as processors or machines to optimize a certain objective, such as minimizing completion time or maximizing throughput.",
      "node_type": "knowledge point",
      "shape": "box",
      "color": {
        "background": "#ffd2af",
        "border": "#ffd2af"
      }
    },
    {
      "id": "ae365f85-d18d-45a5-a517-92bb00d82a41",
      "label": "Huffman Codes",
      "cog_level": "Understand",
      "title": "Huffman Codes",
      "description": "Huffman Codes: A method of data compression that assigns variable-length codes to input characters, with shorter codes assigned to more frequently occurring characters.",
      "node_type": "knowledge point",
      "shape": "box",
      "color": {
        "background": "#ffd2af",
        "border": "#ffd2af"
      }
    },
    {
      "id": "968e1257-cf5f-4ca9-9541-b8a88d4f94fa",
      "label": "Graph Algorithms",
      "cog_level": "Understand",
      "title": "Graph Algorithms",
      "description": "Graph Algorithms: Graph algorithms are a fundamental part of computer science, focusing on analyzing and manipulating graphs, which consist of nodes (vertices) connected by edges.",
      "node_type": "knowledge unit",
      "shape": "ellipse",
      "color": {
        "background": "#ffd2af",
        "border": "#ffd2af"
      }
    },
    {
      "id": "f16158c3-8211-4d73-83ee-e568bc016537",
      "label": "Spanning trees",
      "cog_level": "Understand",
      "title": "Spanning trees",
      "description": "Spanning trees: A subgraph of a graph that includes all the vertices of the original graph with the minimum possible number of edges.",
      "node_type": "knowledge point",
      "shape": "box",
      "color": {
        "background": "#ffd2af",
        "border": "#ffd2af"
      }
    },
    {
      "id": "d991550a-89e4-46f9-b14e-098bbee81e2b",
      "label": "Kruskal\u2019s algorithm",
      "cog_level": "Understand",
      "title": "Kruskal\u2019s algorithm",
      "description": "Kruskal\u2019s algorithm: A greedy algorithm for finding the minimum spanning tree (MST) of a connected, weighted graph.",
      "node_type": "knowledge point",
      "shape": "box",
      "color": {
        "background": "#ffd2af",
        "border": "#ffd2af"
      }
    },
    {
      "id": "8bdc7580-6d2b-4c2a-a8be-cedf701a424a",
      "label": "Jarn\u00edk\u2019s algorithm",
      "cog_level": "Understand",
      "title": "Jarn\u00edk\u2019s algorithm",
      "description": "Jarn\u00edk\u2019s algorithm: Another greedy algorithm for finding the minimum spanning tree (MST) of a connected, weighted graph.",
      "node_type": "knowledge point",
      "shape": "box",
      "color": {
        "background": "#ffd2af",
        "border": "#ffd2af"
      }
    },
    {
      "id": "1990031d-08be-4ea2-8986-c889121a746c",
      "label": "Shortest Paths",
      "cog_level": "Understand",
      "title": "Shortest Paths",
      "description": "Shortest Paths: Finding the shortest path between two vertices in a weighted graph, where the path length is the sum of the weights of its edges.",
      "node_type": "knowledge point",
      "shape": "box",
      "color": {
        "background": "#ffd2af",
        "border": "#ffd2af"
      }
    },
    {
      "id": "afb88989-de2d-4a89-973e-8d049c5cf8cb",
      "label": "Dijkstra\u2019s algorithm",
      "cog_level": "Understand",
      "title": "Dijkstra\u2019s algorithm",
      "description": "Dijkstra\u2019s algorithm: A greedy algorithm for finding the shortest path from a single source vertex to all other vertices in a weighted graph with non-negative edge weights.",
      "node_type": "knowledge point",
      "shape": "box",
      "color": {
        "background": "#ffd2af",
        "border": "#ffd2af"
      }
    },
    {
      "id": "5464c63e-1afa-43e9-a672-c9b44e0834bf",
      "label": "Network Flows",
      "cog_level": "Understand",
      "title": "Network Flows",
      "description": "Network Flows: Modeling the flow of goods, information, or resources through a network of nodes and edges, where the goal is to maximize or minimize the flow subject to capacity ",
      "node_type": "knowledge point",
      "shape": "box",
      "color": {
        "background": "#ffd2af",
        "border": "#ffd2af"
      }
    },
    {
      "id": "9c5ca827-fd74-424f-b331-17abea0d65e0",
      "label": "Network Flows and Cuts",
      "cog_level": "Understand",
      "title": "Network Flows and Cuts",
      "description": "Network Flows and Cuts: The relationship between flows in a network and cuts that partition the network into two disjoint sets of vertices.",
      "node_type": "knowledge point",
      "shape": "box",
      "color": {
        "background": "#ffd2af",
        "border": "#ffd2af"
      }
    },
    {
      "id": "7764917d-6c4c-4896-a3b1-5e29abb6aa0e",
      "label": "Max Flow- Min Cut Theorem",
      "cog_level": "Understand",
      "title": "Max Flow- Min Cut Theorem",
      "description": "Max Flow- Min Cut Theorem: The theorem states that in a flow network, the maximum flow value through the network equals the minimum cut capacity across all possible cuts of the network.",
      "node_type": "knowledge point",
      "shape": "box",
      "color": {
        "background": "#ffd2af",
        "border": "#ffd2af"
      }
    },
    {
      "id": "a328949a-8e08-47ec-97d6-f15f60bf3d01",
      "label": "Ford-Fulkerson Algorithm",
      "cog_level": "Understand",
      "title": "Ford-Fulkerson Algorithm",
      "description": "Ford-Fulkerson Algorithm: An algorithm for computing the maximum flow in a flow network by repeatedly augmenting paths from the source to the sink until no more augmenting paths exist.",
      "node_type": "knowledge point",
      "shape": "box",
      "color": {
        "background": "#ffd2af",
        "border": "#ffd2af"
      }
    },
    {
      "id": "44b862b7-f26a-4b74-ba93-9eb5313f5bc8",
      "label": "Graph Applications",
      "cog_level": "Understand",
      "title": "Graph Applications",
      "description": "Graph Applications: ",
      "node_type": "knowledge point",
      "shape": "box",
      "color": {
        "background": "#ffd2af",
        "border": "#ffd2af"
      }
    },
    {
      "id": "79e4abe7-02bb-426e-b909-a10885ae6f83",
      "label": "Edge Disjoint Paths",
      "cog_level": "Understand",
      "title": "Edge Disjoint Paths",
      "description": "Edge Disjoint Paths: Finding a set of paths in a graph such that no two paths share a common edge.",
      "node_type": "knowledge point",
      "shape": "box",
      "color": {
        "background": "#ffd2af",
        "border": "#ffd2af"
      }
    },
    {
      "id": "c2670077-9be5-4b12-a93b-29de7a1dedb1",
      "label": "Vertex Disjoint Paths",
      "cog_level": "Understand",
      "title": "Vertex Disjoint Paths",
      "description": "Vertex Disjoint Paths: Finding a set of paths in a graph such that no two paths share a common vertex.",
      "node_type": "knowledge point",
      "shape": "box",
      "color": {
        "background": "#ffd2af",
        "border": "#ffd2af"
      }
    },
    {
      "id": "fd9a5de7-fdb7-4dc1-88b9-5c6299c5ad21",
      "label": "Bipartite Matching",
      "cog_level": "Understand",
      "title": "Bipartite Matching",
      "description": "Bipartite Matching: Finding a maximum matching in a bipartite graph, where each vertex in one set is adjacent to at most one vertex in the other set.",
      "node_type": "knowledge point",
      "shape": "box",
      "color": {
        "background": "#ffd2af",
        "border": "#ffd2af"
      }
    },
    {
      "id": "8278d237-a002-42bd-830f-5ae182d3010b",
      "label": "Real-Life Applications",
      "cog_level": "Understand",
      "title": "Real-Life Applications",
      "description": "Real-Life Applications: ",
      "node_type": "knowledge point",
      "shape": "box",
      "color": {
        "background": "#ffd2af",
        "border": "#ffd2af"
      }
    },
    {
      "id": "2c722c9e-d158-4959-9124-dac7752e8f43",
      "label": "Assignment Problem",
      "cog_level": "Understand",
      "title": "Assignment Problem",
      "description": "Assignment Problem: Assigning a set of tasks to a set of resources in a way that optimizes some objective, such as minimizing total cost or maximizing efficiency.",
      "node_type": "knowledge point",
      "shape": "box",
      "color": {
        "background": "#ffd2af",
        "border": "#ffd2af"
      }
    },
    {
      "id": "71bdbd6f-cef5-44c6-80d4-1773b9353f87",
      "label": "Baseball Elimination",
      "cog_level": "Understand",
      "title": "Baseball Elimination",
      "description": "Baseball Elimination: Determining which teams are mathematically eliminated from contention in a baseball league based on the remaining games to be played.",
      "node_type": "knowledge point",
      "shape": "box",
      "color": {
        "background": "#ffd2af",
        "border": "#ffd2af"
      }
    },
    {
      "id": "a11b2081-f809-41c1-9db0-b12eff902baa",
      "label": "Job Selection",
      "cog_level": "Understand",
      "title": "Job Selection",
      "description": "Job Selection: Selecting a subset of jobs from a pool of available jobs to maximize some objective, such as total profit or total satisfaction.",
      "node_type": "knowledge point",
      "shape": "box",
      "color": {
        "background": "#ffd2af",
        "border": "#ffd2af"
      }
    },
    {
      "id": "fb9cb2af-3896-4c41-b767-2cd85a4b0b1d",
      "label": "Linear Programming",
      "cog_level": "Understand",
      "title": "Linear Programming",
      "description": "Linear Programming: ",
      "node_type": "knowledge unit",
      "shape": "ellipse",
      "color": {
        "background": "#ffd2af",
        "border": "#ffd2af"
      }
    },
    {
      "id": "a04be53b-3c63-49bc-89d6-2994060c51a0",
      "label": "LP Introduction",
      "cog_level": "Understand",
      "title": "LP Introduction",
      "description": "LP Introduction: Introduction to linear programming, a method for optimizing a linear objective function subject to linear equality and inequality constraints.",
      "node_type": "knowledge point",
      "shape": "box",
      "color": {
        "background": "#ffd2af",
        "border": "#ffd2af"
      }
    },
    {
      "id": "376f577d-939d-42bd-80a3-a697d0393027",
      "label": "Compute dual of a LP",
      "cog_level": "Understand",
      "title": "Compute dual of a LP",
      "description": "Compute dual of a LP: Finding the dual of a linear programming problem, which involves interchanging the roles of variables and constraints to obtain an equivalent problem with different objectives and constraints.",
      "node_type": "knowledge point",
      "shape": "box",
      "color": {
        "background": "#ffd2af",
        "border": "#ffd2af"
      }
    }
  ],
  "edges": [
    {
      "from": "9bb9833b-bb33-4e42-9307-8ad7eba6803d",
      "to": "9018da37-7a7b-421c-8ce6-3ca733bbd8e4",
      "title": "",
      "id": "8f2093df-76f1-4841-9253-c26afd1a73d2"
    },
    {
      "from": "9018da37-7a7b-421c-8ce6-3ca733bbd8e4",
      "to": "e7a47d1d-ceea-47f2-a974-96365c4ded9d",
      "title": "",
      "id": "c15fe55e-1367-4be7-baa7-f88712b91038"
    },
    {
      "from": "e7a47d1d-ceea-47f2-a974-96365c4ded9d",
      "to": "928f8d31-75ba-4d8c-b7e2-f0476af65ff0",
      "title": "",
      "id": "1bcaa9f7-92d4-40ce-b253-fb4bd97132f4"
    },
    {
      "from": "928f8d31-75ba-4d8c-b7e2-f0476af65ff0",
      "to": "eea7287a-0499-4afb-a9ee-7a04d202f7ee",
      "title": "",
      "id": "da70f089-99d1-4b17-a533-8e2a9245de4a"
    },
    {
      "from": "928f8d31-75ba-4d8c-b7e2-f0476af65ff0",
      "to": "53c11474-edf7-4269-be1a-b1e240f5bf50",
      "title": "",
      "id": "45c9f0e6-59a6-4fc9-a2cc-15a7f09cc964"
    },
    {
      "from": "928f8d31-75ba-4d8c-b7e2-f0476af65ff0",
      "to": "0debd5a5-d162-4cc7-8136-d5d3984592c3",
      "title": "",
      "id": "80b91969-ffe5-47a6-9e59-5721efc42b5b"
    },
    {
      "from": "928f8d31-75ba-4d8c-b7e2-f0476af65ff0",
      "to": "08f1d2a1-f18d-4515-a24f-7a4e4c9eaacb",
      "title": "",
      "id": "10115400-b484-4bd9-afdd-4ddbad0308d1"
    },
    {
      "from": "928f8d31-75ba-4d8c-b7e2-f0476af65ff0",
      "to": "0839614b-4be6-46cf-ba6a-b6d764e3f450",
      "title": "",
      "id": "5fbcbd55-cb9c-4ff6-95dc-69f3022c700d"
    },
    {
      "from": "928f8d31-75ba-4d8c-b7e2-f0476af65ff0",
      "to": "83cf4b41-bc79-4ca9-8abf-8ccbcc8ecc57",
      "title": "",
      "id": "5515c8a6-89a7-4cc6-9530-4cafb3c330fc"
    },
    {
      "from": "e7a47d1d-ceea-47f2-a974-96365c4ded9d",
      "to": "d4b8d90b-e75b-4a9b-8d8c-d24b6e6daa87",
      "title": "",
      "id": "fa969e07-15ba-4c04-8c35-732129eac26d"
    },
    {
      "from": "d4b8d90b-e75b-4a9b-8d8c-d24b6e6daa87",
      "to": "618d6cc7-206d-43ca-a042-911bb0e62174",
      "title": "",
      "id": "107b1c92-2a29-440c-8378-87574a3e1f1e"
    },
    {
      "from": "d4b8d90b-e75b-4a9b-8d8c-d24b6e6daa87",
      "to": "334933fc-c632-43b0-9d90-2a8483f48cb2",
      "title": "",
      "id": "558ed5ca-dccd-42c6-9dbf-e89d58552f4f"
    },
    {
      "from": "d4b8d90b-e75b-4a9b-8d8c-d24b6e6daa87",
      "to": "d4480bb1-5444-4be3-a456-b51b95d3d976",
      "title": "",
      "id": "6df342b0-6f72-4300-bb9e-df0fbce5f8d9"
    },
    {
      "from": "d4b8d90b-e75b-4a9b-8d8c-d24b6e6daa87",
      "to": "2b6635d2-62fd-458c-bef4-ca9ee7aeb162",
      "title": "",
      "id": "644e7b83-6295-4173-9e9a-6753de68e322"
    },
    {
      "from": "d4b8d90b-e75b-4a9b-8d8c-d24b6e6daa87",
      "to": "73e2b5cb-5691-4902-8ed7-4e779215052f",
      "title": "",
      "id": "eddae83e-5d8a-4af6-8a27-982cc6b52512"
    },
    {
      "from": "9018da37-7a7b-421c-8ce6-3ca733bbd8e4",
      "to": "0991fff1-84d0-4824-aa43-756c1b0864bb",
      "title": "",
      "id": "3cb5f802-19ff-4a3d-919c-0c7f954c282b"
    },
    {
      "from": "0991fff1-84d0-4824-aa43-756c1b0864bb",
      "to": "e1f07401-7ad4-4029-bcc5-d0229442d5e6",
      "title": "",
      "id": "264df6d9-e46c-4769-a0fe-9c0726148549"
    },
    {
      "from": "0991fff1-84d0-4824-aa43-756c1b0864bb",
      "to": "b982e9ee-58b1-43a9-8465-1ee2e8349932",
      "title": "",
      "id": "1fecbe96-70fb-48fd-a2b9-ea7cd8dea538"
    },
    {
      "from": "0991fff1-84d0-4824-aa43-756c1b0864bb",
      "to": "a0f0ccf8-dc1d-4705-88e9-63d4675fa57d",
      "title": "",
      "id": "26866e85-849b-4d54-a2e6-80c5cd603b97"
    },
    {
      "from": "0991fff1-84d0-4824-aa43-756c1b0864bb",
      "to": "7e0aa8aa-4b6c-4742-a325-44ac3112cbca",
      "title": "",
      "id": "a2a0c3cb-b2d8-4b53-8eec-44547063f7fc"
    },
    {
      "from": "0991fff1-84d0-4824-aa43-756c1b0864bb",
      "to": "2c289570-6eee-40e0-9265-b6c840c6a4cd",
      "title": "",
      "id": "f523c321-dbc3-4175-a619-f8dff3753a25"
    },
    {
      "from": "0991fff1-84d0-4824-aa43-756c1b0864bb",
      "to": "d4c05c02-ce19-4922-ba99-3a25bff7f82c",
      "title": "",
      "id": "a7ea8f5e-4a16-44c8-bd1f-082aa2eb8987"
    },
    {
      "from": "9018da37-7a7b-421c-8ce6-3ca733bbd8e4",
      "to": "21c99aa2-04bc-4e54-a4a8-873450196ec7",
      "title": "",
      "id": "b0c078d1-a0bc-4e4b-83d0-c6eed0ae4640"
    },
    {
      "from": "21c99aa2-04bc-4e54-a4a8-873450196ec7",
      "to": "fc1b256c-9fff-4d41-937b-2d6ab43c65fa",
      "title": "",
      "id": "c698385d-9d1b-4826-bc65-51edd1c05e2e"
    },
    {
      "from": "21c99aa2-04bc-4e54-a4a8-873450196ec7",
      "to": "e0a7d8a7-7990-466d-b91b-6d682af9dc24",
      "title": "",
      "id": "e22ea777-9768-4019-b9cc-bbecb5fb1279"
    },
    {
      "from": "21c99aa2-04bc-4e54-a4a8-873450196ec7",
      "to": "bba89e92-3521-4b2e-995f-f057152f6926",
      "title": "",
      "id": "57d4cdad-9603-4797-bb56-3000ce014093"
    },
    {
      "from": "21c99aa2-04bc-4e54-a4a8-873450196ec7",
      "to": "ae365f85-d18d-45a5-a517-92bb00d82a41",
      "title": "",
      "id": "6adb64e7-3225-443c-acf3-315288a8577e"
    },
    {
      "from": "9bb9833b-bb33-4e42-9307-8ad7eba6803d",
      "to": "968e1257-cf5f-4ca9-9541-b8a88d4f94fa",
      "title": "",
      "id": "7f0b2c27-078a-4ea5-8938-eb6100e0e0b3"
    },
    {
      "from": "968e1257-cf5f-4ca9-9541-b8a88d4f94fa",
      "to": "f16158c3-8211-4d73-83ee-e568bc016537",
      "title": "",
      "id": "30795038-73e7-44ab-8666-4e0c235840d7"
    },
    {
      "from": "f16158c3-8211-4d73-83ee-e568bc016537",
      "to": "d991550a-89e4-46f9-b14e-098bbee81e2b",
      "title": "",
      "id": "05e93d04-c6c8-443a-a8a5-6909db21c8b2"
    },
    {
      "from": "f16158c3-8211-4d73-83ee-e568bc016537",
      "to": "8bdc7580-6d2b-4c2a-a8be-cedf701a424a",
      "title": "",
      "id": "f42faed0-db5f-496a-9bca-d877a61e2a4f"
    },
    {
      "from": "968e1257-cf5f-4ca9-9541-b8a88d4f94fa",
      "to": "1990031d-08be-4ea2-8986-c889121a746c",
      "title": "",
      "id": "a2ce5f96-12ba-4cc6-b028-e14140806fb9"
    },
    {
      "from": "1990031d-08be-4ea2-8986-c889121a746c",
      "to": "afb88989-de2d-4a89-973e-8d049c5cf8cb",
      "title": "",
      "id": "00bad476-ac1b-4757-99bc-71fb5d37669d"
    },
    {
      "from": "968e1257-cf5f-4ca9-9541-b8a88d4f94fa",
      "to": "5464c63e-1afa-43e9-a672-c9b44e0834bf",
      "title": "",
      "id": "a1ce5b1c-a6c5-4704-a9f9-01ade79fcc96"
    },
    {
      "from": "5464c63e-1afa-43e9-a672-c9b44e0834bf",
      "to": "9c5ca827-fd74-424f-b331-17abea0d65e0",
      "title": "",
      "id": "f4244724-601b-4916-8b70-97bcd549ead8"
    },
    {
      "from": "5464c63e-1afa-43e9-a672-c9b44e0834bf",
      "to": "7764917d-6c4c-4896-a3b1-5e29abb6aa0e",
      "title": "",
      "id": "3bc5f101-9fab-4d8e-a884-6cd3555ca413"
    },
    {
      "from": "5464c63e-1afa-43e9-a672-c9b44e0834bf",
      "to": "a328949a-8e08-47ec-97d6-f15f60bf3d01",
      "title": "",
      "id": "797899e0-67e6-4d34-b181-c677f0f55f65"
    },
    {
      "from": "968e1257-cf5f-4ca9-9541-b8a88d4f94fa",
      "to": "44b862b7-f26a-4b74-ba93-9eb5313f5bc8",
      "title": "",
      "id": "2b2b2d19-7a8e-437e-84fa-3aae1519ea89"
    },
    {
      "from": "44b862b7-f26a-4b74-ba93-9eb5313f5bc8",
      "to": "79e4abe7-02bb-426e-b909-a10885ae6f83",
      "title": "",
      "id": "5535d278-bac6-4cb3-8127-e6fba4881293"
    },
    {
      "from": "44b862b7-f26a-4b74-ba93-9eb5313f5bc8",
      "to": "c2670077-9be5-4b12-a93b-29de7a1dedb1",
      "title": "",
      "id": "2bcfdc6e-62e3-4a72-9761-44c1c3a599df"
    },
    {
      "from": "44b862b7-f26a-4b74-ba93-9eb5313f5bc8",
      "to": "fd9a5de7-fdb7-4dc1-88b9-5c6299c5ad21",
      "title": "",
      "id": "17edab2a-4bea-43a7-a547-79842b996b8a"
    },
    {
      "from": "968e1257-cf5f-4ca9-9541-b8a88d4f94fa",
      "to": "8278d237-a002-42bd-830f-5ae182d3010b",
      "title": "",
      "id": "4dbcb305-1436-47d9-90c0-df6145b0a13c"
    },
    {
      "from": "8278d237-a002-42bd-830f-5ae182d3010b",
      "to": "2c722c9e-d158-4959-9124-dac7752e8f43",
      "title": "",
      "id": "42675c15-d5cb-45e3-8b4e-261fa940ceff"
    },
    {
      "from": "8278d237-a002-42bd-830f-5ae182d3010b",
      "to": "71bdbd6f-cef5-44c6-80d4-1773b9353f87",
      "title": "",
      "id": "3a72573d-3f78-46da-9182-6fd644b5ef31"
    },
    {
      "from": "8278d237-a002-42bd-830f-5ae182d3010b",
      "to": "a11b2081-f809-41c1-9db0-b12eff902baa",
      "title": "",
      "id": "86477400-775e-4980-9a52-1649c4bd994d"
    },
    {
      "from": "9bb9833b-bb33-4e42-9307-8ad7eba6803d",
      "to": "fb9cb2af-3896-4c41-b767-2cd85a4b0b1d",
      "title": "",
      "id": "96000e8b-b59d-4d5b-bc5f-1211785e972d"
    },
    {
      "from": "fb9cb2af-3896-4c41-b767-2cd85a4b0b1d",
      "to": "a04be53b-3c63-49bc-89d6-2994060c51a0",
      "title": "",
      "id": "235ea2a8-3498-49a4-90c8-153f990f9751"
    },
    {
      "from": "fb9cb2af-3896-4c41-b767-2cd85a4b0b1d",
      "to": "376f577d-939d-42bd-80a3-a697d0393027",
      "title": "",
      "id": "3df5780a-4445-4444-9cd3-7928cb41bb01"
    }
  ]
}