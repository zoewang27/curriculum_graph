{
  "nodes": [
    {
      "id": "1",
      "label": "Introduction to Programming",
      "group": "1",
      "shape": "circle",
      "cog_level": "",
      "title": "Introduction to Programming: ",
      "layer": 0
    },
    {
      "id": "1.1",
      "label": "C introduction",
      "group": "1",
      "shape": "box",
      "cog_level": "Understand",
      "title": "C introduction: C introduction: C is a general-purpose, procedural programming language developed by Dennis Ritchie at Bell Labs in the early 1970s.",
      "layer": 1
    },
    {
      "id": "1.1.1",
      "label": "gcc",
      "group": "1",
      "shape": "ellipse",
      "cog_level": "Understand",
      "title": "gcc: gcc: GNU Compiler Collection (gcc) is a suite of compilers for various programming languages, including C, C++, and Fortran.",
      "layer": 2
    },
    {
      "id": "1.1.3",
      "label": "Variable",
      "group": "1",
      "shape": "ellipse",
      "cog_level": "Understand",
      "title": "Variable: Variable: In C, variables are used to store data values.",
      "layer": 2
    },
    {
      "id": "1.1.4",
      "label": "Branch",
      "group": "1",
      "shape": "ellipse",
      "cog_level": "Understand",
      "title": "Branch: Branch: Branching statements in C, such as if-else and switch-case, allow programmers to control the flow of execution based on certain conditions or values.",
      "layer": 2
    },
    {
      "id": "1.1.5",
      "label": "Loop",
      "group": "1",
      "shape": "ellipse",
      "cog_level": "Understand",
      "title": "Loop: Loop: Loops in C, such as for, while, and do-while, enable repeated execution of a block of code until a specified condition is met. ",
      "layer": 2
    },
    {
      "id": "1.2",
      "label": "Basic ingredients",
      "group": "1",
      "shape": "box",
      "cog_level": "Understand",
      "title": "Basic ingredients: Basic ingredients: In C programming, the basic ingredients include variables, data types, operators, control structures, and functions, which are used to create programs.",
      "layer": 1
    },
    {
      "id": "1.2.1",
      "label": "Type conversion",
      "group": "1",
      "shape": "ellipse",
      "cog_level": "Understand",
      "title": "Type conversion: Type conversion: Type conversion in C refers to the process of converting one data type into another.",
      "layer": 2
    },
    {
      "id": "1.2.2",
      "label": "Expression",
      "group": "1",
      "shape": "ellipse",
      "cog_level": "Understand",
      "title": "Expression: Expression: An expression in C is a combination of variables, constants, operators, and function calls that evaluates to a single value. ",
      "layer": 2
    },
    {
      "id": "1.2.3",
      "label": "Numerical operation",
      "group": "1",
      "shape": "ellipse",
      "cog_level": "Understand",
      "title": "Numerical operation: Numerical operation: Numerical operations in C include arithmetic operations (addition, subtraction, multiplication, division), bitwise operations (AND, OR, XOR), and relational operations (equal to, not equal to, greater than, less than), among others. ",
      "layer": 2
    },
    {
      "id": "1.3",
      "label": "CFunction",
      "group": "1",
      "shape": "box",
      "cog_level": "Understand",
      "title": "CFunction: Function: In C, a function is a block of code that performs a specific task. It has a name, a return type, parameters (optional), and a body.",
      "layer": 1
    },
    {
      "id": "1.3.3",
      "label": "Control-flow",
      "group": "1",
      "shape": "ellipse",
      "cog_level": "Understand",
      "title": "Control-flow: Control-flow: Control-flow refers to the order in which statements are executed in a program. In C, control-flow is managed using control structures such as if-else statements, loops (for, while, do-while), switch statements, and function calls. ",
      "layer": 2
    },
    {
      "id": "1.4",
      "label": "Pointer",
      "group": "1",
      "shape": "box",
      "cog_level": "Understand",
      "title": "Pointer: Pointer: A pointer is a variable that stores the memory address of another variable. It allows indirect access to the value stored at that memory address.",
      "layer": 1
    },
    {
      "id": "1.8",
      "label": "Memory",
      "group": "1",
      "shape": "box",
      "cog_level": "Understand",
      "title": "Memory: ",
      "layer": 1
    },
    {
      "id": "1.8.1",
      "label": "Static",
      "group": "1",
      "shape": "ellipse",
      "cog_level": "Understand",
      "title": "Static: Static Memory: Static memory refers to a region of memory where variables are allocated for the entire duration of the program execution. Variables declared as static within functions retain their values between function calls.",
      "layer": 2
    },
    {
      "id": "1.9",
      "label": "Program module",
      "group": "1",
      "shape": "box",
      "cog_level": "Understand",
      "title": "Program module: Program Module: A program module is a discrete unit of software that performs a specific function or task within a larger software system.",
      "layer": 1
    },
    {
      "id": "1.9.2",
      "label": "Link",
      "group": "1",
      "shape": "ellipse",
      "cog_level": "Understand",
      "title": "Link: Link: Linking is the process of combining multiple object files generated by the compiler into a single executable program.",
      "layer": 2
    },
    {
      "id": "21",
      "label": "Compiler Construction",
      "group": "21",
      "shape": "circle",
      "cog_level": "Understand",
      "title": "Compiler Construction: ",
      "layer": 0
    },
    {
      "id": "21.1",
      "label": "Introduction",
      "group": "21",
      "shape": "box",
      "cog_level": "Understand",
      "title": "Introduction: ",
      "layer": 1
    },
    {
      "id": "21.1.1",
      "label": "Compiler Introduction",
      "group": "21",
      "shape": "ellipse",
      "cog_level": "Understand",
      "title": "Compiler Introduction: Compiler Introduction: A compiler is a program that translates source code written in a high-level programming language into machine code that a computer can execute.",
      "layer": 2
    },
    {
      "id": "21.1.6",
      "label": "Compiler: The User\u2019s View",
      "group": "21",
      "shape": "ellipse",
      "cog_level": "Understand",
      "title": "Compiler: The User\u2019s View: Compiler: The User\u2019s View: From the user's perspective, a compiler is a software tool that takes source code written in a high-level programming language, such as C, C++, or Java, and translates it into executable machine code.",
      "layer": 2
    },
    {
      "id": "21.2",
      "label": "Compiler Structure",
      "group": "21",
      "shape": "box",
      "cog_level": "Understand",
      "title": "Compiler Structure: ",
      "layer": 1
    },
    {
      "id": "21.2.1",
      "label": "Basic Compiler Structure",
      "group": "21",
      "shape": "ellipse",
      "cog_level": "Understand",
      "title": "Basic Compiler Structure: ",
      "layer": 2
    },
    {
      "id": "21.2.2",
      "label": "Advanced Compiler Structure",
      "group": "21",
      "shape": "ellipse",
      "cog_level": "Understand",
      "title": "Advanced Compiler Structure: ",
      "layer": 2
    },
    {
      "id": "21.2.2.3",
      "label": "Back end",
      "group": "21",
      "shape": "square",
      "cog_level": "Understand",
      "title": "Back end: ",
      "layer": 3
    },
    {
      "id": "21.2.2.3.2",
      "label": "Register allocator\uff1a",
      "group": "21",
      "shape": "diamond",
      "cog_level": "Understand",
      "title": "Register allocator\uff1a: Register allocator: Allocates physical registers to variables and ensures efficient use of available registers.",
      "layer": 4
    },
    {
      "id": "21.4",
      "label": "Syntactic Analysis",
      "group": "21",
      "shape": "box",
      "cog_level": "Understand",
      "title": "Syntactic Analysis: ",
      "layer": 1
    },
    {
      "id": "21.4.3",
      "label": "Parser generator formalisms",
      "group": "21",
      "shape": "ellipse",
      "cog_level": "Understand",
      "title": "Parser generator formalisms: Parser generator tools like YACC (Yet Another Compiler Compiler) are used to automatically generate parsers from formal grammar specifications.",
      "layer": 2
    },
    {
      "id": "21.4.3.1",
      "label": "Yet Another Compiler Compiler(YACC)",
      "group": "21",
      "shape": "square",
      "cog_level": "Understand",
      "title": "Yet Another Compiler Compiler(YACC): YACC is a widely-used parser generator tool originally developed for Unix systems.",
      "layer": 3
    },
    {
      "id": "21.7",
      "label": "Code Generation",
      "group": "21",
      "shape": "box",
      "cog_level": "Understand",
      "title": "Code Generation: ",
      "layer": 1
    },
    {
      "id": "21.7.3",
      "label": "The CiviC Virtual Machine",
      "group": "21",
      "shape": "ellipse",
      "cog_level": "Understand",
      "title": "The CiviC Virtual Machine: The CiviC Virtual Machine is an example of a stack-based virtual machine designed for simplicity and ease of implementation.",
      "layer": 2
    },
    {
      "id": "21.7.3.1",
      "label": "Arithmetic Operations",
      "group": "21",
      "shape": "square",
      "cog_level": "Understand",
      "title": "Arithmetic Operations: Arithmetic operations in code generation encompass addition, subtraction, multiplication, and division, among others.",
      "layer": 3
    },
    {
      "id": "21.7.3.4",
      "label": "Type Conversion",
      "group": "21",
      "shape": "square",
      "cog_level": "Understand",
      "title": "Type Conversion: Type conversion converts data from one type to another, ensuring compatibility between different data types.",
      "layer": 3
    },
    {
      "id": "21.7.3.5",
      "label": "Constants",
      "group": "21",
      "shape": "square",
      "cog_level": "Understand",
      "title": "Constants: Constants are fixed values in the code, while variables represent memory locations storing data that can change during program execution.",
      "layer": 3
    },
    {
      "id": "21.7.3.6",
      "label": "Variables",
      "group": "21",
      "shape": "square",
      "cog_level": "Understand",
      "title": "Variables: ",
      "layer": 3
    },
    {
      "id": "21.7.4",
      "label": "Code Generation",
      "group": "21",
      "shape": "ellipse",
      "cog_level": "Understand",
      "title": "Code Generation: ",
      "layer": 2
    },
    {
      "id": "21.7.4.2",
      "label": "Simple Expressions",
      "group": "21",
      "shape": "square",
      "cog_level": "Understand",
      "title": "Simple Expressions: Simple Expressions: Generation of code for arithmetic and logical expressions involving literals and variables.",
      "layer": 3
    },
    {
      "id": "21.7.4.3",
      "label": "Control Flow Constructs",
      "group": "21",
      "shape": "square",
      "cog_level": "Understand",
      "title": "Control Flow Constructs: Control Flow Constructs: Handling of conditional and iterative control flow structures.",
      "layer": 3
    },
    {
      "id": "21.7.4.3.1",
      "label": "Conditionals",
      "group": "21",
      "shape": "diamond",
      "cog_level": "Understand",
      "title": "Conditionals: Conditionals: Translation of conditional statements like if-else into machine instructions.",
      "layer": 4
    },
    {
      "id": "21.7.4.3.2",
      "label": "Do-While-Loops",
      "group": "21",
      "shape": "diamond",
      "cog_level": "Understand",
      "title": "Do-While-Loops: Do-While-Loops: Code generation for do-while loop constructs.",
      "layer": 4
    },
    {
      "id": "21.7.4.3.3",
      "label": "While-Loops",
      "group": "21",
      "shape": "diamond",
      "cog_level": "Understand",
      "title": "While-Loops: While-Loops: Translation of while loop constructs into executable code.",
      "layer": 4
    },
    {
      "id": "21.7.4.7",
      "label": "Static vs Dynamic Link",
      "group": "21",
      "shape": "square",
      "cog_level": "Understand",
      "title": "Static vs Dynamic Link: Static vs Dynamic Link: Differentiation between static linking and dynamic linking mechanisms.",
      "layer": 3
    }
  ],
  "edges": [
    {
      "from": "1.1",
      "to": "1.1.1",
      "title": ""
    },
    {
      "from": "1",
      "to": "1.1",
      "title": ""
    },
    {
      "from": "21.1",
      "to": "21.1.1",
      "title": ""
    },
    {
      "from": "21",
      "to": "21.1",
      "title": ""
    },
    {
      "from": "21.1",
      "to": "21.1.6",
      "title": ""
    },
    {
      "from": "21",
      "to": "21.2",
      "title": ""
    },
    {
      "from": "21.2",
      "to": "21.2.1",
      "title": ""
    },
    {
      "from": "21.2",
      "to": "21.2.2",
      "title": ""
    },
    {
      "from": "21.4.3",
      "to": "21.4.3.1",
      "title": ""
    },
    {
      "from": "21.4",
      "to": "21.4.3",
      "title": ""
    },
    {
      "from": "21",
      "to": "21.4",
      "title": ""
    },
    {
      "from": "1.1",
      "to": "1.1.3",
      "title": ""
    },
    {
      "from": "21.7.3",
      "to": "21.7.3.5",
      "title": ""
    },
    {
      "from": "21.7",
      "to": "21.7.3",
      "title": ""
    },
    {
      "from": "21",
      "to": "21.7",
      "title": ""
    },
    {
      "from": "21.7.3",
      "to": "21.7.3.6",
      "title": ""
    },
    {
      "from": "1.1",
      "to": "1.1.4",
      "title": ""
    },
    {
      "from": "21.7.4.3",
      "to": "21.7.4.3.1",
      "title": ""
    },
    {
      "from": "21.7.4",
      "to": "21.7.4.3",
      "title": ""
    },
    {
      "from": "21.7",
      "to": "21.7.4",
      "title": ""
    },
    {
      "from": "1.1",
      "to": "1.1.5",
      "title": ""
    },
    {
      "from": "21.7.4.3",
      "to": "21.7.4.3.2",
      "title": ""
    },
    {
      "from": "21.7.4.3",
      "to": "21.7.4.3.3",
      "title": ""
    },
    {
      "from": "1.2",
      "to": "1.2.1",
      "title": ""
    },
    {
      "from": "1",
      "to": "1.2",
      "title": ""
    },
    {
      "from": "21.7.3",
      "to": "21.7.3.4",
      "title": ""
    },
    {
      "from": "1.2",
      "to": "1.2.2",
      "title": ""
    },
    {
      "from": "21.7.4",
      "to": "21.7.4.2",
      "title": ""
    },
    {
      "from": "1.2",
      "to": "1.2.3",
      "title": ""
    },
    {
      "from": "21.7.3",
      "to": "21.7.3.1",
      "title": ""
    },
    {
      "from": "1.3",
      "to": "1.3.3",
      "title": ""
    },
    {
      "from": "1",
      "to": "1.3",
      "title": ""
    },
    {
      "from": "1",
      "to": "1.4",
      "title": ""
    },
    {
      "from": "21.2.2.3",
      "to": "21.2.2.3.2",
      "title": ""
    },
    {
      "from": "21.2.2",
      "to": "21.2.2.3",
      "title": ""
    },
    {
      "from": "1.8",
      "to": "1.8.1",
      "title": ""
    },
    {
      "from": "1",
      "to": "1.8",
      "title": ""
    },
    {
      "from": "1.9",
      "to": "1.9.2",
      "title": ""
    },
    {
      "from": "1",
      "to": "1.9",
      "title": ""
    },
    {
      "from": "21.7.4",
      "to": "21.7.4.7",
      "title": ""
    },
    {
      "from": "1.1.1",
      "to": "21",
      "title": "0.6167",
      "color": "grey",
      "width": 1,
      "shadow": false,
      "dashes": true
    },
    {
      "from": "1.1.1",
      "to": "21.1.1",
      "title": "0.6487",
      "color": "grey",
      "width": 1,
      "shadow": false,
      "dashes": true
    },
    {
      "from": "1.1.1",
      "to": "21.1.6",
      "title": "0.6378",
      "color": "grey",
      "width": 1,
      "shadow": false,
      "dashes": true
    },
    {
      "from": "1.1.1",
      "to": "21.2",
      "title": "0.6213",
      "color": "grey",
      "width": 1,
      "shadow": false,
      "dashes": true
    },
    {
      "from": "1.1.1",
      "to": "21.2.1",
      "title": "0.6209",
      "color": "grey",
      "width": 1,
      "shadow": false,
      "dashes": true
    },
    {
      "from": "1.1.1",
      "to": "21.2.2",
      "title": "0.6018",
      "color": "grey",
      "width": 1,
      "shadow": false,
      "dashes": true
    },
    {
      "from": "1.1.1",
      "to": "21.4.3.1",
      "title": "0.6191",
      "color": "grey",
      "width": 1,
      "shadow": false,
      "dashes": true
    },
    {
      "from": "1.1.3",
      "to": "21.7.3.5",
      "title": "0.689",
      "color": "grey",
      "width": 1,
      "shadow": false,
      "dashes": true
    },
    {
      "from": "1.1.3",
      "to": "21.7.3.6",
      "title": "0.633",
      "color": "grey",
      "width": 1,
      "shadow": false,
      "dashes": true
    },
    {
      "from": "1.1.4",
      "to": "21.7.4.3.1",
      "title": "0.638",
      "color": "grey",
      "width": 1,
      "shadow": false,
      "dashes": true
    },
    {
      "from": "1.1.5",
      "to": "21.7.4.3.2",
      "title": "0.6505",
      "color": "grey",
      "width": 1,
      "shadow": false,
      "dashes": true
    },
    {
      "from": "1.1.5",
      "to": "21.7.4.3.3",
      "title": "0.7869",
      "color": "grey",
      "width": 1,
      "shadow": false,
      "dashes": true
    },
    {
      "from": "1.2.1",
      "to": "21.7.3.4",
      "title": "0.8043",
      "color": "grey",
      "width": 1,
      "shadow": false,
      "dashes": true
    },
    {
      "from": "1.2.2",
      "to": "21.7.4.2",
      "title": "0.6222",
      "color": "grey",
      "width": 1,
      "shadow": false,
      "dashes": true
    },
    {
      "from": "1.2.3",
      "to": "21.7.3.1",
      "title": "0.6539",
      "color": "grey",
      "width": 1,
      "shadow": false,
      "dashes": true
    },
    {
      "from": "1.3.3",
      "to": "21.7.4.3",
      "title": "0.6037",
      "color": "grey",
      "width": 1,
      "shadow": false,
      "dashes": true
    },
    {
      "from": "1.4",
      "to": "21.2.2.3.2",
      "title": "0.6031",
      "color": "grey",
      "width": 1,
      "shadow": false,
      "dashes": true
    },
    {
      "from": "1.8.1",
      "to": "21.7.3.5",
      "title": "0.6324",
      "color": "grey",
      "width": 1,
      "shadow": false,
      "dashes": true
    },
    {
      "from": "1.9.2",
      "to": "21.7.4.7",
      "title": "0.6275",
      "color": "grey",
      "width": 1,
      "shadow": false,
      "dashes": true
    }
  ],
  "courseId": [
    "1",
    "21"
  ]
}