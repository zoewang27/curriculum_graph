{"nodes": [{"id": "1", "label": "Algorithms and Complexity", "group": "1", "shape": "circle", "cog_level": "", "title": "Algorithms and Complexity: ", "level": 0}, {"id": "1.1", "label": "Algorithmic Strategies", "group": "1", "shape": "box", "cog_level": "Understand", "title": "Algorithmic Strategies: Algorithmic Strategies covers various approaches and techniques used to design and analyze algorithms", "level": 1}, {"id": "1.1.10", "label": "Heuristic: A* ", "group": "1", "shape": "ellipse", "cog_level": "Understand", "title": "Heuristic: A* : A popular search algorithm that efficiently finds the shortest path in a graph from a given start node to a target node.", "level": 2}, {"id": "1.2", "label": "Complexity Analysis", "group": "1", "shape": "box", "cog_level": "", "title": "Complexity Analysis: Complexity Analysis evaluating algorithms' performance in terms of time and space efficiency", "level": 1}, {"id": "1.2.1", "label": "Analysis Framework", "group": "1", "shape": "ellipse", "cog_level": "Understand", "title": "Analysis Framework: Analysis Framework provides a comprehensive approach to evaluating algorithmic performance", "level": 2}, {"id": "1.2.1.1", "label": "Average, Best, and Worst case performance", "group": "1", "shape": "square", "cog_level": "Understand", "title": "Average, Best, and Worst case performance: Examining the efficiency of algorithms under different scenarios", "level": 3}, {"id": "1.2.1.2", "label": "Empirical and Relative (Order of Growth) Measurements", "group": "1", "shape": "square", "cog_level": "Understand", "title": "Empirical and Relative (Order of Growth) Measurements: Utilizing empirical data and comparing growth rates to assess algorithmic efficiency", "level": 3}, {"id": "1.2.2", "label": "Asymptotic complexity analysis", "group": "1", "shape": "ellipse", "cog_level": "Understand", "title": "Asymptotic complexity analysis: Asymptotic complexity analysis involves understanding how algorithms perform as input size grows", "level": 2}, {"id": "1.2.2.1", "label": "Big O, Little O, Big Omega, and Big Theta", "group": "1", "shape": "square", "cog_level": "Understand", "title": "Big O, Little O, Big Omega, and Big Theta: to describe the upper (O), lower (Omega), and tight (Theta) bounds on algorithmic performance, as well as strict upper (Little O) bounds", "level": 3}, {"id": "1.2.3", "label": "Iterative and recursive algorithm analysis", "group": "1", "shape": "ellipse", "cog_level": "Understand", "title": "Iterative and recursive algorithm analysis: examining algorithms' time and space complexities and comparing their performance under different scenarios", "level": 2}, {"id": "1.3", "label": "Fundamental Data Structures and Algorithms", "group": "1", "shape": "box", "cog_level": "", "title": "Fundamental Data Structures and Algorithms: including arrays, linked lists, trees, sorting and searching algorithms", "level": 1}, {"id": "1.3.10", "label": "Records/Structs and Tuples", "group": "1", "shape": "ellipse", "cog_level": "Create", "title": "Records/Structs and Tuples: Data structures used to manage collections of elements with specific rules for accessing and modifying elements", "level": 2}, {"id": "1.3.13", "label": "Trees: Binary, n-ary, Search", "group": "1", "shape": "ellipse", "cog_level": "Create", "title": "Trees: Binary, n-ary, Search: Trees are hierarchical data structures composed of nodes", "level": 2}, {"id": "1.3.13.1", "label": "Depth-First, Breadth-First, Best-First, and Backtracking search", "group": "1", "shape": "square", "cog_level": "Create", "title": "Depth-First, Breadth-First, Best-First, and Backtracking search: Different traversal and search algorithms used on trees. ", "level": 3}, {"id": "1.3.14", "label": "Sorting Algorithms:", "group": "1", "shape": "ellipse", "cog_level": "Create", "title": "Sorting Algorithms:: Includes various techniques such as Selection Sort, Insertion Sort, Quicksort, Merge Sort, Heap Sort, Bucket Sort, Radix Sort, etc.", "level": 2}, {"id": "1.3.14.2", "label": "O(n log n) Sorting", "group": "1", "shape": "square", "cog_level": "Create", "title": "O(n log n) Sorting: Quicksort, Merge Sort, and Heap Sort, with a time complexity of O(n log n).", "level": 3}, {"id": "1.3.2", "label": "Arrays: single and multi-dimensional", "group": "1", "shape": "ellipse", "cog_level": "Understand", "title": "Arrays: single and multi-dimensional: Basic data structures used for storing elements", "level": 2}, {"id": "1.3.4", "label": "Graphs [MF/Graphs and Trees]", "group": "1", "shape": "ellipse", "cog_level": "Understand", "title": "Graphs [MF/Graphs and Trees]: a fundamental data structure", "level": 2}, {"id": "1.3.4.2", "label": "Adjacency List and Matrix representations", "group": "1", "shape": "square", "cog_level": "Understand", "title": "Adjacency List and Matrix representations: Methods used to store and represent graphs in computer memory", "level": 3}, {"id": "1.3.5", "label": "Graph Algorithms", "group": "1", "shape": "ellipse", "cog_level": "Create", "title": "Graph Algorithms: a set of techniques used to analyze and manipulate graphs", "level": 2}, {"id": "1.3.6", "label": "Hash Tables / Maps", "group": "1", "shape": "ellipse", "cog_level": "Understand", "title": "Hash Tables / Maps: data structures that store key-value pairs and enable efficient retrieval and insertion of elements based on their keys", "level": 2}, {"id": "1.3.7", "label": "Linked Lists: single, doubly linked, and circular", "group": "1", "shape": "ellipse", "cog_level": "Create", "title": "Linked Lists: single, doubly linked, and circular: Represent different variations of linked list data structures", "level": 2}, {"id": "1.3.9", "label": "Queues, Priority Queues, and Dequeues", "group": "1", "shape": "ellipse", "cog_level": "Create", "title": "Queues, Priority Queues, and Dequeues: Data structures used to manage collections of elements with specific rules for accessing and modifying elements", "level": 2}, {"id": "4", "label": "Data Structures", "group": "4", "shape": "circle", "cog_level": "Understand", "title": "Data Structures: ", "level": 0}, {"id": "4.1", "label": "Data Structures Introduction", "group": "4", "shape": "box", "cog_level": "Understand", "title": "Data Structures Introduction: Data Structures Introduction: Fundamentals of organizing and storing data efficiently.", "level": 1}, {"id": "4.1.2", "label": "ADT: QUEUE", "group": "4", "shape": "ellipse", "cog_level": "Understand", "title": "ADT: QUEUE: ADT: QUEUE: Abstract Data Type representing a collection of elements with First In, First Out (FIFO) access.", "level": 2}, {"id": "4.1.3", "label": "DS: ARRAY", "group": "4", "shape": "ellipse", "cog_level": "Understand", "title": "DS: ARRAY: DS: ARRAY: Data Structure storing elements in contiguous memory locations with constant-time access to elements using indices.", "level": 2}, {"id": "4.10", "label": "Graph", "group": "4", "shape": "box", "cog_level": "Understand", "title": "Graph: A data structure composed of a set of vertices and a set of edges connecting pairs of vertices.", "level": 1}, {"id": "4.10.1", "label": "Graph Representations", "group": "4", "shape": "ellipse", "cog_level": "Understand", "title": "Graph Representations: Various ways to represent graphs, such as adjacency matrix, adjacency list, and edge list.", "level": 2}, {"id": "4.10.2", "label": "Graph Search", "group": "4", "shape": "ellipse", "cog_level": "Understand", "title": "Graph Search: Algorithms for traversing or searching a graph to visit all vertices or find specific paths or patterns within the graph.", "level": 2}, {"id": "4.2", "label": "Searching And Lists", "group": "4", "shape": "box", "cog_level": "Understand", "title": "Searching And Lists: Searching And Lists: Techniques for searching data efficiently and organizing data in lists.", "level": 1}, {"id": "4.2.2", "label": "DS: Dynamic array", "group": "4", "shape": "ellipse", "cog_level": "Understand", "title": "DS: Dynamic array: DS: Dynamic array: Data Structure similar to an array but with the ability to resize dynamically as needed.", "level": 2}, {"id": "4.2.3", "label": "Searching And Lists", "group": "4", "shape": "ellipse", "cog_level": "Understand", "title": "Searching And Lists: DS: Linked list: Data Structure where elements are stored in nodes, each containing a reference to the next node in the sequence.", "level": 2}, {"id": "4.2.4", "label": "Measuring performance", "group": "4", "shape": "ellipse", "cog_level": "Understand", "title": "Measuring performance: Measuring performance: Methods for evaluating the efficiency and effectiveness of algorithms and data structures.", "level": 2}, {"id": "4.3", "label": "Analysing Performance", "group": "4", "shape": "box", "cog_level": "Understand", "title": "Analysing Performance: Analysing Performance: Techniques for analyzing the performance of algorithms and data structures under various conditions.", "level": 1}, {"id": "4.3.1", "label": "Simplifying With Bounds", "group": "4", "shape": "ellipse", "cog_level": "Understand", "title": "Simplifying With Bounds: Simplifying With Bounds: Using upper and lower bounds to simplify the analysis of algorithms and data structures.", "level": 2}, {"id": "4.3.2", "label": "Sets And Maps", "group": "4", "shape": "ellipse", "cog_level": "Understand", "title": "Sets And Maps: Sets And Maps: Fundamental data structures for storing unique elements (sets) and key-value pairs (maps).", "level": 2}, {"id": "4.4", "label": "Efficient Sets", "group": "4", "shape": "box", "cog_level": "Understand", "title": "Efficient Sets: Efficient Sets: Data structures optimized for efficient storage and retrieval of unique elements.", "level": 1}, {"id": "4.4.2", "label": "Better Sets And Maps With Hash Tables", "group": "4", "shape": "ellipse", "cog_level": "Understand", "title": "Better Sets And Maps With Hash Tables: Better Sets And Maps With Hash Tables: Data structures utilizing hash tables to achieve efficient insertion, deletion, and retrieval operations for sets and maps.", "level": 2}, {"id": "4.5", "label": "Algorithmic Bounds and Tree", "group": "4", "shape": "box", "cog_level": "Understand", "title": "Algorithmic Bounds and Tree: ", "level": 1}, {"id": "4.5.1", "label": "Algorithmic Bounds", "group": "4", "shape": "ellipse", "cog_level": "Understand", "title": "Algorithmic Bounds: ", "level": 2}, {"id": "4.5.2", "label": "Data Structure: Tree", "group": "4", "shape": "ellipse", "cog_level": "Understand", "title": "Data Structure: Tree: ", "level": 2}, {"id": "4.5.2.1", "label": "tree", "group": "4", "shape": "square", "cog_level": "Understand", "title": "tree: Tree: A hierarchical data structure consisting of nodes connected by edges, typically with one designated as the root.", "level": 3}, {"id": "4.6", "label": "Data Structure: Binary Tree", "group": "4", "shape": "box", "cog_level": "Understand", "title": "Data Structure: Binary Tree: ", "level": 1}, {"id": "4.6.1", "label": "Binary Tree", "group": "4", "shape": "ellipse", "cog_level": "Understand", "title": "Binary Tree: Binary Tree: A tree data structure in which each node has at most two children, commonly referred to as the left child and the right child.", "level": 2}, {"id": "4.6.4", "label": "Algorithm: Heapsort", "group": "4", "shape": "ellipse", "cog_level": "Understand", "title": "Algorithm: Heapsort: A comparison-based sorting algorithm that uses a binary heap data structure to sort elements in-place.", "level": 2}, {"id": "4.8", "label": "Balancing A Bst", "group": "4", "shape": "box", "cog_level": "Understand", "title": "Balancing A Bst: Process of ensuring that the height of a binary search tree remains balanced to maintain efficient search, insertion, and deletion operations.", "level": 1}, {"id": "4.8.2", "label": "Limitations", "group": "4", "shape": "ellipse", "cog_level": "Understand", "title": "Limitations: Constraints or drawbacks associated with binary search trees, such as the potential for degeneration into a linear data structure.", "level": 2}, {"id": "4.9", "label": "Amortized Analysis", "group": "4", "shape": "box", "cog_level": "Understand", "title": "Amortized Analysis: A method of analyzing the time complexity of algorithms over a sequence of operations, considering both expensive and inexpensive operations to provide an average performance guarantee.", "level": 1}], "edges": [{"from": "4", "to": "4.1", "title": ""}, {"from": "1", "to": "1.3", "title": ""}, {"from": "1.3", "to": "1.3.2", "title": ""}, {"from": "1.3", "to": "1.3.6", "title": ""}, {"from": "1.3", "to": "1.3.9", "title": ""}, {"from": "1.3", "to": "1.3.10", "title": ""}, {"from": "4.1", "to": "4.1.2", "title": ""}, {"from": "4.1", "to": "4.1.3", "title": ""}, {"from": "4", "to": "4.2", "title": ""}, {"from": "4.2", "to": "4.2.2", "title": ""}, {"from": "4.2", "to": "4.2.3", "title": ""}, {"from": "1.3", "to": "1.3.7", "title": ""}, {"from": "1.3", "to": "1.3.13", "title": ""}, {"from": "4.2", "to": "4.2.4", "title": ""}, {"from": "1", "to": "1.2", "title": ""}, {"from": "1.2", "to": "1.2.1", "title": ""}, {"from": "1.2.1", "to": "1.2.1.1", "title": ""}, {"from": "1.2.1", "to": "1.2.1.2", "title": ""}, {"from": "4", "to": "4.3", "title": ""}, {"from": "4.3", "to": "4.3.1", "title": ""}, {"from": "1.2.2", "to": "1.2.2.1", "title": ""}, {"from": "1.2", "to": "1.2.2", "title": ""}, {"from": "4.3", "to": "4.3.2", "title": ""}, {"from": "4", "to": "4.4", "title": ""}, {"from": "4.4", "to": "4.4.2", "title": ""}, {"from": "4.5", "to": "4.5.1", "title": ""}, {"from": "4", "to": "4.5", "title": ""}, {"from": "4.5", "to": "4.5.2", "title": ""}, {"from": "4.5.2", "to": "4.5.2.1", "title": ""}, {"from": "4", "to": "4.6", "title": ""}, {"from": "4.6", "to": "4.6.1", "title": ""}, {"from": "4.6", "to": "4.6.4", "title": ""}, {"from": "1.3", "to": "1.3.14", "title": ""}, {"from": "1.3.14", "to": "1.3.14.2", "title": ""}, {"from": "4.8", "to": "4.8.2", "title": ""}, {"from": "4", "to": "4.8", "title": ""}, {"from": "1.3.13", "to": "1.3.13.1", "title": ""}, {"from": "4", "to": "4.9", "title": ""}, {"from": "1.2", "to": "1.2.3", "title": ""}, {"from": "4.10", "to": "4.10.1", "title": ""}, {"from": "4", "to": "4.10", "title": ""}, {"from": "1.3.4", "to": "1.3.4.2", "title": ""}, {"from": "1.3", "to": "1.3.4", "title": ""}, {"from": "4.10", "to": "4.10.2", "title": ""}, {"from": "1.1", "to": "1.1.10", "title": ""}, {"from": "1", "to": "1.1", "title": ""}, {"from": "1.3", "to": "1.3.5", "title": ""}, {"from": "4.1", "to": "1.3", "title": "0.7918", "color": "grey", "width": 1, "shadow": false, "dashes": true}, {"from": "4.1", "to": "1.3.2", "title": "0.6996", "color": "grey", "width": 1, "shadow": false, "dashes": true}, {"from": "4.1", "to": "1.3.6", "title": "0.6731", "color": "grey", "width": 1, "shadow": false, "dashes": true}, {"from": "4.1", "to": "1.3.9", "title": "0.6696", "color": "grey", "width": 1, "shadow": false, "dashes": true}, {"from": "4.1", "to": "1.3.10", "title": "0.6975", "color": "grey", "width": 1, "shadow": false, "dashes": true}, {"from": "4.1.2", "to": "1.3.9", "title": "0.6778", "color": "grey", "width": 1, "shadow": false, "dashes": true}, {"from": "4.1.3", "to": "1.3.2", "title": "0.7403", "color": "grey", "width": 1, "shadow": false, "dashes": true}, {"from": "4.1.3", "to": "1.3.10", "title": "0.6548", "color": "grey", "width": 1, "shadow": false, "dashes": true}, {"from": "4.2", "to": "1.3", "title": "0.6593", "color": "grey", "width": 1, "shadow": false, "dashes": true}, {"from": "4.2.2", "to": "1.3.2", "title": "0.6554", "color": "grey", "width": 1, "shadow": false, "dashes": true}, {"from": "4.2.3", "to": "1.3.7", "title": "0.6615", "color": "grey", "width": 1, "shadow": false, "dashes": true}, {"from": "4.2.3", "to": "1.3.13", "title": "0.6678", "color": "grey", "width": 1, "shadow": false, "dashes": true}, {"from": "4.2.4", "to": "1.2", "title": "0.6813", "color": "grey", "width": 1, "shadow": false, "dashes": true}, {"from": "4.2.4", "to": "1.2.1", "title": "0.7235", "color": "grey", "width": 1, "shadow": false, "dashes": true}, {"from": "4.2.4", "to": "1.2.1.1", "title": "0.7017", "color": "grey", "width": 1, "shadow": false, "dashes": true}, {"from": "4.2.4", "to": "1.2.1.2", "title": "0.6595", "color": "grey", "width": 1, "shadow": false, "dashes": true}, {"from": "4.3", "to": "1.2", "title": "0.6691", "color": "grey", "width": 1, "shadow": false, "dashes": true}, {"from": "4.3", "to": "1.2.1", "title": "0.7078", "color": "grey", "width": 1, "shadow": false, "dashes": true}, {"from": "4.3.1", "to": "1.2.2.1", "title": "0.696", "color": "grey", "width": 1, "shadow": false, "dashes": true}, {"from": "4.3.2", "to": "1.3.6", "title": "0.7542", "color": "grey", "width": 1, "shadow": false, "dashes": true}, {"from": "4.3.2", "to": "1.3.10", "title": "0.6619", "color": "grey", "width": 1, "shadow": false, "dashes": true}, {"from": "4.4", "to": "1.3.6", "title": "0.6908", "color": "grey", "width": 1, "shadow": false, "dashes": true}, {"from": "4.4.2", "to": "1.3.6", "title": "0.8572", "color": "grey", "width": 1, "shadow": false, "dashes": true}, {"from": "4.5.1", "to": "1.2.2.1", "title": "0.7378", "color": "grey", "width": 1, "shadow": false, "dashes": true}, {"from": "4.5.2", "to": "1.3.13", "title": "0.7363", "color": "grey", "width": 1, "shadow": false, "dashes": true}, {"from": "4.5.2.1", "to": "1.3.13", "title": "0.7557", "color": "grey", "width": 1, "shadow": false, "dashes": true}, {"from": "4.6", "to": "1.3.13", "title": "0.7317", "color": "grey", "width": 1, "shadow": false, "dashes": true}, {"from": "4.6.1", "to": "1.3.13", "title": "0.6794", "color": "grey", "width": 1, "shadow": false, "dashes": true}, {"from": "4.6.4", "to": "1.3.14", "title": "0.8076", "color": "grey", "width": 1, "shadow": false, "dashes": true}, {"from": "4.6.4", "to": "1.3.14.2", "title": "0.6914", "color": "grey", "width": 1, "shadow": false, "dashes": true}, {"from": "4.8.2", "to": "1.3.13.1", "title": "0.6535", "color": "grey", "width": 1, "shadow": false, "dashes": true}, {"from": "4.9", "to": "1.2", "title": "0.6979", "color": "grey", "width": 1, "shadow": false, "dashes": true}, {"from": "4.9", "to": "1.2.3", "title": "0.6572", "color": "grey", "width": 1, "shadow": false, "dashes": true}, {"from": "4.10.1", "to": "1.3.4.2", "title": "0.8328", "color": "grey", "width": 1, "shadow": false, "dashes": true}, {"from": "4.10.2", "to": "1.1.10", "title": "0.6823", "color": "grey", "width": 1, "shadow": false, "dashes": true}, {"from": "4.10.2", "to": "1.3.5", "title": "0.6507", "color": "grey", "width": 1, "shadow": false, "dashes": true}], "courseId": ["4", "1"]}