{"nodes": [{"id": "1", "label": "Algorithms and Complexity", "group": "1", "shape": "circle", "cog_level": "", "title": "Algorithms and Complexity: "}, {"id": "1.1", "label": "Algorithmic Strategies", "group": "1", "shape": "box", "cog_level": "Understand", "title": "Algorithmic Strategies: Algorithmic Strategies covers various approaches and techniques used to design and analyze algorithms"}, {"id": "1.1.10", "label": "Heuristic: A* ", "group": "1", "shape": "ellipse", "cog_level": "Understand", "title": "Heuristic: A* : A popular search algorithm that efficiently finds the shortest path in a graph from a given start node to a target node."}, {"id": "1.1.11", "label": "Iterative", "group": "1", "shape": "ellipse", "cog_level": "Understand", "title": "Iterative: Algorithms that repeatedly apply a set of instructions or steps until a specific condition is met."}, {"id": "1.1.14", "label": "Recursive", "group": "1", "shape": "ellipse", "cog_level": "Understand", "title": "Recursive: Algorithms that solve problems by calling themselves with smaller input instances until a base case is reached."}, {"id": "1.1.16", "label": "Transform-and-Conquer/Reduction", "group": "1", "shape": "ellipse", "cog_level": "Understand", "title": "Transform-and-Conquer/Reduction: Techniques that transform a problem into a different form that is easier to solve, often by reducing it to a known problem or by applying a series of transformations."}, {"id": "1.1.2", "label": "Backtracking", "group": "1", "shape": "ellipse", "cog_level": "Understand", "title": "Backtracking: A systematic method for exploring all possible solutions to a problem by incrementally building candidates and backtracking when a dead-end is reached."}, {"id": "1.1.4", "label": "Brute-Force/Exhaustive Search", "group": "1", "shape": "ellipse", "cog_level": "Understand", "title": "Brute-Force/Exhaustive Search: A straightforward approach that systematically examines all possible solutions to find the optimal one."}, {"id": "1.1.6", "label": "Decrease-and-Conquer", "group": "1", "shape": "ellipse", "cog_level": "Understand", "title": "Decrease-and-Conquer: Algorithms that reduce a problem instance to a smaller instance of the same problem, solve the smaller instance, and then use the solution to solve the original problem."}, {"id": "1.1.7", "label": "Divide-and-Conquer", "group": "1", "shape": "ellipse", "cog_level": "Understand", "title": "Divide-and-Conquer: A problem-solving technique that breaks a problem into smaller subproblems, solves the subproblems recursively, and then combines the solutions to solve the original problem."}, {"id": "1.1.8", "label": "Dynamic Programming", "group": "1", "shape": "ellipse", "cog_level": "Understand", "title": "Dynamic Programming: A method for solving optimization problems by breaking them down into simpler subproblems and storing the solutions to avoid redundant calculations."}, {"id": "1.1.9", "label": "Greedy", "group": "1", "shape": "ellipse", "cog_level": "Understand", "title": "Greedy: An algorithmic paradigm that makes locally optimal choices at each step with the hope of finding a global optimum solution."}, {"id": "1.3", "label": "Fundamental Data Structures and Algorithms", "group": "1", "shape": "box", "cog_level": "", "title": "Fundamental Data Structures and Algorithms: including arrays, linked lists, trees, sorting and searching algorithms"}, {"id": "1.3.13", "label": "Trees: Binary, n-ary, Search", "group": "1", "shape": "ellipse", "cog_level": "Create", "title": "Trees: Binary, n-ary, Search: Trees are hierarchical data structures composed of nodes"}, {"id": "1.3.13.3", "label": "Huffman Coding", "group": "1", "shape": "square", "cog_level": "Create", "title": "Huffman Coding: A data compression algorithm used to encode data more efficiently by assigning variable-length codes to input characters"}, {"id": "1.3.14", "label": "Sorting Algorithms:", "group": "1", "shape": "ellipse", "cog_level": "Create", "title": "Sorting Algorithms:: Includes various techniques such as Selection Sort, Insertion Sort, Quicksort, Merge Sort, Heap Sort, Bucket Sort, Radix Sort, etc."}, {"id": "1.3.14.2", "label": "O(n log n) Sorting", "group": "1", "shape": "square", "cog_level": "Create", "title": "O(n log n) Sorting: Quicksort, Merge Sort, and Heap Sort, with a time complexity of O(n log n)."}, {"id": "1.3.20", "label": "Linear Programming", "group": "1", "shape": "ellipse", "cog_level": "Understand", "title": "Linear Programming: e.g., Simplex algorithm; Optimization method for maximizing or minimizing a linear objective function subject to linear equality and inequality constraints"}, {"id": "1.3.5", "label": "Graph Algorithms", "group": "1", "shape": "ellipse", "cog_level": "Create", "title": "Graph Algorithms: a set of techniques used to analyze and manipulate graphs"}, {"id": "1.3.5.1", "label": "Breadth-First Search", "group": "1", "shape": "square", "cog_level": "Create", "title": "Breadth-First Search: Connectivity, Shortest-Path"}, {"id": "1.3.5.4", "label": "Minimal Spanning Tree", "group": "1", "shape": "square", "cog_level": "Create", "title": "Minimal Spanning Tree: Prim\u2019s and Kruskal\u2019s algorithms"}, {"id": "17", "label": "Algorithm and Complexity", "group": "17", "shape": "circle", "cog_level": "Understand", "title": "Algorithm and Complexity: "}, {"id": "17.1", "label": "Algorithmic Techniques", "group": "17", "shape": "box", "cog_level": "Understand", "title": "Algorithmic Techniques: "}, {"id": "17.1.1", "label": "Recursion", "group": "17", "shape": "ellipse", "cog_level": "Understand", "title": "Recursion: A technique where a function calls itself in order to solve smaller instances of the same problem."}, {"id": "17.1.1.1", "label": "Divide and Conquer", "group": "17", "shape": "square", "cog_level": "Understand", "title": "Divide and Conquer: Divides a problem into smaller subproblems, solves each subproblem independently, and then combines the solutions."}, {"id": "17.1.1.1.2", "label": "Mergesort", "group": "17", "shape": "diamond", "cog_level": "Understand", "title": "Mergesort: A sorting algorithm that follows the divide and conquer strategy by recursively dividing the array into halves, sorting each half, and then merging the sorted halves."}, {"id": "17.1.1.2", "label": "Backtracking", "group": "17", "shape": "square", "cog_level": "Understand", "title": "Backtracking: A technique for systematically searching through all possible solutions to find the optimal one, often used in constraint satisfaction problems."}, {"id": "17.1.1.2.2", "label": "Recursive algorithm", "group": "17", "shape": "diamond", "cog_level": "Understand", "title": "Recursive algorithm: An algorithm that solves a problem by solving smaller instances of the same problem."}, {"id": "17.1.2", "label": "Dynamic Programming", "group": "17", "shape": "ellipse", "cog_level": "Understand", "title": "Dynamic Programming: A technique used to solve problems by breaking them down into smaller overlapping subproblems and solving each subproblem only once"}, {"id": "17.1.3", "label": "Greedy Algorithms", "group": "17", "shape": "ellipse", "cog_level": "Understand", "title": "Greedy Algorithms: A class of algorithms that make locally optimal choices at each step with the hope of finding a global optimum solution."}, {"id": "17.1.3.2", "label": "Exchange Arguments", "group": "17", "shape": "square", "cog_level": "Understand", "title": "Exchange Arguments: A technique used in proving the optimality of greedy algorithms by showing that any optimal solution must have certain properties."}, {"id": "17.1.3.4", "label": "Huffman Codes", "group": "17", "shape": "square", "cog_level": "Understand", "title": "Huffman Codes: A method of data compression that assigns variable-length codes to input characters, with shorter codes assigned to more frequently occurring characters."}, {"id": "17.2", "label": "Graph Algorithms", "group": "17", "shape": "box", "cog_level": "Understand", "title": "Graph Algorithms: Graph algorithms are a fundamental part of computer science, focusing on analyzing and manipulating graphs, which consist of nodes (vertices) connected by edges."}, {"id": "17.2.1", "label": "Spanning trees", "group": "17", "shape": "ellipse", "cog_level": "Understand", "title": "Spanning trees: A subgraph of a graph that includes all the vertices of the original graph with the minimum possible number of edges."}, {"id": "17.2.1.1", "label": "Kruskal\u2019s algorithm", "group": "17", "shape": "square", "cog_level": "Understand", "title": "Kruskal\u2019s algorithm: A greedy algorithm for finding the minimum spanning tree (MST) of a connected, weighted graph."}, {"id": "17.2.1.2", "label": "Jarn\u00edk\u2019s algorithm", "group": "17", "shape": "square", "cog_level": "Understand", "title": "Jarn\u00edk\u2019s algorithm: Another greedy algorithm for finding the minimum spanning tree (MST) of a connected, weighted graph."}, {"id": "17.2.2", "label": "Shortest Paths", "group": "17", "shape": "ellipse", "cog_level": "Understand", "title": "Shortest Paths: Finding the shortest path between two vertices in a weighted graph, where the path length is the sum of the weights of its edges."}, {"id": "17.2.2.1", "label": "Dijkstra\u2019s algorithm", "group": "17", "shape": "square", "cog_level": "Understand", "title": "Dijkstra\u2019s algorithm: A greedy algorithm for finding the shortest path from a single source vertex to all other vertices in a weighted graph with non-negative edge weights."}, {"id": "17.2.4", "label": "Graph Applications", "group": "17", "shape": "ellipse", "cog_level": "Understand", "title": "Graph Applications: "}, {"id": "17.3", "label": "Linear Programming", "group": "17", "shape": "box", "cog_level": "Understand", "title": "Linear Programming: "}, {"id": "17.3.1", "label": "LP Introduction", "group": "17", "shape": "ellipse", "cog_level": "Understand", "title": "LP Introduction: Introduction to linear programming, a method for optimizing a linear objective function subject to linear equality and inequality constraints."}], "edges": [{"from": "17", "to": "17.1", "title": ""}, {"from": "1", "to": "1.1", "title": ""}, {"from": "17.1", "to": "17.1.1", "title": ""}, {"from": "1.1", "to": "1.1.11", "title": ""}, {"from": "1.1", "to": "1.1.14", "title": ""}, {"from": "17.1.1", "to": "17.1.1.1", "title": ""}, {"from": "1.1", "to": "1.1.6", "title": ""}, {"from": "1.1", "to": "1.1.7", "title": ""}, {"from": "1.1", "to": "1.1.16", "title": ""}, {"from": "17.1.1.1", "to": "17.1.1.1.2", "title": ""}, {"from": "1.3.14", "to": "1.3.14.2", "title": ""}, {"from": "1.3", "to": "1.3.14", "title": ""}, {"from": "1", "to": "1.3", "title": ""}, {"from": "17.1.1", "to": "17.1.1.2", "title": ""}, {"from": "1.1", "to": "1.1.2", "title": ""}, {"from": "1.1", "to": "1.1.4", "title": ""}, {"from": "17.1.1.2", "to": "17.1.1.2.2", "title": ""}, {"from": "17.1", "to": "17.1.2", "title": ""}, {"from": "1.1", "to": "1.1.8", "title": ""}, {"from": "17.1", "to": "17.1.3", "title": ""}, {"from": "1.1", "to": "1.1.9", "title": ""}, {"from": "17.1.3", "to": "17.1.3.2", "title": ""}, {"from": "17.1.3", "to": "17.1.3.4", "title": ""}, {"from": "1.3.13", "to": "1.3.13.3", "title": ""}, {"from": "1.3", "to": "1.3.13", "title": ""}, {"from": "17", "to": "17.2", "title": ""}, {"from": "1.3", "to": "1.3.5", "title": ""}, {"from": "17.2.1", "to": "17.2.1.1", "title": ""}, {"from": "17.2", "to": "17.2.1", "title": ""}, {"from": "1.3.5", "to": "1.3.5.4", "title": ""}, {"from": "17.2.1", "to": "17.2.1.2", "title": ""}, {"from": "17.2.2", "to": "17.2.2.1", "title": ""}, {"from": "17.2", "to": "17.2.2", "title": ""}, {"from": "1.1", "to": "1.1.10", "title": ""}, {"from": "1.3.5", "to": "1.3.5.1", "title": ""}, {"from": "17.2", "to": "17.2.4", "title": ""}, {"from": "17.3", "to": "17.3.1", "title": ""}, {"from": "17", "to": "17.3", "title": ""}, {"from": "1.3", "to": "1.3.20", "title": ""}, {"from": "17.1", "to": "1.1", "title": "0.7446", "color": "grey", "width": 1, "shadow": false, "dashes": true}, {"from": "17.1.1", "to": "1.1.11", "title": "0.6673", "color": "grey", "width": 1, "shadow": false, "dashes": true}, {"from": "17.1.1", "to": "1.1.14", "title": "0.7538", "color": "grey", "width": 1, "shadow": false, "dashes": true}, {"from": "17.1.1.1", "to": "1.1.6", "title": "0.7368", "color": "grey", "width": 1, "shadow": false, "dashes": true}, {"from": "17.1.1.1", "to": "1.1.7", "title": "0.8952", "color": "grey", "width": 1, "shadow": false, "dashes": true}, {"from": "17.1.1.1", "to": "1.1.16", "title": "0.682", "color": "grey", "width": 1, "shadow": false, "dashes": true}, {"from": "17.1.1.1.2", "to": "1.3.14.2", "title": "0.6823", "color": "grey", "width": 1, "shadow": false, "dashes": true}, {"from": "17.1.1.2", "to": "1.1.2", "title": "0.8119", "color": "grey", "width": 1, "shadow": false, "dashes": true}, {"from": "17.1.1.2", "to": "1.1.4", "title": "0.7202", "color": "grey", "width": 1, "shadow": false, "dashes": true}, {"from": "17.1.1.2.2", "to": "1.1.6", "title": "0.672", "color": "grey", "width": 1, "shadow": false, "dashes": true}, {"from": "17.1.1.2.2", "to": "1.1.7", "title": "0.6795", "color": "grey", "width": 1, "shadow": false, "dashes": true}, {"from": "17.1.1.2.2", "to": "1.1.11", "title": "0.706", "color": "grey", "width": 1, "shadow": false, "dashes": true}, {"from": "17.1.1.2.2", "to": "1.1.14", "title": "0.8145", "color": "grey", "width": 1, "shadow": false, "dashes": true}, {"from": "17.1.2", "to": "1.1.8", "title": "0.8874", "color": "grey", "width": 1, "shadow": false, "dashes": true}, {"from": "17.1.3", "to": "1.1.4", "title": "0.6539", "color": "grey", "width": 1, "shadow": false, "dashes": true}, {"from": "17.1.3", "to": "1.1.9", "title": "0.878", "color": "grey", "width": 1, "shadow": false, "dashes": true}, {"from": "17.1.3.2", "to": "1.1.9", "title": "0.6658", "color": "grey", "width": 1, "shadow": false, "dashes": true}, {"from": "17.1.3.4", "to": "1.3.13.3", "title": "0.9001", "color": "grey", "width": 1, "shadow": false, "dashes": true}, {"from": "17.2", "to": "1.3.5", "title": "0.6818", "color": "grey", "width": 1, "shadow": false, "dashes": true}, {"from": "17.2.1.1", "to": "1.3.5.4", "title": "0.766", "color": "grey", "width": 1, "shadow": false, "dashes": true}, {"from": "17.2.1.2", "to": "1.3.5.4", "title": "0.7131", "color": "grey", "width": 1, "shadow": false, "dashes": true}, {"from": "17.2.2.1", "to": "1.1.10", "title": "0.6877", "color": "grey", "width": 1, "shadow": false, "dashes": true}, {"from": "17.2.2.1", "to": "1.3.5.1", "title": "0.6596", "color": "grey", "width": 1, "shadow": false, "dashes": true}, {"from": "17.2.4", "to": "1.3.5", "title": "0.7044", "color": "grey", "width": 1, "shadow": false, "dashes": true}, {"from": "17.3.1", "to": "1.1.8", "title": "0.6925", "color": "grey", "width": 1, "shadow": false, "dashes": true}, {"from": "17.3.1", "to": "1.3.20", "title": "0.7383", "color": "grey", "width": 1, "shadow": false, "dashes": true}], "courseId": ["17", "1"]}