courseid,chapterid,sectionid,unitid,subunitid,-,topic,-,chapter,-,Cognitive level,-,description_of_topic,-
15,,,,,,Software Engineering,,,,,,,
15,1,,,,,Teamwork,,Teamwork,,,,,
15,1,1,,,,Effective communication,,Teamwork,,Evaluate,,"involves clear articulation of goals, active listening, constructive feedback, transparency, conflict resolution, and adapting communication styles",
15,1,2,,,,"Common causes of team conflict, and approaches for conflict resolution",,Teamwork,,Evaluate,,"include poor communication and conflicting goals, with resolution approaches involving communication and compromise.",
15,1,3,,,,Cooperative programming,,Teamwork,,Evaluate,,"Pair programming, Code review",
15,1,4,,,,Roles and responsibilities in a software team,,Teamwork,,Evaluate,,"Advantages of teamwork, Risks and complexity of such collaboration",
15,1,5,,,,Team processes,,Teamwork,,Evaluate,,"Responsibilities for tasks, effort estimation, meeting structure, work schedule ",
15,1,6,,,,Importance of team diversity,,Teamwork,,Evaluate,,"is crucial for bringing different perspectives and skills to the table, enhancing problem-solving and creativity.",
15,1,7,,,,"Interfacing with stakeholders, as a team",,Teamwork,,Understand,,"Management & other non-technical teams, Customers, Users",
15,1,8,,,,Risks ,,Teamwork,,Understand,,"associated with physical, distributed, hybrid and virtual teams",
15,2,,,,,Tools and Environments,,Tools and Environments,,,,,
15,2,1,,,,Software configuration management and version control,,Tools and Environments,,Evaluate,,"are essential for tracking changes, managing codebase versions, and ensuring collaboration among team members.",
15,2,2,,,,Release management,,Tools and Environments,,Understand,,"involves planning, scheduling, and deploying software updates or new versions efficiently and reliably.",
15,2,3,,,,Testing tools including static and dynamic analysis tools,,Tools and Environments,,Understand,,"including static analysis for code quality and dynamic analysis for runtime behavior, help ensure software reliability and quality.",
15,2,4,,,,Software process automation,,Tools and Environments,,Understand,,"streamlines repetitive tasks, such as building, testing, and deployment, to improve efficiency and consistency.",
15,2,5,,,,Design and communication tools,,Tools and Environments,,Understand,,"(docs, diagrams, common forms of design diagrams like UML)",
15,2,6,,,,Tool integration concepts and mechanisms,,Tools and Environments,,Understand,,enable seamless communication and data exchange between different tools and environments used in the development process.,
15,2,7,,,,Use of modern IDE facilities ,,Tools and Environments,,Understand,,"debugging, refactoring, searching/indexing, etc.",
15,3,,,,,Product Requirements ,,Product Requirements ,,Apply,,,
15,3,1,,,,Describe functional requirements,,Product Requirements ,,Apply,,"for example, use cases or user stories",
15,3,2,,,,Properties of requirements ,,Product Requirements ,,Apply,,"(docs, diagrams, common forms of design diagrams like UML)",
15,3,3,,,,Requirements elicitation,,Product Requirements ,,Apply,,is the process of gathering and defining the needs and expectations of stakeholders for a software system.,
15,3,4,,,,Non-functional requirements,,Product Requirements ,,Apply,,"for example, security, usability, or performance (aka Quality Attributes) ",
15,3,6,,,,Risk identification and management,,Product Requirements ,,Apply,,involves identifying and prioritizing potential project risks,
15,3,7,,,,Communicating and/or formalizing requirement specifications,,Product Requirements ,,Apply,,entails documenting and sharing the functional and non-functional needs of the project with stakeholders and the development team.,
15,4,,,,,Software Design,,Software Design,,,,,
15,4,1,,,,System design principles,,Software Design,,Understand,,Levels of abstraction (e.g. architectural design and detailed design); Separation of concerns; Information hiding; Coupling and cohesion ,
15,4,2,,,,Softwive architecture,,Software Design,,Understand,,"Design paradigms; Standard architectures (e.g. client-server, n-layer, pipes-and-filters, Model View Controller) ; Identifying component boundaries and dependencies",
15,4,3,,,,Programming in the large vs.programming in the small,,Software Design,,Understand,,"Programming in the large deals with designing and organizing large-scale systems and components. Programming in the small focuses on individual code quality, readability, and maintainability.",
15,4,4,,,,"Code smells and other indications of code quality, distinct from correctness.",,Software Design,,Understand,,"help identify aspects of code quality beyond mere correctness, such as readability, maintainability, and scalability.",
15,4,5,,,,APl design principles,,Software Design,,Apply,,"Consistency, Composability, Documenting contracts, Expandability, Error reporting",
15,4,6,,,,Identifying and codifying data invariants and time invariants,,Software Design,,Apply,,ensures consistency and integrity of data and system behavior over time.,
15,4,7,,,,Structural and behavioral models of software designs,,Software Design,,Apply,,"Structural models depict the static aspects of software design, such as class diagrams or entity-relationship diagrams. Behavioral models represent the dynamic aspects of software",
15,4,8,,,,Data design,,Software Design,,Apply,,"Data structures, Storage systems, Cross reference Information Management, particularly IM/Data Modeling",
15,4,9,,,,Requirement traceability,,Software Design,,Apply,,Understanding which requirements are satisfied by a design,
15,5,,,,,Software Construction,,Software Construction,,Apply,,,
15,5,1,,,,Practical small-scale testing,,Software Construction,,Apply,,"Unit testing ,Test-driven developmen",
15,5,2,,,,Documentation,,Software Construction,,Apply,,"Interface documentation, Implementation documentation",
15,5,3,,,,Coding Style,,Software Construction,,Apply,,"Style guides, Commenting, Naming ",
15,5,4,,,,“Best Practices” for coding,,Software Construction,,Apply,,"techniques, idioms/patterns, mechanisms for building quality ",
15,5,5,,,,Debugging,,Software Construction,,Apply,,involves identifying and resolving errors or defects in software code to ensure proper functionality.,
15,5,6,,,,Use of libraries and frameworks developed by others,,Software Construction,,Apply,,"streamlines development by leveraging pre-existing, tested, and optimized code solutions.",
15,6,,,,,Software Verification and Validation,,Software Verification and Validation,,Understand,,,
15,6,1,,,,Verification and validation concepts,,Software Verification and Validation,,Understand,,Verification: Are we building the thing right? Validation: Did we build the right thing?,
15,6,2,,,,Why testing matters,,Software Verification and Validation,,Understand,,Does the component remain functional as the code evolves? ,
15,6,3,,,,Testing objectives,,Software Verification and Validation,,Understand,,"Usability, Reliability, Conformance to specification, Performance, Security ",
15,6,4,,,,Test kinds,,Software Verification and Validation,,Understand,,"Unit, Integration, Validation, System ",
15,6,5,,,,Stylistic differences between tests and production code,,Software Verification and Validation,,Understand,,DAMP vs. DRY,
15,6,6,,,,Test planning and generation,,Software Verification and Validation,,Understand,,"Test case generation, Test coverage, Test data and inputs",
15,6,7,,,,Test development (see SDF),,Software Verification and Validation,,Understand,,"Test-driven development , Object oriented testing, mocking, and dependency injection; Black-box and white-box testing techniques; Test tooling, including code coverage, static analysis, and fuzzing",
15,6,8,,,,Verification and validation in the development cycle,,Software Verification and Validation,,Understand,,"Code reviews; Test automation, including automation of tooling; Pre-commit and post-commit testing; Trade-offs between test coverage and throughput/latency of testing; Defect tracking and prioritization",
15,6,9,,,,Domain specific verification and validation challenges,,Software Verification and Validation,,Understand,,"Performance testing and benchmarking; Asynchrony, parallelism, and concurrency; Safety-critical; Numeric ",
15,7,,,,,Refactoring and Code Evolution ,,Refactoring and Code Evolution ,,Understand,,,
15,7,1,,,,Hyrum's Law,,Refactoring and Code Evolution ,,Understand,,The Law of Implicit Interfaces,
15,7,2,,,,Backward Compatibility,,Refactoring and Code Evolution ,,Understand,,Backward compatibility needs to be evaluated in terms of provider + consumer(s),
15,7,3,,,,Refactoring,,Refactoring and Code Evolution ,,Understand,,"Standard refactoring patterns (rename, inline, outline, etc.); Use of refactoring tools in IDE; Application of static-analysis tools",
15,7,4,,,,Versioning,,Refactoring and Code Evolution ,,Understand,,Semantic Versioning; Trunk-based development ,
15,8,,,,,Software Reliability,,Software Reliability,,Understand,,,
15,8,1,,,,Concept of reliability,,Software Reliability,,Understand,,"as probability of failure or mean time between failures, and faults as cause of failures ",
15,8,2,,,,Identifying reliability requirements,,Software Reliability,,Understand,,involves determining the expected level of reliability and availability for a software system.,
15,8,3,,,,Software failures vs. defect injection/detection ,,Software Reliability,,Understand,,refer to unexpected behavior or malfunctions in the software,
15,8,4,,,,"Software reliability, system reliability and failure behavior",,Software Reliability,,Understand,,,
15,8,5,,,,"Defect injection and removal cycle, and different approaches for defect removal ",,Software Reliability,,Understand,,,
15,8,6,,,, “error budget” vs. “error-free” approach,,Software Reliability,,Understand,,"Compare the “error budget” approach treliability with the “error-free” approach, and identify domains where each is relevant",