courseid,chapterid,sectionid,unitid,subunitid,-,topic,-,chapter,-,Cognitive level,-,description_of_topic,-
5,,,,,,Foundations of Programming Languages,,,,Create,,,
5,1,,,,,Object-Oriented Programming,,Object-Oriented Programming,,Create,,Object-oriented programming (OOP) is a programming paradigm that organizes software design around objects and their interactions.,
5,1,1,,,,Object-oriented design,,Object-Oriented Programming,,Create,,Object-oriented design is a software design paradigm that focuses on modeling real-world entities as objects,
5,1,1,1,,,Decomposition into bjects carrying state and having behavior,,Object-Oriented Programming,,Create,,,
5,1,1,2,,,Class-hierarchy design for modeling,,Object-Oriented Programming,,Create,,,
5,1,2,,,,Definition of classes,,Object-Oriented Programming,,Create,,"fields, methods, and constructors",
5,1,3,,,,"Subclasses, inheritance (including multiple inheritance), and method overriding",,Object-Oriented Programming,,Create,,,
5,1,4,,,,Dynamic dispatch,,Object-Oriented Programming,,Create,,definition of method-call,
5,1,5,,,,Exception handling,,Object-Oriented Programming,,Create,,Exception handling is a mechanism used to manage and respond to exceptional conditions or errors that occur during program execution.,
5,1,6,,,,Object-oriented idioms for encapsulation,,Object-Oriented Programming,,Create,,,
5,1,6,1,,,"Privacy, data hiding, and visibility of class members",,Object-Oriented Programming,,Create,,,
5,1,6,2,,,Interfaces revealing only method signatures,,Object-Oriented Programming,,Create,,,
5,1,6,3,,,"Abstract base classes, traits and mixins",,Object-Oriented Programming,,Create,,,
5,1,7,,,,Dynamic vs static properties,,Object-Oriented Programming,,Create,,,
5,1,8,,,,Composition vs inheritance,,Object-Oriented Programming,,Create,,,
5,1,9,,,,Subtyping,,Object-Oriented Programming,,Create,,a subtype is a type that is related to another type (called the supertype) by some form of specialization or refinement.,
5,1,9,1,,,Subtype polymorphism; implicit upcasts in typed languages,,Object-Oriented Programming,,Create,,,
5,1,9,2,,,Notion of behavioral replacement: subtypes acting like supertypes,,Object-Oriented Programming,,Create,,,
5,1,9,3,,,Relationship between subtyping and inheritance,,Object-Oriented Programming,,Create,,,
5,1,9,4,,,"Collection classes, iterators, and other common library components",,Object-Oriented Programming,,Create,,,
5,2,,,,,Functional Programming,,Functional Programming,,Create,,Functional programming is a programming paradigm that treats computation as the evaluation of mathematical functions and avoids changing-state and mutable data.,
5,2,1,,,,Lambda expressions and evaluation,,Functional Programming,,Create,,,
5,2,1,1,,,Variable binding and scope rules,,Functional Programming,,Create,,,
5,2,1,2,,,Parameter passing,,Functional Programming,,Create,,,
5,2,1,3,,,Nested lambda expressions and reduction order,,Functional Programming,,Create,,,
5,2,2,,,,Effect-free programming,,Functional Programming,,Create,,,
5,2,2,1,,,"Function calls have nside effects, facilitating compositional reasoning",,Functional Programming,,Create,,,
5,2,2,2,,,Immutable variables and data copying vs. reduction,,Functional Programming,,Create,,,
5,2,2,3,,,Use of recursion vs. loops vs. pipelining (map/reduce),,Functional Programming,,Create,,,
5,2,3,,,,"Processing structured data (e.g., trees) via functions with cases for each data variant",,Functional Programming,,Create,,,
5,2,3,1,,,Functions defined over compound data in terms of functions applied tthe constituent pleces,,Functional Programming,,Create,,,
5,2,3,2,,,Persistent data structures,,Functional Programming,,Create,,,
5,2,4,,,,Using higher-order functions,,Functional Programming,,Create,,"taking, returning, and storing functions",
5,2,5,,,,Function closures,,Functional Programming,,Understand,,functions using variables in the enclosing lexical environment,
5,2,5,1,,,Basic meaning and definition,,Functional Programming,,Understand,,creating closures at run-time by capturing the environment,
5,2,5,2,,,Canonical idioms,,Functional Programming,,Understand,,"call-backs, arguments titerators, reusable code via function arguments",
5,2,5,3,,,Using a closure tencapsulate data in its environment,,Functional Programming,,Understand,,,
5,2,5,4,,,Lazy versus eager evaluation,,Functional Programming,,Understand,,,
5,2,6,,,,Defining and implementing functions ,,Functional Programming,,Understand,,"Defining and implementing functions that can accept a function as a parameter, be combined with another function, or return a function.",
5,3,,,,,Logic Programming,,Logic Programming,,,,"Logic programming is a programming paradigm based on formal logic, where programs are expressed as sets of logical statements or rules that define relationships and constraints between objects. ",
5,3,1,,,,Universal vs.existential quantifiers,,Logic Programming,,Understand,,,
5,3,2,,,,First order predicate logic vs. higher order logic,,Logic Programming,,Understand,,,
5,3,3,,,,Expressing complex relations using logical connectives and simpler relations,,Logic Programming,,Understand,,,
5,3,4,,,,"Definitions of Horn clause, facts, goals, and subgoals",,Logic Programming,,Understand,,,
5,3,5,,,,Unification and unification algorithm; unification vs. assertion vs expression evaluation,,Logic Programming,,Understand,,,
5,3,6,,,,Mixing relations with functions,,Logic Programming,,Understand,,,
5,3,7,,,,"Cuts, backtracking and non-determinism",,Logic Programming,,Understand,,,
5,3,8,,,,Closed-world vs. open-world assumptions,,Logic Programming,,Understand,,,
5,4,,,,,Scripting,,Scripting,,,,Scripting involves writing scripts or programs that automate tasks by executing a series of commands or instructions in a particular scripting language. ,
5,4,1,,,,"Divide, combine, conquer",,Scripting,,Create,,"involves breaking down a problem into smaller, more manageable subproblems, solving each subproblem independently, and then combining the solutions to obtain the final result.",
5,4,2,,,,Fork,,Scripting,,Create,,"""fork"" refers to the creation of a new process (child process) from an existing process (parent process). ",
5,4,3,,,,Error/exception handling,,Scripting,,Create,,"Error handling involves detecting, reporting, and responding to errors or exceptional conditions that occur during program execution. ",
5,4,4,,,,I/redirection,,Scripting,,Create,,I/O redirection is a feature that allows the input and output streams of a program to be redirected from their default sources or destinations to other sources or destinations. ,
5,4,5,,,,System commands,,Scripting,,Create,,"System commands are commands or programs provided by the operating system or shell environment that perform various system-level tasks, such as managing files, processes, and system configuration.",
5,4,6,,,,Environment variables,,Scripting,,Create,,Environment variables are variables that are part of the operating system's environment and are accessible to all programs running on the system. ,
5,4,7,,,,File test operators,,Scripting,,Create,,"File test operators are operators used in scripting languages to test various attributes or properties of files, such as existence, type, permissions, and size.",
5,4,8,,,,Data structures,,Scripting,,Create,,Data structures are structures or formats used to organize and store data efficiently. ,
5,4,8,1,,,Arrays and lists,,Scripting,,Create,,"Arrays and lists are ordered collections of elements, where elements can be accessed by their index or position in the collection. ",
5,4,8,2,,,Slices,,Scripting,,Create,,Slices are a feature found in some programming languages that allow you to extract a contiguous subset of elements from an array or list.,
5,4,8,3,,,List Comprehensions,,Scripting,,Create,,List comprehensions are a concise way to create lists in some programming languages by applying an expression to each element of an iterable and filtering the results based on a condition.,
5,4,9,,,,Regular expressions,,Scripting,,Create,,Regular expressions are patterns used to match and manipulate text strings.,
5,4,10,,,,Dynamic typing,,Scripting,,Create,,Dynamic typing is a feature of some programming languages where variables are not bound to a specific data type at compile time but can instead hold values of any type during runtime.,
5,4,11,,,,Function declarations,,Scripting,,Create,,Function declarations define named blocks of code that can be called or invoked to perform a specific task.,
5,4,12,,,,Processes and threads,,Scripting,,Create,,Processes and threads are units of execution in a computer system.,
5,4,13,,,,Code objects,,Scripting,,Create,,Code objects are objects that represent compiled code in memory.,
5,5,,,,,Event-driven and Reactive Programming ,,Event-driven and Reactive Programming ,,Create,,Event-driven and reactive programming are two programming paradigms that focus on handling and responding to events or changes in a system.,
5,5,1,,,,Procedural programming vs. reactive programming: advantages of reactive programming in capturing events,,Event-driven and Reactive Programming ,,Create,,,
5,5,2,,,,"Components of reactive programming: event-source, event signals, listeners and dispatchers, event objects, adapters, event-handlers",,Event-driven and Reactive Programming ,,Create,,,
5,5,3,,,,Behavior model of event-based programming,,Event-driven and Reactive Programming ,,Create,,,
5,5,4,,,,"Canonical uses such as GUls, mobile devices, robots, servers",,Event-driven and Reactive Programming ,,Create,,,
5,5,5,,,,Reactive programs as state transition system,,Event-driven and Reactive Programming ,,Create,,,
5,5,6,,,,Using a reactive framework,,Event-driven and Reactive Programming ,,Create,,,
5,5,6,1,,,Defining event handlers/listeners,,Event-driven and Reactive Programming ,,Create,,,
5,5,6,2,,,Parameterization of event senders and event arguments,,Event-driven and Reactive Programming ,,Create,,,
5,5,6,3,,,Externally-generated events and program-generated events,,Event-driven and Reactive Programming ,,Create,,,
5,5,7,,,,"Separation of model, view, and controller",,Event-driven and Reactive Programming ,,Create,,,
5,6,,,,,Parallel and Distributed Computing ,,Parallel and Distributed Computing ,,,,Parallel and distributed computing are two related but distinct approaches to leveraging multiple computing resources to solve computational tasks.,
5,6,1,,,,Safety and liveness,,Parallel and Distributed Computing ,,Create,,"Safety ensures that undesirable states or behaviors do not occur, while liveness ensures that desirable states or behaviors eventually occur.",
5,6,1,1,,,Race conditions,,Parallel and Distributed Computing ,,Create,,Occur when the outcome of a program depends on the relative timing or interleaving of multiple concurrent executions.,
5,6,1,2,,,Dependencies/preconditions,,Parallel and Distributed Computing ,,Create,,Conditions or requirements that must be satisfied before a certain operation can be performed.,
5,6,1,3,,,Fault models,,Parallel and Distributed Computing ,,Create,,Models that describe the types of faults or failures that can occur in a system.,
5,6,1,4,,,Termination,,Parallel and Distributed Computing ,,Create,,Ensures that a program eventually halts or completes its execution.,
5,6,2,,,,Parallel programming paradigms,,Parallel and Distributed Computing ,,Create,,"Approaches or models for writing parallel programs, such as shared-memory multiprocessing, message passing, and data parallelism.",
5,6,2,1,,,Actor models,,Parallel and Distributed Computing ,,Create,,A programming paradigm where concurrent entities (actors) communicate via message passing.,
5,6,2,2,,,Task,,Parallel and Distributed Computing ,,Create,,A unit of work or computation that can be executed concurrently with other tasks.,
5,6,2,3,,,Message passing,,Parallel and Distributed Computing ,,Create,,Communication mechanism where processes or threads exchange messages to synchronize and share data.,
5,6,2,4,,,Partitioned global address space,,Parallel and Distributed Computing ,,Create,,"A parallel programming model where each processing unit has its own memory space, but can access data in the global address space.",
5,6,2,5,,,Procedural and reactive models,,Parallel and Distributed Computing ,,Create,,"Procedural models define a sequence of steps to be executed, while reactive models respond to external stimuli or events.",
5,6,2,6,,,synchronous/asynchronous,,Parallel and Distributed Computing ,,Create,,"Synchronous operations block until completion, while asynchronous operations allow the program to continue executing while the operation completes in the background.",
5,6,2,7,,,programming absractions,,Parallel and Distributed Computing ,,Create,,"Higher-level constructs or APIs that simplify parallel programming, such as futures, promises, and async/await.",
5,6,2,8,,,Data parallelism,,Parallel and Distributed Computing ,,Create,,Parallelization technique where the same operation is applied to multiple data elements concurrently.,
5,6,3,,,,Semantics,,Parallel and Distributed Computing ,,Create,,The meaning or interpretation of a program's behavior or execution.,
5,6,3,1,,,Commutativity,,Parallel and Distributed Computing ,,Create,,Property where the order of operations does not affect the result.,
5,6,3,2,,,Ordering,,Parallel and Distributed Computing ,,Create,,Establishing a total or partial order among operations or events.,
5,6,3,3,,,Independence,,Parallel and Distributed Computing ,,Create,,Property where the execution of one operation does not affect the outcome of another operation.,
5,6,3,4,,,Consistency,,Parallel and Distributed Computing ,,Create,,Ensures that concurrent executions produce results that are equivalent to some serial execution.,
5,6,3,5,,,Atomicity,,Parallel and Distributed Computing ,,Create,,Property where a sequence of operations appears indivisible or all-or-nothing.,
5,6,3,6,,,Consensus,,Parallel and Distributed Computing ,,Create,,Agreement among multiple processes on a single value or decision.,
5,6,4,,,,Execution control,,Parallel and Distributed Computing ,,Create,,"Mechanisms for controlling the execution of concurrent operations, such as locks, synchronization primitives, and barriers.",
5,6,4,1,,,Locks,,Parallel and Distributed Computing ,,Create,,Synchronization mechanism used to restrict access to shared resources.,
5,6,4,2,,,Async await,,Parallel and Distributed Computing ,,Create,,"Language feature for asynchronous programming, where functions can pause execution until asynchronous operations complete.",
5,6,4,3,,,Promises,,Parallel and Distributed Computing ,,Create,,Abstraction for representing asynchronous operations and their results.,
5,6,5,,,,Communication and coordination,,Parallel and Distributed Computing ,,Create,,Techniques for managing communication and synchronization between concurrent processes or threads.,
5,6,5,1,,,Message-passing,,Parallel and Distributed Computing ,,Create,,A communication paradigm in concurrent programming where processes or threads communicate by sending and receiving messages.,
5,6,5,2,,,Shared memory,,Parallel and Distributed Computing ,,Create,,Another communication paradigm where multiple processes or threads share a common address space,
5,6,5,3,,,cobegin-coend,,Parallel and Distributed Computing ,,Create,,A construct used in concurrent programming to denote the beginning and end of a parallel block of code.,
5,6,5,4,,,Monitors,,Parallel and Distributed Computing ,,Create,,A synchronization construct used to control access to shared resources in concurrent programming.,
5,6,5,5,,,Channels,,Parallel and Distributed Computing ,,Create,,Communication primitives for exchanging messages between concurrent entities.,
5,6,5,6,,,Threads,,Parallel and Distributed Computing ,,Create,,Lightweight units of execution that can run concurrently within a process.,
5,6,5,7,,,Guards,,Parallel and Distributed Computing ,,Create,,Conditions or predicates that control the execution of guarded blocks of code in concurrent systems.,
5,6,6,,,,Futures,,Parallel and Distributed Computing ,,Understand,,Futures are a programming abstraction commonly used in concurrent and asynchronous programming to represent the result of an asynchronous operation that hasn't completed yet.,
5,6,7,,,,"Language support for data parallelism such as forall, map/reduce",,Parallel and Distributed Computing ,,Understand,,,
5,6,8,,,,Loop unrolling,,Parallel and Distributed Computing ,,Understand,,,
5,6,9,,,,Effect of memory-consistency models on language semantics and correct code generation,,Parallel and Distributed Computing ,,Understand,,,
5,6,10,,,,Representational State Transfer Application,,Parallel and Distributed Computing ,,Understand,,,
5,6,11,,,,Programming Interfaces (REST APIs),,Parallel and Distributed Computing ,,Understand,,,
5,6,12,,,,"Technologies and approaches: cloud computing, high performance computing, quantum computing, ubiquitous computing",,Parallel and Distributed Computing ,,Understand,,,
5,6,13,,,,Overheads of message passing,,Parallel and Distributed Computing ,,Understand,,,
5,6,14,,,,Granularity of program for efficient exploitation of concurrency.,,Parallel and Distributed Computing ,,Understand,,,
5,6,15,,,,Concurrency and other programming paradigms,,Parallel and Distributed Computing ,,Understand,,"e.g., functional",
5,7,,,,,Type Systems,,Type Systems,,Create,,Type systems are a fundamental concept in programming languages and serve as a mechanism for classifying and enforcing the properties of data and expressions within a program.,
5,7,1,,,,A type as a set of values together with a set of operations,,Type Systems,,Create,,,
5,7,1,1,,,Primitive types ,,Type Systems,,Create,,"e.g., numbers, Booleans",
5,7,1,2,,,Compound types built from other types,,Type Systems,,Create,,"(e.g., records, unions, arrays, lists, functions, references) using set operations",
5,7,2,,,,"Association of types tvariables, arguments, results, and fields",,Type Systems,,Create,,,
5,7,3,,,,Type safety as an aspect of program correctness,,Type Systems,,Create,,,
5,7,4,,,,Type safety and errors caused by using values inconsistently given their intended types,,Type Systems,,Create,,,
5,7,5,,,,Statically-typed vs dynamically-typed programming languages,,Type Systems,,Create,,,
5,7,6,,,,Type equivalence: structural vs name equivalence,,Type Systems,,Create,,,
5,7,7,,,,Goals and limitations of static and dynamic typing,,Type Systems,,Create,,Detecting and eliminating errors as early as possible,
5,7,8,,,,Generic types (parametric polymorphism),,Type Systems,,Create,,,
5,7,8,1,,,Definition and advantages of polymorphism,,Type Systems,,Create,,"parametric, subtyping, overloading and coercion",
5,7,8,2,,,Comparison of monomorphic and polymorphic types,,Type Systems,,Create,,,
5,7,8,3,,,Comparison with ad-hoc polymorphism (overloading) and subtype polymorphism,,Type Systems,,Create,,,
5,7,8,4,,,Generic parameters and typing,,Type Systems,,Create,,,
5,7,8,5,,,Use of generic libraries such as collectlons,,Type Systems,,Create,,,
5,7,8,6,,,Comparison with ad hoc polymorphism (overloading) and subtype polymorphism,,Type Systems,,Create,,,
5,7,8,7,,,Prescriptive vs. descriptive polymorphism,,Type Systems,,Create,,,
5,7,8,8,,,Implementation models of polymorphic types,,Type Systems,,Create,,,
5,7,9,,,,Complementary benefits of static and dynamic typing,,Type Systems,,Create,,,
5,7,9,1,,,Errors early vs. errors late/avoided,,Type Systems,,Create,,,
5,7,9,2,,,Enforce invariants during code development and code maintenance vs. postpone typing decisions while prototyping and conveniently allow flexible coding patterns such as heterogeneous collections,,Type Systems,,Create,,,
5,7,9,3,,,Typing rules,,Type Systems,,Create,,"Rules for function, product, and sum types",
5,7,9,4,,,Alternative type systems such as Hindley-Miller and Grant-Reynolds type systems. ,,,,,,,
5,7,9,5,,,Avoid misuse of code vs. allow more code reuse,,Type Systems,,Create,,,
5,7,9,6,,,Detect incomplete programs vs. allow incomplete programs trun,,Type Systems,,Create,,,
5,7,9,7,,,Relationship tstatic analysis,,Type Systems,,Create,,,
5,7,9,8,,,Decidability,,Type Systems,,Create,,,
5,7,9,9,,,"Use of sophisticated(complex) type systems, e.g.,Rust.",,Type Systems,,Create,,,
5,8,,,,,Language Translation and Execution ,,Language Translation and Execution ,,,,"Language translation and execution are essential processes in the lifecycle of a software program, enabling the transformation of human-readable code into machine-executable instructions. ",
5,8,1,,,,Interpretation vs. compilation tnative code vs. compilation tportable intermediate representation,,Language Translation and Execution ,,Understand,,,
5,8,2,,,,Language translation pipeline,,Language Translation and Execution ,,Understand,,"syntax analysis, parsing, optional type-checking, translation/code generation and optimization, linking, loading, execution",
5,8,2,1,,,BNF and extended BNF representation of context-free grammar,,Language Translation and Execution ,,Understand,,,
5,8,2,2,,,Parse tree using a simple sentence ,,Language Translation and Execution ,,Understand,,such as arithmetic expression or if-then-else statement,
5,8,2,3,,,Ambiguity in Parsing due tlack of precedence order and resolution,,Language Translation and Execution ,,Understand,,,
5,8,2,4,,,Execution as native code or within a virtual machine,,Language Translation and Execution ,,Understand,,,
5,8,2,5,,,"Alternatives like dynamic loading and dynamic (or ""just-in-time"") code generation",,Language Translation and Execution ,,Understand,,,
5,8,3,,,,Control-flow diagrams using selection and iteration,,Language Translation and Execution ,,Understand,,,
5,8,4,,,,"Data structures for translation, execution, translation and code mobility ",,Language Translation and Execution ,,Understand,,"such as stack, heap, aliasing (sharing using pointers), indexed sequence and string",
5,8,5,,,,"Direct, indirect and indexed access tmemory location",,Language Translation and Execution ,,Understand,,,
5,8,6,,,,Runtime representation of data abstractions ,,Language Translation and Execution ,,Understand,,"such as variables, arrays, vectors, records, pointer-based data elements such as linkedlists and trees, and objects",
5,8,7,,,,"Abstract low-level machine with simple instruction, stack and heap texplain translation and execution",,Language Translation and Execution ,,Understand,,,
5,8,8,,,,Run-time layout of memory,,Language Translation and Execution ,,Understand,,"activation record (with various pointers), static data, call-stack, heap",
5,8,8,1,,,Translating selection and iterative constructs tcontrol-flow diagrams,,Language Translation and Execution ,,Understand,,,
5,8,8,2,,,Translating control-flow diagrams tlow level abstract code,,Language Translation and Execution ,,Understand,,,
5,8,8,3,,,"Implementing loops, recursion, and tail calls",,Language Translation and Execution ,,Understand,,,
5,8,8,4,,,Translating function/procedure calls and return from calls,,Language Translation and Execution ,,Understand,,including different parameter passing mechanism using an abstract machine,
5,8,9,,,,Memory management,,Language Translation and Execution ,,Understand,,,
5,8,9,1,,,Low level allocation and accessing of high-level data structures,,Language Translation and Execution ,,Understand,,"such as basic data types, n-dimensional array, vector, record, and objects",
5,8,9,2,,,Return from procedure,,Language Translation and Execution ,,Understand,,as automatic deallocation mechanism for local data elements in the stack,
5,8,9,3,,,Manual memory management,,Language Translation and Execution ,,Understand,,"allocating, de-allocating, and reusing heap memory",
5,8,9,4,,,Automated memory management,,Language Translation and Execution ,,Understand,,garbage collection as an automated technique using the notion of reachability,
5,9,,,,,Program Representation,,Program Representation,,Understand,,Program representation refers to the internal structure or format used to represent a software program within a computer system.,
5,9,1,,,,BNF and regular expressions,,Program Representation,,Understand,,,
5,9,2,,,,Programs that take (other) programs as input,,Program Representation,,Understand,,"such as interpreters, compilers, typecheckers, documentation generators",
5,9,3,,,,Components of a language,,Program Representation,,Understand,,,
5,9,3,1,,,"Definitions of alphabets, delimiters, sentences, syntax and semantics",,Program Representation,,Understand,,,
5,9,3,2,,,Synatx vs. semantics,,Program Representation,,Understand,,,
5,9,4,,,,Types of semantics,,Program Representation,,Understand,,"operational, axiomatic, denotational, behavioral; define and use abstract syntax trees; contrast with concrete ssyntaxyntax",
5,9,5,,,,Program as a set of non-ambiguous meaningful sentences,,Program Representation,,Understand,,,
5,9,6,,,,Basic programming abstractions,,Program Representation,,Understand,,"constants, variables, declarations (including nested declarations), command, expression, assignment, selection, definite and indefinite iteration, iterators, function, procedure, modules, exception handling",
5,9,7,,,,Mutable vs.immutable variables,,Program Representation,,Understand,,advantages and disadvantages of reusing existing memory location vs. advantages of copying and keeping old values; storing partial computation vs. recomputation,
5,9,8,,,,L-values and R-values,,Program Representation,,Understand,,mapping mutable variable-name to L-values; mapping immutable variable-names to R-values,
5,9,9,,,,Types of variables,,Program Representation,,Understand,,"static, local, nonlocal, global; need and issues with nonlocal and global variables",
5,9,10,,,,Scope rules,,Program Representation,,Understand,,static vs. dynamic; visibility of variables; side-effects,
5,9,11,,,,Environment vs. store and their properties,,Program Representation,,Understand,,,
5,9,12,,,,Data and control abstraction,,Program Representation,,Understand,,,
5,9,13,,,,Mechanisms for information exchange between program units,,Program Representation,,Understand,,"nonlocal variables, global variables, parameter passing, import-export between modules",
5,9,14,,,,Types of parameter passing with simple illustrations and comparison,,Program Representation,,Understand,,"call by value, call by reference, call by value-result, call by name, call by need and their variations",
5,9,15,,,,"Side-effects induced by nonlocal variables, global variables and aliased variables",,Program Representation,,Understand,,,
5,9,16,,,,"Data structures trepresent code for execution, translation, or transmission",,Program Representation,,Understand,,,
5,9,17,,,,Low level instruction representation,,Program Representation,,Understand,,"such as virtual machine instructions, assembly language, and binary representation",
5,9,18,,,,"Lambda calculus, variable binding, and variable renaming.",,Program Representation,,Understand,,,
5,9,19,,,,String-based mobility in mobile coding.,,Program Representation,,Understand,,,