courseid,chapterid,sectionid,unitid,subunitid,-,topic,-,chapter,-,Cognitive level,-,description_of_topic,-
21,,,,,-,Compiler Construction,-,Course,-,Understand,-,,-
21,0,,,,-,Objective,-,Course objective,-,Understand,-,,-
21,0,1,,,-,Obj1,-,Course objective,-,Understand,-,To develop a profound understanding about the inner workings of compilers.,-
21,0,2,,,-,Obj2,-,Course objective,-,Understand,-,To develop the ability to design and implement compilers for varying purposes.,-
21,1,,,,-,Introduction,-,Introduction,-,Understand,-,,-
21,1,1,,,-,Compiler Introduction,-,Introduction,-,Understand,-,Compiler Introduction: A compiler is a program that translates source code written in a high-level programming language into machine code that a computer can execute.,-
21,1,2,,,-,Compiler and Interpreter,-,Introduction,-,Understand,-,"Compiler and Interpreter: While compilers translate entire source code files into machine code before execution, interpreters execute code line by line, translating and executing each line at runtime.",-
21,1,3,,,-,Just-in-Time Compilation,-,Introduction,-,Understand,-,Just-in-Time Compilation: Just-in-Time (JIT) compilation combines aspects of both compilation and interpretation.,-
21,1,4,,,-,Fundamental Principle of Compilation,-,Introduction,-,Understand,-,"Fundamental Principle of Compilation: The fundamental principle of compilation is to translate code from a high-level programming language into a lower-level representation, typically machine code or bytecode, while preserving the semantics and functionality of the original code.",-
21,1,5,,,-,Compiler Tool Chain,-,Introduction,-,Understand,-,"Compiler Tool Chain: The compiler tool chain refers to the sequence of tools involved in the compilation process, including the preprocessor, compiler, assembler, linker, and loader.",-
21,1,6,,,-,Compiler: The User’s View,-,Introduction,-,Understand,-,"Compiler: The User’s View: From the user's perspective, a compiler is a software tool that takes source code written in a high-level programming language, such as C, C++, or Java, and translates it into executable machine code.",-
21,2,,,,-,Compiler Structure,-,Compiler Structure,-,Understand,-,,-
21,2,1,,,-,Basic Compiler Structure,-,Compiler Structure,-,Understand,-,,-
21,2,1,1,,-,Front end,-,Compiler Structure,-,Understand,-,"Front end: The front end of a compiler is responsible for analyzing and processing the source code. It includes components like lexical analysis, syntactic analysis, and semantic analysis.",-
21,2,1,2,,-,Back end,-,Compiler Structure,-,Understand,-,Back end: The back end of a compiler generates target code or intermediate code based on the analyzed source code. It involves tasks such as code optimization and code generation.,-
21,2,2,,,-,Advanced Compiler Structure,-,Compiler Structure,-,Understand,-,,-
21,2,2,1,,-,Front end,-,Compiler Structure,-,Understand,-,,-
21,2,2,1,1,-,Lexicographic analysis:Scanner,-,Compiler Structure,-,Understand,-,Lexicographic analysis (Scanner): The scanner reads the input source code character by character and converts it into tokens or lexemes.,-
21,2,2,1,2,-,Syntactic analysis:Parser,-,Compiler Structure,-,Understand,-,Syntactic analysis (Parser): The parser analyzes the structure of the source code based on the grammar rules of the programming language.,-
21,2,2,1,3,-,Semantic analysis,-,Compiler Structure,-,Understand,-,Semantic analysis: The semantic analyzer performs type checking and ensures that the source code follows the language's semantic rules.,-
21,2,2,2,,-,Optimiser (Middle end),-,Compiler Structure,-,Understand,-,"Optimiser (Middle end): The optimizer optimizes the intermediate code generated by the front end. It includes prologue optimizations, cycle optimizations, and epilogue optimizations.",-
21,2,2,2,1,-,Prologue optimisations:,-,Compiler Structure,-,Understand,-,Prologue optimizations: Optimizations applied at the beginning of a function or subroutine.,-
21,2,2,2,2,-,Cycle optimisations:,-,Compiler Structure,-,Understand,-,Cycle optimizations: Optimizations aimed at reducing the number of machine instructions or cycles required to execute code.,-
21,2,2,2,3,-,Epilogue optimisations:,-,Compiler Structure,-,Understand,-,Epilogue optimizations: Optimizations applied at the end of a function or subroutine.,-
21,2,2,3,,-,Back end,-,Compiler Structure,-,Understand,-,,-
21,2,2,3,1,-,Instruction selector:,-,Compiler Structure,-,Understand,-,Instruction selector: Selects the instructions from the instruction set architecture (ISA) that best match the intermediate code.,-
21,2,2,3,2,-,Register allocator：,-,Compiler Structure,-,Understand,-,Register allocator: Allocates physical registers to variables and ensures efficient use of available registers.,-
21,2,2,3,3,-,Instruction scheduler：,-,Compiler Structure,-,Understand,-,Instruction scheduler: Reorders instructions to optimize execution time or resource utilization on the target architecture.,-
21,3,,,,-,Lexicographical Analysis,-,Lexicographical Analysis,-,Understand,-,,-
21,3,1,,,-,Finite Automata,-,Lexicographical Analysis,-,Understand,-,,-
21,3,1,1,,-,A deterministic finite automaton,-,Lexicographical Analysis,-,Understand,-,"A deterministic finite automaton (DFA) is a mathematical model of computation consisting of a finite set of states, a finite set of input symbols, a transition function, and a start state and one or more accepting states.",-
21,3,1,2,,-,A non-deterministic finite automaton,-,Lexicographical Analysis,-,Understand,-,"A non-deterministic finite automaton (NFA) is similar to a DFA, but it allows multiple transitions from a state on the same input symbol and can have ε-transitions.",-
21,3,2,,,-,Construct an efficient finite automaton,-,Lexicographical Analysis,-,Understand,-,"To construct an efficient finite automaton, one can use algorithms like Subset Construction or Hopcroft’s Algorithm to minimize the number of states and transitions while preserving the language accepted by the automaton.",-
21,3,2,1,,-,Regular Expressions,-,Lexicographical Analysis,-,Understand,-,Regular expressions are formal descriptions for patterns of strings. They can be used to describe sets of strings using a compact and expressive syntax.,-
21,3,2,2,,-,Thompson Construction,-,Lexicographical Analysis,-,Understand,-,Thompson Construction is a method for converting a regular expression into an equivalent NFA.,-
21,3,2,3,,-,Subset Construction,-,Lexicographical Analysis,-,Understand,-,"Subset Construction is an algorithm used to convert an NFA into a DFA, resulting in a more efficient deterministic automaton.",-
21,3,2,4,,-,Hopcroft’s Algorithm,-,Lexicographical Analysis,-,Understand,-,Hopcroft’s Algorithm is a method for minimizing the number of states in a DFA by partitioning the states into equivalence classes and merging equivalent states.,-
21,3,2,5,,-,Construct scanner,-,Lexicographical Analysis,-,Understand,-,"Scanners, also known as lexers, are programs that recognize lexical patterns in input streams. They are commonly used as the first phase of a compiler.",-
21,3,2,5,1,-,Table-driven scanner,-,Lexicographical Analysis,-,Understand,-,A table-driven scanner uses finite automata to recognize tokens.,-
21,3,2,5,2,-,Direct-coded scanner,-,Lexicographical Analysis,-,Understand,-,A direct-coded scanner uses explicit code to recognize tokens.,-
21,3,3,,,-,Automatic Scanner Generation with (F)Lex,-,Lexicographical Analysis,-,Understand,-,(F)Lex is a popular tool for generating scanners automatically from lexical specifications written in regular expressions.,-
21,4,,,,-,Syntactic Analysis,-,Syntactic Analysis,-,Understand,-,,-
21,4,1,,,-,Backus-Naur Form,-,Syntactic Analysis,-,Understand,-,BNF is a notation technique used to formally describe the syntax of programming languages or other formal languages.,-
21,4,2,,,-,Context-Free Grammars,-,Syntactic Analysis,-,Understand,-,CFG is a formal grammar type used to describe the syntax of context-free languages.,-
21,4,3,,,-,Parser generator formalisms,-,Syntactic Analysis,-,Understand,-,Parser generator tools like YACC (Yet Another Compiler Compiler) are used to automatically generate parsers from formal grammar specifications.,-
21,4,3,1,,-,Yet Another Compiler Compiler(YACC),-,Syntactic Analysis,-,Understand,-,YACC is a widely-used parser generator tool originally developed for Unix systems.,-
21,4,4,,,-,Abstract syntax definitions,-,Syntactic Analysis,-,Understand,-,Abstract syntax definitions provide a structured representation of the syntax of a programming language or other formal language.,-
21,5,,,,-,Semantic Analysis,-,Semantic Analysis,-,Understand,-,,-
21,5,1,,,-,Context Analysis,-,Semantic Analysis,-,Understand,-,"Context analysis, also known as semantic analysis, is the phase in the compilation process where the compiler checks the semantics of the program beyond its syntactic correctness.",-
21,5,2,,,-,Type checker,-,Semantic Analysis,-,Understand,-,The type checker is a crucial component of semantic analysis responsible for ensuring that the types of expressions and variables in the program are used in a manner consistent with the language's type system.,-
21,6,,,,-,Code Transformation & Optimisation,-,Code Transformation & Optimisation,-,Understand,-,,-
21,6,1,,,-,Machine-Independent Optimisation,-,Code Transformation & Optimisation,-,Understand,-,This involves optimizations that are not specific to any particular hardware architecture,-
21,6,1,1,,-,A Taxonomy of Optimisations,-,Code Transformation & Optimisation,-,Understand,-,"Optimizations can be categorized based on various criteria such as the scope of optimization (local or global), the level of abstraction (high-level or low-level), and the nature of transformations (restructuring, redundancy elimination, etc.).",-
21,6,1,1,1,-,Local Optimisation,-,Code Transformation & Optimisation,-,Understand,-,Local optimization targets small code segments or individual basic blocks within a program,-
21,6,1,1,2,-,Intra-procedural optimisation,-,Code Transformation & Optimisation,-,Understand,-,This optimization focuses on improving the efficiency of code within individual procedures or functions,-
21,6,1,1,3,-,Inter-procedural optimisation,-,Code Transformation & Optimisation,-,Understand,-,Inter-procedural optimization extends optimization across multiple procedures or functions,-
21,6,2,,,-,Machine-dependent optimisation,-,Code Transformation & Optimisation,-,Understand,-,"These optimizations are tailored to specific hardware architectures, exploiting features and characteristics of the target machine to achieve performance improvements.",-
21,6,3,,,-,Compilation Scheme:,-,Code Transformation & Optimisation,-,Understand,-,"The compilation scheme refers to the overall process and infrastructure used for transforming source code into executable machine code, including the stages of parsing, optimization, code generation, and linking.",-
21,6,4,,,-,Optimisation Infrastructure,-,Code Transformation & Optimisation,-,Understand,-,"This encompasses the tools, techniques, and frameworks used to implement and support optimization strategies within a compiler or programming environment",-
21,7,,,,-,Code Generation,-,Code Generation,-,Understand,-,,-
21,7,1,,,-,Taxonomy of Target Languages,-,Code Generation,-,Understand,-,,-
21,7,1,1,,-,Machine assembly,-,Code Generation,-,Understand,-,"Machine assembly, a low-level target language, directly maps to machine instructions and is architecture-specific.",-
21,7,1,2,,-,Virtual machine assembly,-,Code Generation,-,Understand,-,"Virtual machine assembly targets a virtual machine, providing an intermediate representation that can be interpreted or compiled to native code.",-
21,7,1,3,,-,Higher level language,-,Code Generation,-,Understand,-,"Higher-level languages like C, Java, or Python abstract away machine-specific details, allowing for platform-independent development.",-
21,7,2,,,-,Virtual Machines,-,Code Generation,-,Understand,-,"Virtual machines can operate on register-based architectures, where operations are performed directly on registers.",-
21,7,2,1,,-,Register-based virtual machines,-,Code Generation,-,Understand,-,,-
21,7,2,2,,-,Stack-based virtual machines,-,Code Generation,-,Understand,-,Stack-based virtual machines use a stack data structure for operand manipulation and intermediate results storage.,-
21,7,3,,,-,The CiviC Virtual Machine,-,Code Generation,-,Understand,-,The CiviC Virtual Machine is an example of a stack-based virtual machine designed for simplicity and ease of implementation.,-
21,7,3,1,,-,Arithmetic Operations,-,Code Generation,-,Understand,-,"Arithmetic operations in code generation encompass addition, subtraction, multiplication, and division, among others.",-
21,7,3,2,,-,Relational Operations,-,Code Generation,-,Understand,-,"Relational operations include comparisons like equality, inequality, greater than, less than, etc.",-
21,7,3,3,,-,Logical Operations,-,Code Generation,-,Understand,-,"Logical operations involve Boolean operations such as AND, OR, and NOT.",-
21,7,3,4,,-,Type Conversion,-,Code Generation,-,Understand,-,"Type conversion converts data from one type to another, ensuring compatibility between different data types.",-
21,7,3,5,,-,Constants,-,Code Generation,-,Understand,-,"Constants are fixed values in the code, while variables represent memory locations storing data that can change during program execution.",-
21,7,3,6,,-,Variables,-,Code Generation,-,Understand,-,,-
21,7,4,,,-,Code Generation,-,Code Generation,-,Understand,-,,-
21,7,4,1,,-,Basic Blocks,-,Code Generation,-,Understand,-,Basic Blocks: Fundamental units of code containing straight-line sequences of instructions with no branches.,-
21,7,4,2,,-,Simple Expressions,-,Code Generation,-,Understand,-,Simple Expressions: Generation of code for arithmetic and logical expressions involving literals and variables.,-
21,7,4,3,,-,Control Flow Constructs,-,Code Generation,-,Understand,-,Control Flow Constructs: Handling of conditional and iterative control flow structures.,-
21,7,4,3,1,-,Conditionals,-,Code Generation,-,Understand,-,Conditionals: Translation of conditional statements like if-else into machine instructions.,-
21,7,4,3,2,-,Do-While-Loops,-,Code Generation,-,Understand,-,Do-While-Loops: Code generation for do-while loop constructs.,-
21,7,4,3,3,-,While-Loops,-,Code Generation,-,Understand,-,While-Loops: Translation of while loop constructs into executable code.,-
21,7,4,4,,-,Extern Declarations,-,Code Generation,-,Understand,-,Extern Declarations: Handling of external declarations for variables and functions.,-
21,7,4,4,1,-,External linkage information,-,Code Generation,-,Understand,-,External Linkage Information: Management of information related to linking with external modules or libraries.,-
21,7,4,5,,-,Calling Convention,-,Code Generation,-,Understand,-,"Calling Convention: Specification of rules governing how function calls are performed, including parameter passing and return values.",-
21,7,4,5,1,-,CiviC Procedure Call Convention,-,Code Generation,-,Understand,-,CiviC Procedure Call Convention: Specific calling convention defined for the CiviC Virtual Machine.,-
21,7,4,6,,-,Nested Functions,-,Code Generation,-,Understand,-,Nested Functions: Support for functions defined within other functions.,-
21,7,4,6,1,-,Extended Context Analysis,-,Code Generation,-,Understand,-,Extended Context Analysis: Analysis of function context to support proper code generation.,-
21,7,4,7,,-,Static vs Dynamic Link,-,Code Generation,-,Understand,-,Static vs Dynamic Link: Differentiation between static linking and dynamic linking mechanisms.,-
21,7,4,8,,-,Calling External Functions,-,Code Generation,-,Understand,-,Calling External Functions: Generating code to call functions defined in external modules or libraries.,-
21,7,4,9,,-,Instruction Selection,-,Code Generation,-,Understand,-,Instruction Selection: Selection of appropriate machine instructions to implement high-level language constructs.,-