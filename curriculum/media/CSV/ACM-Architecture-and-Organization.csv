courseid,chapterid,sectionid,unitid,subunitid,-,topic,-,chapter,-,Cognitive level,-,description_of_topic,-
2,,,,,,Architecture and Organization,,,,,,,
2,1,,,,,Digital Logic and Digital Systems,,Digital Logic and Digital Systems,,,,Study of binary logic and the design of digital circuits.,
2,1,1,,,,Overview and history of computer architecture,,Digital Logic and Digital Systems,,Understand,,Understanding the evolution and key concepts of computer systems.,
2,1,2,,,,Combinational vs. sequential logic,,Digital Logic and Digital Systems,,Understand,,Differentiating between logic circuits with and without memory elements.,
2,1,2,1,,,Fundamental combinational,,Digital Logic and Digital Systems,,Understand,,"Basic components like logic gates (AND, OR, NOT).",
2,1,2,2,,,Sequential logic building block,,Digital Logic and Digital Systems,,Understand,,"Components like flip-flops, latches enabling memory in circuits.",
2,1,3,,,,Functional hardware and software multi‐layer architecture,,Digital Logic and Digital Systems,,Understand,,Understanding the interaction between hardware and software layers in a computer system.,
2,1,4,,,,Computer‐aided design tools that process hardware and architectural representations,,Digital Logic and Digital Systems,,Evaluate,,Tools facilitating the design and analysis of digital systems.,
2,1,5,,,,High‐level synthesis,,Digital Logic and Digital Systems,,Evaluate,,Automated conversion of high-level code into hardware description language.,
2,1,5,1,,,Register transfer notation,,Digital Logic and Digital Systems,,Evaluate,,Description of digital systems in terms of data transfers between registers.,
2,1,5,2,,,Hardware description language,,Digital Logic and Digital Systems,,Evaluate,,Languages like VHDL or Verilog for describing digital circuits.,
2,1,6,,,,System‐on‐chip (SoC) design flow,,Digital Logic and Digital Systems,,Evaluate,,Methodology for designing complex integrated circuits.,
2,1,7,,,,Physical constraints,,Digital Logic and Digital Systems,,Evaluate,,Limitations imposed by the physical properties of hardware components.,
2,1,7,1,,,Gate delays,,Digital Logic and Digital Systems,,Evaluate,,Time taken for signals to propagate through logic gates.,
2,1,7,2,,,Fan‐in and fan‐out,,Digital Logic and Digital Systems,,Evaluate,,Number of inputs and outputs a gate can handle.,
2,1,7,3,,,Energy/power,,Digital Logic and Digital Systems,,Evaluate,,Considerations for power consumption and energy efficiency in digital systems.,
2,1,7,4,,,Speed of light,,Digital Logic and Digital Systems,,Evaluate,,Physical limitation affecting the propagation of signals in hardware.,
2,2,,,,,Machine-Level Data Representation,,Machine-Level Data Representation,,,,Understanding how data is represented at the binary level in a computer system.,
2,2,1,,,,"Bits, bytes, and words",,Machine-Level Data Representation,,Apply,,"Basic units of digital data, where a bit is the smallest unit, a byte typically consists of 8 bits, and a word is the natural unit of data a processor can process at once.",
2,2,2,,,,Numeric data representation and number bases,,Machine-Level Data Representation,,Apply,,"Representing numbers using different bases, such as binary, decimal, octal, and hexadecimal.",
2,2,2,1,,,Fixed‐point,,Machine-Level Data Representation,,Apply,,Representing numbers with a fixed number of digits after the decimal point.,
2,2,2,2,,,Floating‐point,,Machine-Level Data Representation,,Apply,,"Representing numbers with a variable number of significant digits and an exponent, allowing a wider range of values.",
2,2,3,,,,Signed and twos‐complement representations,,Machine-Level Data Representation,,Apply,,"Methods for representing negative numbers in binary, where the most significant bit (MSB) indicates the sign in signed representation, and twos-complement representation simplifies arithmetic operations.",
2,2,4,,,,Representation of non‐numeric data,,Machine-Level Data Representation,,Apply,,"Representing characters, symbols, and other non-numeric data using character encoding schemes like ASCII or Unicode.",
2,2,5,,,,Representation of records and arrays,,Machine-Level Data Representation,,Apply,,Organizing structured data such as records (collections of related fields) and arrays (collections of data elements of the same type) in memory.,
2,3,,,,,Assembly Level Machine Organization,,Assembly Level Machine Organization,,,,Understanding the low-level structure and operation of a computer at the assembly language level.,
2,3,1,,,,von Neumann machine architecture,,Assembly Level Machine Organization,,Understand,,Basic architecture featuring a single shared memory for both data and instructions.,
2,3,2,,,,"Control unit; instruction fetch, decode, and execution",,Assembly Level Machine Organization,,Understand,,"Components responsible for fetching, decoding, and executing instructions.",
2,3,3,,,,Introduction to SIMD vs. MIMD and the Flynn taxonomy,,Assembly Level Machine Organization,,Understand,,"Differentiating between Single Instruction, Multiple Data (SIMD) and Multiple Instruction, Multiple Data (MIMD) architectures based on instruction and data processing.",
2,3,4,,,,Shared memory multiprocessors/multicore organization,,Assembly Level Machine Organization,,Understand,,Systems with multiple processors/cores sharing a common memory.,
2,3,5,,,,"Instruction set architecture (ISA)e.g. x86, ARM and RISC‐V",,Assembly Level Machine Organization,,Create,,The set of instructions a processor can execute.,
2,3,5,1,,,Instruction formats,,Assembly Level Machine Organization,,Create,,Different formats used to represent instructions in machine code.,
2,3,5,2,,,"Data manipulation, control, I/O",,Assembly Level Machine Organization,,Create,,"Types of operations performed by instructions, including data processing, control flow, and input/output.",
2,3,5,3,,,Addressing modes,,Assembly Level Machine Organization,,Create,,Different ways of specifying the address of operands in instructions.,
2,3,5,4,,,Machine language programming,,Assembly Level Machine Organization,,Create,,Writing programs directly in machine code.,
2,3,5,5,,,Assembly language programming,,Assembly Level Machine Organization,,Create,,Writing programs using human-readable mnemonics that map to machine code instructions.,
2,3,6,,,,Subroutine call and return mechanisms (xref PL/language translation and execution),,Assembly Level Machine Organization,,Create,,Techniques for calling and returning from subroutines in assembly language.,
2,3,7,,,,I/and interrupts ,,Assembly Level Machine Organization,,Create,,Input/output operations and mechanisms for handling interrupts.,
2,3,8,,,,"Heap, static,  stack and code segments",,Assembly Level Machine Organization,,Create,,"Different memory segments used by programs, including dynamic memory (heap), static data, runtime stack, and code.",
2,4,,,,,Memory Hierarchy,,Memory Hierarchy,,,,,
2,4,1,,,,Memory hierarchy: the importance of temporal and spatial locality [Shared with OS],,Memory Hierarchy,,Understand,,"Organizes memory into levels based on speed and size, exploiting temporal and spatial locality to improve performance.",
2,4,2,,,,Main memory organization and operations,,Memory Hierarchy,,Understand,,"RAM serves as the main memory, accessed by the CPU for storing and retrieving data and instructions.",
2,4,3,,,,"Persistent memory (e.g. SSD, standard disks)",,Memory Hierarchy,,Understand,,"Includes SSDs and standard disks, used for long-term storage of data even when the system is powered off.",
2,4,4,,,,"Latency, cycle time, bandwidth and interleaving",,Memory Hierarchy,,Understand,,"Parameters that characterize memory performance, including access time, clock cycle duration, data transfer rate, and interleaved access.",
2,4,5,,,,"Virtual memory (hardware support, cross‐reference OS/Virtual Memory) ",,Memory Hierarchy,,Understand,,"Provides an abstraction layer for managing memory resources, allowing the OS to use disk space as an extension of physical RAM.",
2,4,6,,,,Fault handling and reliability,,Memory Hierarchy,,Understand,,"Mechanisms to detect and recover from memory errors, ensuring system stability and data integrity.",
2,4,7,,,,Reliability (cross‐reference SF/Reliability through Redundancy),,Memory Hierarchy,,Understand,,Techniques such as error coding and redundancy to enhance system reliability and fault tolerance.,
2,4,7,1,,,Error coding,,Memory Hierarchy,,Understand,,,
2,4,7,2,,,Data compression,,Memory Hierarchy,,Understand,,"Techniques to reduce the size of stored or transmitted data, optimizing memory utilization and bandwidth usage.",
2,4,7,3,,,Data integrity,,Memory Hierarchy,,Understand,,"Ensures that data remains unchanged and consistent throughout its lifecycle, safeguarding against errors and corruption.",
2,4,8,,,,Non‐von Neumann Architectures,,Memory Hierarchy,,Understand,,"Novel computing architectures that depart from the traditional von Neumann model, offering alternative approaches to memory and processing.",
2,4,8,1,,,In‐Memory Processing (PIM),,Memory Hierarchy,,Understand,,"Performs computations directly within memory modules, reducing data movement and improving processing efficiency.",
2,4,9,,,,Cache memories [Shared with OS],,Memory Hierarchy,,Evaluate,,"Small, fast memory units that store frequently accessed data and instructions, reducing access latency and improving CPU performance.",
2,4,9,1,,,Address mapping,,Memory Hierarchy,,Evaluate,,"Techniques for translating logical addresses to physical memory locations, facilitating memory access.",
2,4,9,2,,,Block size,,Memory Hierarchy,,Evaluate,,"Determines the amount of data fetched from main memory to cache in a single operation, affecting cache efficiency.",
2,4,9,3,,,Replacement and store policy,,Memory Hierarchy,,Evaluate,,"Algorithms for managing cache contents, including eviction and data placement strategies.",
2,4,10,,,,Multiprocessor cache coherence,,Memory Hierarchy,,Evaluate,,"Ensures consistency of shared data across multiple caches in a multiprocessing system, preventing data inconsistencies and race conditions.",
2,5,,,,,Interfacing and Communication,,Interfacing and Communication,,Understand,,,
2,5,1,,,,I/fundamentals[Shared with OS and SPD],,Interfacing and Communication,,Understand,,"Principles governing the interaction between different components, shared with operating systems and system programming.",
2,5,1,1,,,Handshaking and buffering,,Interfacing and Communication,,Understand,,Techniques for coordinating communication between devices and managing data flow.,
2,5,1,2,,,Programmed I/O,,Interfacing and Communication,,Understand,,"Method where the CPU directly controls data transfer between peripherals and memory, requiring constant CPU intervention.",
2,5,1,3,,,Interrupt‐driven I/O,,Interfacing and Communication,,Understand,,"Mechanism where peripheral devices interrupt the CPU to request attention, enabling asynchronous data transfer.",
2,5,4,,,,"Interrupt structures: vectored and prioritized, interrupt acknowledgement [Shared with OS]",,Interfacing and Communication,,Understand,,"Includes vectored and prioritized interrupt mechanisms, along with interrupt acknowledgment protocols, shared with operating systems.",
2,5,5,,,,"External storage, physical organization and drives [Shared with OS]",,Interfacing and Communication,,Understand,,"Refers to storage devices outside the CPU, such as hard drives and SSDs, with considerations for physical organization and drive characteristics, also shared with operating systems.",
2,5,6,,,,Buses fundamentals [Shared with OS and SPD],,Interfacing and Communication,,Understand,,"Basics of bus architecture, shared with operating systems and system programming, including bus protocols and arbitration methods.",
2,5,6,1,,,Bus protocols,,Interfacing and Communication,,Understand,,Specifications defining the rules and procedures for communication between devices on a bus.,
2,5,6,2,,,Arbitration,,Interfacing and Communication,,Understand,,Process of resolving conflicts when multiple devices attempt to access the bus simultaneously.,
2,5,6,3,,,Direct‐memory access (DMA),,Interfacing and Communication,,Understand,,"Technique allowing peripherals to transfer data directly to and from memory without CPU intervention, enhancing efficiency.",
2,5,7,,,,Network‐on‐chip (NoC),,Interfacing and Communication,,Understand,,"Architecture where multiple processor cores or IP blocks communicate via an on-chip network, facilitating scalable and efficient interconnectivity.",
2,6,,,,,Functional Organization,,Functional Organization,,,,,
2,6,1,,,,"Implementation of simple datapaths, including instruction pipelining, hazard detection and resolution",,Functional Organization,,Create,,,
2,6,2,,,,Control unit,,Functional Organization,,Create,,"Component responsible for directing the operation of the processor, including instruction decoding and execution control.",
2,6,2,1,,,Hardwired implementation,,Functional Organization,,Create,,"Approach to building the control unit using physical circuitry, offering fast execution but limited flexibility.",
2,6,2,2,,,Microprogrammed realization,,Functional Organization,,Create,,"Technique where the control unit's behavior is defined by microinstructions stored in control memory, offering greater flexibility at the expense of some performance.",
2,6,3,,,,Instruction pipelining,,Functional Organization,,Understand,,"Technique for improving processor throughput by breaking down instruction execution into multiple stages, allowing multiple instructions to be processed simultaneously.",
2,6,4,,,,Introduction to instruction‐level parallelism (ILP),,Functional Organization,,Understand,,"Exploitation of parallelism at the instruction level to enhance performance, often achieved through techniques like pipelining and superscalar execution.",
2,7,,,,,Performance and Energy Efficiency,,Performance and Energy Efficiency,,,,,
2,7,1,,,,"Performance‐energy evaluation (introduction): performance, power consumption, memory and communication costs",,Performance and Energy Efficiency,,Evaluate,,"Examination of performance metrics including power consumption, memory, and communication costs to assess efficiency.",
2,7,2,,,,"Branch prediction, speculative execution, out‐of‐order execution, Tomasulo's algorithm",,Performance and Energy Efficiency,,Evaluate,,"Techniques to improve processor performance by predicting branch outcomes, executing instructions speculatively, and reordering instructions for optimal execution.",
2,7,3,,,,Prefetching ,,Performance and Energy Efficiency,,Evaluate,,Strategy for improving memory access performance by fetching data before it is explicitly requested.,
2,7,4,,,,Enhancements for vector processors and GPUs,,Performance and Energy Efficiency,,Understand,,Techniques tailored for vector processors and Graphics Processing Units (GPUs) to optimize performance for specific workloads.,
2,7,5,,,,Hardware support for Multithreading,,Performance and Energy Efficiency,,Understand,,Hardware-level features to facilitate concurrent execution of multiple threads for improved performance.,
2,7,5,1,,,Race conditions,,Performance and Energy Efficiency,,Understand,,"Situations in concurrent programming where the outcome of operations depends on the timing of their execution, potentially leading to unexpected behavior.",
2,7,5,2,,,Lock implementations,,Performance and Energy Efficiency,,Understand,,Mechanisms used to synchronize access to shared resources in multithreaded environments.,
2,7,5,3,,,Point‐to‐point synchronization,,Performance and Energy Efficiency,,Understand,,Point-to-Point Synchronization: Techniques for coordinating synchronization between threads to avoid race conditions and ensure data consistency.,
2,7,5,4,,,Barrier implementation,,Performance and Energy Efficiency,,Understand,,Mechanisms for synchronizing multiple threads to ensure that all threads reach a designated point before proceeding.,
2,7,6,,,,Scalability,,Performance and Energy Efficiency,,Understand,,The ability of a system to handle increasing workloads by adding resources without sacrificing performance.,
2,7,7,,,,"Alternative architectures, such as VLIW/EPIC, accelerators and other special‐purpose processors",,Performance and Energy Efficiency,,Understand,,Exploration of alternative hardware designs optimized for specific tasks or workloads.,
2,7,8,,,,Dynamic voltage and frequency scaling (DVFS),,Performance and Energy Efficiency,,Understand,,Technique for adjusting the operating voltage and frequency of a processor dynamically to optimize energy efficiency.,
2,7,9,,,,Dark Silicon,,Performance and Energy Efficiency,,Understand,,"The portion of a chip that cannot be powered on simultaneously due to power and thermal constraints, leading to challenges in maximizing hardware utilization.",
2,8,,,,,Heterogeneous Architectures,,Heterogeneous Architectures,,Understand,,,
2,8,1,,,,"SIMD and MIMD architectures (e.g. General‐Purpose GPUs, TPUs and NPUs)",,Heterogeneous Architectures,,Understand,,"SIMD (Single Instruction, Multiple Data) and MIMD (Multiple Instruction, Multiple Data) architectures, including General-Purpose GPUs (Graphics Processing Units), TPUs (Tensor Processing Units), and NPUs (Neural Processing Units), designed to perform parallel computations efficiently.",
2,8,2,,,,Heterogeneous memory system,,Heterogeneous Architectures,,Understand,,"Systems that incorporate different types of memory, such as high-speed RAM, non-volatile memory (NVM), and specialized memory structures, to optimize performance and energy efficiency.",
2,8,2,1,,,Shared memory versus distributed memory,,Heterogeneous Architectures,,Understand,,Distinction between architectures where all processors share a common address space (shared memory) and those where each processor has its own local memory (distributed memory).,
2,8,2,2,,,Volatile vs non‐volatile memory,,Heterogeneous Architectures,,Understand,,"Differentiating between memory types that require power to retain data (volatile) and those that can retain data without power (non-volatile), influencing system design and performance.",
2,8,2,3,,,Coherence protocols,,Heterogeneous Architectures,,Understand,,"Mechanisms employed in multiprocessor systems to ensure that all processors have consistent views of shared memory, preventing data inconsistencies.",
2,8,3,,,,Domain‐Specific Architectures (DSAs),,Heterogeneous Architectures,,Understand,,"Architectures tailored for specific application domains, such as Machine Learning Accelerators optimized for neural network computations or In-Network Computing architectures that offload processing tasks to network devices.",
2,8,3,1,,,Machine Learning Accelerator,,Heterogeneous Architectures,,Understand,,,
2,8,3,2,,,In‐networking computing,,Heterogeneous Architectures,,Understand,,,
2,8,3,3,,,Embedded systems for emerging applications,,Heterogeneous Architectures,,Understand,,"Systems designed to meet the requirements of specialized applications, often characterized by constraints such as size, power consumption, and real-time performance.",
2,8,3,4,,,Neuromorphic computing,,Heterogeneous Architectures,,Understand,,"Computing paradigms inspired by the structure and function of the human brain, aiming to develop systems with low power consumption and high efficiency for tasks such as pattern recognition and sensory processing.",
2,8,4,,,,Packaging and integration solutions such as 3DIC and Chiplets,,Heterogeneous Architectures,,Understand,,"Advanced techniques for integrating multiple chips or functional units within a single package (3DIC) or combining discrete components (chiplets) to achieve higher performance, lower power consumption, and improved scalability.",
2,9,,,,,Quantum Architectures,,Quantum Architectures,,Understand,,,
2,9,1,,,,Principles,,Quantum Architectures,,Understand,,"Fundamental concepts including the wave-particle duality principle, which describes the behavior of particles like photons and electrons.",
2,9,1,1,,,The wave‐particle duality principle,,Quantum Architectures,,Understand,,,
2,9,1,2,,,The uncertainty principle in the double‐slit experiment,,Quantum Architectures,,Understand,,"The Uncertainty Principle: Introduced by the double-slit experiment, stating that certain pairs of physical properties, like position and momentum, cannot be simultaneously measured with arbitrary precision.",
2,9,1,3,,,What is a Qubit? Superposition and measurement. Photons as qubits.,,Quantum Architectures,,Understand,,"Qubit: The basic unit of quantum information, analogous to the classical bit but capable of existing in a superposition of states until measured. Superposition and Measurement: Qubits can exist in multiple states simultaneously, known as superposition, until measured, at which point they collapse to a definite state.",
2,9,1,4,,,Systems of twqubits. Entanglement. Bell states. The No‐Signaling theorem.,,Quantum Architectures,,Understand,,"The phenomenon where qubits become correlated in such a way that the state of one qubit is dependent on the state of another, even when separated by large distances.",
2,9,2,,,,"Axioms of QM: superposition principle, measurement axiom, unitary evolution",,Quantum Architectures,,Understand,,"Principles governing the behavior of quantum systems, including the superposition principle, measurement axiom, and unitary evolution.",
2,9,3,,,,"Single qubit gates for the circuit model of quantum computation: X, Z, H.",,Quantum Architectures,,Understand,,"Basic quantum operations used in quantum circuits, such as X (bit-flip), Z (phase-flip), and H (Hadamard) gates.",
2,9,4,,,,Two-qubit gates and tensor products. Working with matrices.,,Quantum Architectures,,Understand,,"Quantum operations that act on pairs of qubits, typically implemented using tensor products and matrices.",
2,9,5,,,,The No‐Cloning Theorem. The Quantum Teleportation protocol.,,Quantum Architectures,,Understand,,A fundamental principle stating that it is impossible to create an identical copy of an arbitrary unknown quantum state.Quantum Teleportation: A protocol that allows the transfer of quantum information from one qubit to another over long distances without physically transmitting the qubit itself.,
2,9,6,,,,Algorithms,,Quantum Architectures,,Understand,,,
2,9,6,1,,,"Simple quantum algorithms: Bernstein‐Vazirani, Simon’s algorithm.",,Quantum Architectures,,Understand,,"Bernstein-Vazirani and Simon's algorithm, which demonstrate the power of quantum computing in solving certain problems more efficiently than classical computers.",
2,9,6,2,,,Implementing Deutsch‐Josza with Mach‐Zehnder Interferometers.,,Quantum Architectures,,Understand,,"Using Mach-Zehnder Interferometers to realize the Deutsch-Josza algorithm, a demonstration of quantum parallelism.",
2,9,6,3,,,Quantum factoring (Shor’s Algorithm),,Quantum Architectures,,Understand,,"Shor's algorithm is a quantum algorithm for integer factorization, which threatens current cryptographic systems relying on the difficulty of factoring large numbers.",
2,9,6,4,,,Quantum search (Grover’s Algorithm),,Quantum Architectures,,Understand,,Grover's algorithm provides a quadratic speedup over classical algorithms for unstructured search problems.,
2,9,7,,,,Implementation aspects,,Quantum Architectures,,Understand,,"Discussing the physical realization of qubits, the fundamental units of quantum information, and the challenges of classical control of a Quantum Processing Unit (QPU).",
2,9,7,1,,,The physical implementation of qubits ,,Quantum Architectures,,Understand,,there are currently nine qubit modalities,
2,9,7,2,,,Classical control of a Quantum Processing Unit (QPU),,Quantum Architectures,,Understand,,,
2,9,7,3,,,Error mitigation and control. NISQ and beyond.,,Quantum Architectures,,Understand,,"Techniques for mitigating errors in quantum computations, particularly important in the era of Noisy Intermediate-Scale Quantum (NISQ) devices.",
2,9,8,,,,Emerging Applications,,Quantum Architectures,,Understand,,"Exploring post-quantum encryption, the potential of the Quantum Internet for secure communication, and the promise of adiabatic quantum computation (AQC) and quantum annealing for optimization problems.",
2,9,8,1,,,Post‐quantum encryption,,Quantum Architectures,,Understand,,,
2,9,8,2,,,The Quantum Internet,,Quantum Architectures,,Understand,,,
2,9,8,3,,,Adiabatic quantum computation (AQC) and quantum annealing,,Quantum Architectures,,Understand,,,