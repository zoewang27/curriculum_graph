courseid,chapterid,sectionid,unitid,subunitid,-,topic,-,chapter,-,Cognitive level,-,description_of_topic,-
22,,,,,-,Functional Programming,-,Course,-,Understand,-,,-
22,0,,,,-,Objective,-,Course objective,-,Understand,-,,-
22,0,1,,,-,Obj1,-,Course objective,-,Understand,-,Students will be able to explain the differences between imperative and functional programming.,-
22,0,2,,,-,Obj2,-,Course objective,-,Understand,-,Students will be able to explain and apply the rules of the lambda calculus.,-
22,0,3,,,-,Obj3,-,Course objective,-,Understand,-,"Students will be able to write Haskell programs using algebraic data types, recursion and monads.",-
22,0,4,,,-,Obj4,-,Course objective,-,Understand,-,"Students will be able to reason about functions, types, data structures and type classes.",-
22,0,5,,,-,Obj5,-,Course objective,-,Understand,-,Students will be able to find counterexamples to conjectures using functional programs and specification.,-
22,1,,,,-,Introduction to Lambda calculus,-,Introduction to Lambda calculus,-,Understand,-,Lambda calculus is a formal system for expressing computation based on function abstraction and application.,
22,1,1,,,-,Lambda-terms,-,Introduction to Lambda calculus,-,Understand,-,"Lambda-terms consist of variables, lambda abstractions, and applications. ",
22,1,2,,,-,Substitution,-,Introduction to Lambda calculus,-,Understand,-,Substitution is the process of replacing occurrences of a variable in a lambda-term with another lambda-term.,
22,1,3,,,-,Name clashes,-,Introduction to Lambda calculus,-,Understand,-,Name clashes occur when the names of bound variables in a lambda abstraction conflict with names in the surrounding context.,
22,1,4,,,-,The rules,-,Introduction to Lambda calculus,-,Understand,-,Lambda calculus operates based on reduction rules,
22,1,5,,,-,Building algorithms,-,Introduction to Lambda calculus,-,Understand,-,Lambda calculus serves as the foundation for building algorithms and expressing computations in functional programming languages.,
22,1,6,,,-,Selection,-,Introduction to Lambda calculus,-,Understand,-,Selection refers to the process of choosing appropriate lambda abstractions and arguments to construct lambda-terms representing desired computations.,
22,1,7,,,-,Currying,-,Introduction to Lambda calculus,-,Understand,-,"Currying is a technique in lambda calculus where functions of multiple arguments are transformed into a sequence of functions, each taking a single argument.",
22,1,8,,,-,Successor,-,Introduction to Lambda calculus,-,Understand,-,The successor function is a fundamental function in lambda calculus that increments the input by one.,
22,1,9,,,-,Multiplication,-,Introduction to Lambda calculus,-,Understand,-,"Multiplication can be defined in lambda calculus using repeated addition or recursion, representing a fundamental arithmetic operation within the system.",
22,2,,,,-,Introduction to Haskell,-,Introduction to Haskell,-,Understand,-,,
22,2,1,,,-,Haskell: Introduction,-,Introduction to Haskell,-,Understand,-,"Haskell is a purely functional programming language known for its strong static typing, lazy evaluation, and expressive type system.",
22,2,2,,,-,Lambdas in Haskell,-,Introduction to Haskell,-,Understand,-,Haskell supports anonymous functions or lambdas,
22,2,3,,,-,Lists,-,Introduction to Haskell,-,Understand,-,Lists are a fundamental data structure in Haskell,
22,2,4,,,-,Types,-,Introduction to Haskell,-,Understand,-,"Haskell is statically typed, meaning every expression has a type that is known at compile time.",
22,2,5,,,-,Pattern matching,-,Introduction to Haskell,-,Understand,-,Pattern matching in Haskell allows for defining functions with different behavior based on the structure of input data.,
22,3,,,,-,Lambda calculus in Haskell,-,Lambda calculus in Haskell,-,Understand,-,Haskell supports lambda calculus concepts through its function definitions and anonymous function syntax.,
22,3,1,,,-,Sequential composition,-,Lambda calculus in Haskell,-,Understand,-,Sequential composition in Haskell involves executing multiple actions or functions in a specified order.,
22,3,2,,,-,Equality and subtraction,-,Lambda calculus in Haskell,-,Understand,-,Equality in Haskell is checked using the == operator for value equality and the /= operator for inequality.,
22,3,3,,,-,Pairs and lists,-,Lambda calculus in Haskell,-,Understand,-,Pairs and lists are fundamental data structures used extensively in Haskell programming.,
22,3,4,,,-,The construction principle,-,Lambda calculus in Haskell,-,Understand,-,The construction principle in Haskell refers to building complex structures or computations from simpler components through composition and combination.,
22,3,5,,,-,Recursion ,-,Lambda calculus in Haskell,-,Understand,-,Recursion is a fundamental technique in Haskell for solving problems by defining functions in terms of themselves.,
22,3,6,,,-,Evaluation order,-,Lambda calculus in Haskell,-,Understand,-,"Haskell uses lazy evaluation by default, where expressions are only evaluated when their values are needed.",
22,3,7,,,-,Abstraction of values,-,Lambda calculus in Haskell,-,Understand,-,Abstraction of values in Haskell involves defining functions and data types that encapsulate specific behaviors or concepts.,
22,4,,,,-,Theory of functional programming,-,Theory of functional programming,-,Understand,-,Functional programming is based on the mathematical concept of functions as first-class citizens,
22,4,1,,,-,Type theory,-,Theory of functional programming,-,Understand,-,"Type theory is a branch of mathematics and computer science concerned with the study of types, which classify the various constructs of programming languages.",
22,4,2,,,-,Algebraic data types,-,Theory of functional programming,-,Understand,-,Algebraic data types (ADTs) are a fundamental concept in functional programming languages like Haskell.,
22,4,3,,,-,Polymorphism,-,Theory of functional programming,-,Understand,-,Polymorphism refers to the ability of functions or data types to operate on values of different types.,
22,4,4,,,-,Type classes,-,Theory of functional programming,-,Understand,-,Type classes are a feature of Haskell that enables ad-hoc polymorphism by grouping types that support a common set of operations.,
22,4,5,,,-,Kinds,-,Theory of functional programming,-,Understand,-,Kinds are a type system concept in Haskell that classifies types based on their arity or number of type arguments.,