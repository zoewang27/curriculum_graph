courseid,chapterid,sectionid,unitid,subunitid,-,topic,-,chapter,-,Cognitive level,-,description_of_topic,-
1,,,,,,Algorithms and Complexity,,,-,,,,
1,1,,,,,Algorithmic Strategies,,Algorithmic Strategies,-,Understand,,Algorithmic Strategies covers various approaches and techniques used to design and analyze algorithms,
1,1,1,,,,Approximation,,Algorithmic Strategies,-,Understand,,"Algorithms that find solutions that are close to optimal, often used for NP-hard problems.",
1,1,2,,,,Backtracking,,Algorithmic Strategies,-,Understand,,A systematic method for exploring all possible solutions to a problem by incrementally building candidates and backtracking when a dead-end is reached.,
1,1,3,,,,Branch and Bound ,,Algorithmic Strategies,-,Understand,,A method for solving optimization problems by systematically exploring the search space and bounding the solution space based on specific criteria.,
1,1,4,,,,Brute-Force/Exhaustive Search,,Algorithmic Strategies,-,Understand,,A straightforward approach that systematically examines all possible solutions to find the optimal one.,
1,1,5,,,,Consensus algorithms ,,Algorithmic Strategies,-,Understand,,Algorithms used in distributed computing to achieve agreement among a group of participants despite some of them possibly failing or behaving maliciously.,
1,1,6,,,,Decrease-and-Conquer,,Algorithmic Strategies,-,Understand,,"Algorithms that reduce a problem instance to a smaller instance of the same problem, solve the smaller instance, and then use the solution to solve the original problem.",
1,1,7,,,,Divide-and-Conquer,,Algorithmic Strategies,-,Understand,,"A problem-solving technique that breaks a problem into smaller subproblems, solves the subproblems recursively, and then combines the solutions to solve the original problem.",
1,1,8,,,,Dynamic Programming,,Algorithmic Strategies,-,Understand,,A method for solving optimization problems by breaking them down into simpler subproblems and storing the solutions to avoid redundant calculations.,
1,1,9,,,,Greedy,,Algorithmic Strategies,-,Understand,,An algorithmic paradigm that makes locally optimal choices at each step with the hope of finding a global optimum solution.,
1,1,10,,,,Heuristic: A* ,,Algorithmic Strategies,-,Understand,,A popular search algorithm that efficiently finds the shortest path in a graph from a given start node to a target node.,
1,1,11,,,,Iterative,,Algorithmic Strategies,-,Understand,,Algorithms that repeatedly apply a set of instructions or steps until a specific condition is met.,
1,1,12,,,,Parallel ,,Algorithmic Strategies,-,Understand,,"Algorithms designed to execute multiple computational tasks simultaneously, exploiting parallel processing capabilities for improved efficiency.",
1,1,13,,,,Randomized/Stochastic Algorithms,,Algorithmic Strategies,-,Understand,,"Algorithms that incorporate randomness in their decision-making process to achieve certain goals, such as approximating solutions or finding better outcomes.",
1,1,14,,,,Recursive,,Algorithmic Strategies,-,Understand,,Algorithms that solve problems by calling themselves with smaller input instances until a base case is reached.,
1,1,15,,,,Space and Time Tradeoff,,Algorithmic Strategies,-,Understand,,Strategies that involve sacrificing either space or time efficiency to optimize the overall performance of an algorithm.,
1,1,16,,,,Transform-and-Conquer/Reduction,,Algorithmic Strategies,-,Understand,,"Techniques that transform a problem into a different form that is easier to solve, often by reducing it to a known problem or by applying a series of transformations.",
1,2,,,,,Complexity Analysis,,Complexity Analysis,-,,,Complexity Analysis evaluating algorithms' performance in terms of time and space efficiency,
1,2,1,,,,Analysis Framework,,Complexity Analysis,-,Understand,,Analysis Framework provides a comprehensive approach to evaluating algorithmic performance,
1,2,1,1,,,"Average, Best, and Worst case performance",,Complexity Analysis,-,Understand,,Examining the efficiency of algorithms under different scenarios,
1,2,1,2,,,Empirical and Relative (Order of Growth) Measurements,,Complexity Analysis,-,Understand,,Utilizing empirical data and comparing growth rates to assess algorithmic efficiency,
1,2,1,3,,,Input Size and Primitive Operations,,Complexity Analysis,-,Understand,,Considering the impact of input size and fundamental operations on algorithmic performance,
1,2,1,4,,,Time and Space Efficiency and tradeoffs,,Complexity Analysis,-,Understand,,Balancing time and space requirements while understanding the tradeoffs between them,
1,2,2,,,,Asymptotic complexity analysis,,Complexity Analysis,-,Understand,,Asymptotic complexity analysis involves understanding how algorithms perform as input size grows,
1,2,2,1,,,"Big O, Little O, Big Omega, and Big Theta",,Complexity Analysis,-,Understand,,"to describe the upper (O), lower (Omega), and tight (Theta) bounds on algorithmic performance, as well as strict upper (Little O) bounds",
1,2,2,2,,,Foundational Complexity/Efficiency classes,,Complexity Analysis,-,Understand,,"Constant, Logarithmic, Linear, Log Linear, Quadratic, Cubic, Exponential, and Factorial",
1,2,3,,,,Iterative and recursive algorithm analysis,,Complexity Analysis,-,Understand,,examining algorithms' time and space complexities and comparing their performance under different scenarios,
1,2,3,1,,,Recurrence Relations,,Complexity Analysis,-,Understand,,"including Master Theorem Analysis, Substitution Analysis",
1,2,4,,,,Tractability and Intractability,,Complexity Analysis,-,Understand,,the feasibility of efficiently solving computational problems,
1,2,4,1,,,"P, NP and NP-C complexity classes",,Complexity Analysis,-,Understand,,"Hamiltonian Circuit, Knapsack, and SAT problems",
1,2,5,,,,Turing Machine-Based Models of Complexity,,Complexity Analysis,-,Understand,,"involve classifications such as P, NP, and NPC complexity",
1,2,6,,,,Space Complexity,,Complexity Analysis,-,Understand,,"categorized by classes like NSpace and PSpace, with Savitch's Theorem ",
1,3,,,,,Fundamental Data Structures and Algorithms,,Fundamental Algorithms and Data Structures ,-,,,"including arrays, linked lists, trees, sorting and searching algorithms",
1,3,1,,,,Abstract Data Types (ADTs),,Fundamental Algorithms and Data Structures ,-,Understand,,"including Bag, Collection, Dictionary, List, and Set properties",
1,3,2,,,,Arrays: single and multi-dimensional,,Fundamental Algorithms and Data Structures ,-,Understand,,Basic data structures used for storing elements,
1,3,2,1,,,Linear and Binary Search,,Fundamental Algorithms and Data Structures ,-,Create,,"linear search iterates through elements one by one, and binary search halves the search space with each comparison in a sorted array.",
1,3,3,,,,"Cryptography: AES (SHA-256), RSA",,Fundamental Algorithms and Data Structures ,-,Understand,,secure encryption and decryption techniques widely used for securing data transmission and storage,
1,3,4,,,,Graphs [MF/Graphs and Trees],,Fundamental Algorithms and Data Structures ,-,Understand,,a fundamental data structure,
1,3,4,1,,,"(un)directed, (a)cyclic, (un)connected, and (un)weighted",,Fundamental Algorithms and Data Structures ,-,Understand,,Properties describing graphs,
1,3,4,2,,,Adjacency List and Matrix representations,,Fundamental Algorithms and Data Structures ,-,Understand,,Methods used to store and represent graphs in computer memory,
1,3,5,,,,Graph Algorithms,,Fundamental Algorithms and Data Structures ,-,Create,,a set of techniques used to analyze and manipulate graphs,
1,3,5,1,,,Breadth-First Search,,Fundamental Algorithms and Data Structures ,-,Create,,"Connectivity, Shortest-Path",
1,3,5,2,,,Depth-First Search,,Fundamental Algorithms and Data Structures ,-,Create,,"Acyclicity, Connectivity, Topological Sort, Transitive Closure",
1,3,5,3,,,Hamiltonian Circuit,,Fundamental Algorithms and Data Structures ,-,Create,,Determines whether a graph contains a Hamiltonian circuit.,
1,3,5,4,,,Minimal Spanning Tree,,Fundamental Algorithms and Data Structures ,-,Create,,Prim’s and Kruskal’s algorithms,
1,3,5,5,,,Shortest-path,,Fundamental Algorithms and Data Structures ,-,Create,,"Bellman-Ford, Dijkstra’s/Uniform-Cost, Floyd-Warshall",
1,3,5,6,,,Transitive Closure,,Fundamental Algorithms and Data Structures ,-,Create,,Warshall’s Algorithm,
1,3,6,,,,Hash Tables / Maps,,Fundamental Algorithms and Data Structures ,-,Understand,,data structures that store key-value pairs and enable efficient retrieval and insertion of elements based on their keys,
1,3,6,1,,,Collision resolution,,Fundamental Algorithms and Data Structures ,-,Understand,,"Techniques used to handle collisions, including Linear/Quadratic Probing, Chaining, and Rehashing",
1,3,7,,,,"Linked Lists: single, doubly linked, and circular",,Fundamental Algorithms and Data Structures ,-,Create,,Represent different variations of linked list data structures,
1,3,8,,,,Objects,,Fundamental Algorithms and Data Structures ,-,Create,,instances of classes in object-oriented programming languages,
1,3,9,,,,"Queues, Priority Queues, and Dequeues",,Fundamental Algorithms and Data Structures ,-,Create,,Data structures used to manage collections of elements with specific rules for accessing and modifying elements,
1,3,10,,,,Records/Structs and Tuples,,Fundamental Algorithms and Data Structures ,-,Create,,Data structures used to manage collections of elements with specific rules for accessing and modifying elements,
1,3,11,,,,Stacks,,Fundamental Algorithms and Data Structures ,-,Create,,"A data structure that follows last-in, first-out (LIFO) ordering",
1,3,12,,,,Strings,,Fundamental Algorithms and Data Structures ,-,Create,,String Matching (Boyer-Moore),
1,3,13,,,,"Trees: Binary, n-ary, Search",,Fundamental Algorithms and Data Structures ,-,Create,,Trees are hierarchical data structures composed of nodes,
1,3,13,1,,,"Depth-First, Breadth-First, Best-First, and Backtracking search",,Fundamental Algorithms and Data Structures ,-,Create,,Different traversal and search algorithms used on trees. ,
1,3,13,2,,,Balanced,,Fundamental Algorithms and Data Structures ,-,Create,,"2-3, AVL, B, or Red-Black; Heap and Heapsort",
1,3,13,3,,,Huffman Coding,,Fundamental Algorithms and Data Structures ,-,Create,,A data compression algorithm used to encode data more efficiently by assigning variable-length codes to input characters,
1,3,14,,,,Sorting Algorithms:,,Fundamental Algorithms and Data Structures ,-,Create,,"Includes various techniques such as Selection Sort, Insertion Sort, Quicksort, Merge Sort, Heap Sort, Bucket Sort, Radix Sort, etc.",
1,3,14,1,,,O(n^2) Sorting,,Fundamental Algorithms and Data Structures ,-,Create,,"Selection Sort and Insertion Sort, with a time complexity of O(n^2).",
1,3,14,2,,,O(n log n) Sorting,,Fundamental Algorithms and Data Structures ,-,Create,,"Quicksort, Merge Sort, and Heap Sort, with a time complexity of O(n log n).",
1,3,14,3,,,O(n) Fast-Sorting,,Fundamental Algorithms and Data Structures ,-,Create,,"Bucket Sort and Radix Sort, achieving linear time complexity.",
1,3,14,4,,,Lexicographical Ordering,,Fundamental Algorithms and Data Structures ,-,Create,,"Sorting elements based on their lexicographical order, commonly seen in strings or sequences.",
1,3,14,5,,,Partial Ordering,,Fundamental Algorithms and Data Structures ,-,Create,,"Sorting scenarios where only a partial order is defined, rather than a total order.",
1,3,15,,,,Basic Linear Algebra,,Fundamental Algorithms and Data Structures ,-,Understand,,"Fundamental concepts such as vectors, matrices, operations like addition, subtraction, scalar multiplication, dot product, cross product, determinants",
1,3,15,1,,,Matrix Multiplication,,Fundamental Algorithms and Data Structures ,-,Understand,,Strassen’s Matrix Multiplication,
1,3,16,,,,Differential Privacy,,Fundamental Algorithms and Data Structures ,-,Understand,,A framework ensuring statistical privacy by adding noise to data queries,
1,3,17,,,,"Invariants (loop, in search algorithms)",,Fundamental Algorithms and Data Structures ,-,Understand,,Conditions that remain true throughout the execution of a loop or search algorithm,
1,3,18,,,,Consensus Algorithms,,Fundamental Algorithms and Data Structures ,-,Understand,,e.g. Blockchain; Protocols enabling distributed systems to agree on a single data value,
1,3,19,,,,Geometric Algorithms,,Fundamental Algorithms and Data Structures ,-,Understand,,"e.g., Graham Scan for Convex Hull; Computational techniques for solving geometric problems",
1,3,20,,,,Linear Programming,,Fundamental Algorithms and Data Structures ,-,Understand,,"e.g., Simplex algorithm; Optimization method for maximizing or minimizing a linear objective function subject to linear equality and inequality constraints",
1,3,21,,,,Approximation algorithms,,Fundamental Algorithms and Data Structures ,-,Understand,,"e.g., for Knapsack, Traveling Salesperson; Techniques for finding near-optimal solutions to NP-hard optimization problems like the Knapsack problem or Traveling Salesperson problem",
1,3,22,,,,Randomized Algorithms,,Fundamental Algorithms and Data Structures ,-,Understand,,"e.g. MaxCut, Balls and Bins; Algorithms that use randomness in their computations to achieve efficiency or improve accuracy",
1,4,,,,,Computational Models,,Computational Models,-,,,"Formal representations used to describe, analyze, and simulate computational processes and systems. ",
1,4,1,,,,"Formal Automata, Languages and Grammars, Chomsky Hierarchy",,Computational Models,-,Understand,,"A classification system for languages and grammars based on their expressive power, from regular to recursively enumerable.",
1,4,1,1,,,Deterministic versus Nondeterministic equivalencies,,Computational Models,-,Understand,,"Comparison of automata and grammars that either guarantee unique outcomes or allow multiple possible outcomes, respectively.",
1,4,1,2,,,"Relations among formal automata, languages, and grammars",,Computational Models,-,Understand,,Understanding the connections between different models of computation.,
1,4,2,,,,"Finite State, Regular Grammar/Language",,Computational Models,-,Understand,,"Simplest form of automata and grammar, described by regular expressions.",
1,4,2,1,,,Regular Expressions,,Computational Models,-,Understand,,Patterns used to define regular languages and describe text search patterns.,
1,4,3,,,,"Pushdown, Context-Free Grammar/Languages",,Computational Models,-,Understand,,"Automata and grammars with a stack-based memory, allowing for context-free languages.",
1,4,4,,,,"Turing Machine, Recursively Enumerable",,Computational Models,-,Understand,,Universal model of computation capable of solving any computable problem.,
1,4,5,,,,"Decidability, Computability, Halting problem The Church-Turing Thesis",,Computational Models,-,Understand,,These concepts all revolve around the fundamental properties and limitations of computation. ,
1,4,6,,,,"Finite State, Regular Grammars & Expressions",,Computational Models,-,Create,,Representations of languages or patterns with finite state machines,
1,4,7,,,,"Pushdown, Context-Free Grammars",,Computational Models,-,Create,,used to describe and analyze languages and patterns with nested structures. ,
1,4,8,,,,Equivalent Models of Computation,,Computational Models,-,Understand,,"Various formalisms such as Turing Machine variations, Lambda Calculus, and Mu-Recursive Functions",
1,4,8,1,,,Turing Machine variations,,Computational Models,-,Understand,,Diverse extensions and modifications of the classical Turing Machine model,
1,4,8,2,,,Lambda Calculus,,Computational Models,-,Understand,,A formal system for expressing computation based on function abstraction and application,
1,4,8,3,,,Mu-Recursive Functions,,Computational Models,-,Understand,,A formal system for defining computable functions,
1,4,9,,,,Pumping Lemma Proofs,,Computational Models,-,Understand,,Techniques used in formal language theory to demonstrate that certain languages are not regular,
1,4,9,1,,,Finite State and Pushdown Automata,,Computational Models,-,Understand,,Formal models of computation used to recognize and process languages,
1,4,10,,,,Decidability,,Computational Models,-,Understand,,The property of problems or languages for which an algorithmic procedure exists to determine membership or solve instances,
1,4,10,1,,,Arithmetization,,Computational Models,-,Understand,,The process of encoding logical or mathematical statements into arithmetic expressions,
1,4,10,2,,,Diagonalization,,Computational Models,-,Understand,,A proof technique used to show that certain sets or languages cannot be enumerated or computed,
1,4,11,,,,Reducibility,,Computational Models,-,Understand,,The concept of transforming one computational problem into another in such a way that a solution to the transformed problem can be used to solve the original problem,
1,4,12,,,,Time Complexity based on Turing Machine,,Computational Models,-,Understand,,Analyzing the efficiency of algorithms by measuring the number of computational steps required for a Turing Machine to solve a problem,
1,4,13,,,,Space Complexity,,Computational Models,-,Understand,,"PSPACE, Savitch’s Theorem",
1,4,14,,,,Quantum Computing Model (not algorithms),,Computational Models,-,Understand,,Theoretical frameworks describing computation using principles of quantum mechanics,
1,4,15,,,,Concurrent Systems ,,Computational Models,-,Understand,,"(e.g., non-termination, non-determinism, “thread” interference)",
1,5,,,,,Algorithms and Society,,Algorithms and Society,-,Understand,,"The intersection of computer algorithms and their impact on various aspects of society, including ethics, privacy, economy, politics, and culture.",
1,5,1,,,,Context-Aware Computing,,Algorithms and Society,-,Understand,,"Systems that adapt behavior based on user context, like location or activity.",
1,5,2,,,,"Social, Ethical, and Secure Algorithms",,Algorithms and Society,-,Understand,,"Algorithms addressing social behavior, ethical considerations, and security measures.",
1,5,3,,,,Differential Privacy,,Algorithms and Society,-,Understand,,Protecting individual privacy by ensuring data analysis does not reveal personal information.,
1,5,4,,,,Algorithmic Fairness [cross-reference AI],,Algorithms and Society,-,Understand,,Designing algorithms that do not discriminate against individuals or groups based on protected attributes.,
1,5,5,,,,Accountability/Transparency,,Algorithms and Society,-,Understand,,Holding individuals or organizations responsible and ensuring openness in algorithmic decisions.,