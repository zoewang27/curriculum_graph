courseid,chapterid,sectionid,unitid,subunitid,-,topic,-,chapter,-,Cognitive level,-,description_of_topic,-
6,,,,,-,Programming Languages,-,Course,-,Understand,-,,-
6,0,,,,-,Objective,-,Course objective,-,Understand,-,,-
6,0,1,,,-,Obj1,-,Course objective,-,Understand,-,writing idiomatic computer programs in the programming languages ​​discussed,-
6,0,2,,,-,Obj2,-,Course objective,-,Understand,-,compare the programming languages ​​covered based on concepts and paradigms,-
6,0,3,,,-,Obj3,-,Course objective,-,Understand,-,weigh the pros and cons of choosing a programming language in general and to solve a specific problem,-
6,0,4,,,-,Obj4,-,Course objective,-,Understand,-,apply information from manuals and documentation about programming languages,-
6,1,,,,-,"Programming Languages, Paradigms, and Environments",-,"Programming Languages, Paradigms, and Environments",-,Understand,-,,-
6,1,1,,,-,Programming languages,-,"Programming Languages, Paradigms, and Environments",-,Understand,-,"Programming Languages: High-level languages (Python, Java), Low-level languages (Assembly), Scripting languages (Perl, Ruby), Domain-specific languages (SQL, HTML).",-
6,1,2,,,-,Programming Paradigms,-,"Programming Languages, Paradigms, and Environments",-,Understand,-,"Programming Paradigms: Imperative (C, Pascal), Declarative (Functional, Logic), Object-Oriented (Java, C++), Procedural (C, Fortran).",-
6,1,3,,,-,Programming environments,-,"Programming Languages, Paradigms, and Environments",-,Understand,-,"Programming Environments: Integrated Development Environments (IDEs), Text Editors, Notebook Environments (Jupyter), Web-based Development Environments (CodePen).",-
6,2,,,,-,Python,-,Python,-,Understand,-,"Python: High-level, interpreted, general-purpose programming language.",-
6,2,1,,,-,Programming Paradigm,-,Python,-,Understand,-,"Programming Paradigm: Multi-paradigm, supporting object-oriented, imperative, functional, and procedural programming.",-
6,2,2,,,-,Fundamental Types,-,Python,-,Understand,-,"Fundamental Types: Integers, floats, strings, booleans, lists, tuples, dictionaries, sets.",-
6,2,3,,,-,The Type System,-,Python,-,Understand,-,"The Type System: Dynamic typing, strong typing.",-
6,2,4,,,-,Flow Control,-,Python,-,Understand,-,"Flow Control: if-else statements, loops (for, while).",-
6,2,5,,,-,Compound Data Types,-,Python,-,Understand,-,"Compound Data Types: Lists, tuples, dictionaries, sets.",-
6,2,6,,,-,Strings,-,Python,-,Understand,-,"Strings: Immutable sequences of characters, supporting a wide range of string manipulation operations.",-
6,2,7,,,-,Exceptions,-,Python,-,Understand,-,Exceptions: Mechanism for handling errors and exceptional situations in Python code.,-
6,2,8,,,-,Object-Oriented Programming,-,Python,-,Understand,-,"Object-Oriented Programming: Classes, objects, inheritance, encapsulation, polymorphism.",-
6,2,9,,,-,Memory Model,-,Python,-,Understand,-,"Memory Model: Garbage collection, reference counting.",-
6,2,10,,,-,Iteratie of Recursie,-,Python,-,Understand,-,Iteratie of Recursie: Iteration (for loops) and recursion (calling functions within themselves) are common control flow mechanisms.,-
6,2,11,,,-,Higher Order Functions,-,Python,-,Understand,-,Higher Order Functions: Functions that can accept other functions as arguments or return functions as results.,-
6,2,12,,,-,Iterable,-,Python,-,Understand,-,Iterable: Objects that can be iterated over using loops or comprehension expressions.,-
6,2,13,,,-,Generator,-,Python,-,Understand,-,"Generator: Functions that return iterators, allowing lazy evaluation of values.",-
6,3,,,,-,C++,-,C++,-,Understand,-,,-
6,3,1,,,-,History,-,C++,-,Understand,-,History: Developed by Bjarne Stroustrup in 1983 as an extension of the C programming language.,-
6,3,2,,,-,Usage,-,C++,-,Understand,-,"Usage: Widely used in systems and application programming, game development, and high-performance computing.",-
6,3,3,,,-,Types,-,C++,-,Understand,-,"Types: Strongly typed language supporting fundamental types like integers, floats, characters, as well as user-defined types.",-
6,3,4,,,-,Memory Model,-,C++,-,Understand,-,Memory Model: Manual memory management with support for dynamic allocation and deallocation using new and delete keywords.,-
6,3,5,,,-,Object Orientation,-,C++,-,Understand,-,"Object Orientation: Supports object-oriented programming paradigms including classes, objects, inheritance, and encapsulation.",-
6,3,6,,,-,RAII,-,C++,-,Understand,-,RAII (Resource Acquisition Is Initialization): Idiomatic C++ pattern for managing resource allocation and deallocation using constructors and destructors.,-
6,3,7,,,-,Operator Overloading,-,C++,-,Understand,-,Operator Overloading: Ability to redefine the behavior of operators for user-defined types.,-
6,3,8,,,-,Polymorphism,-,C++,-,Understand,-,"Polymorphism: Achieved through virtual functions and inheritance hierarchies, allowing objects of different types to be treated uniformly.",-
6,3,9,,,-,Data structures,-,C++,-,Understand,-,"Data Structures: C++ offers a rich set of data structures including arrays, vectors, linked lists, stacks, queues, trees, and maps, among others.",-
6,4,,,,-,Object oriented programming,-,Object oriented programming,-,Understand,-,,-
6,4,1,,,-,Objects vs Classes,-,Object oriented programming,-,Understand,-,"Objects vs Classes: Objects are instances of classes, representing specific instances of data and behavior, while classes define the blueprint for creating objects.",-
6,4,2,,,-,inheritance,-,Object oriented programming,-,Understand,-,"Inheritance: Allows a class to inherit properties and behavior from another class, facilitating code reuse and promoting a hierarchical relationship between classes.",-
6,4,3,,,-,Inclusion Polymorphism,-,Object oriented programming,-,Understand,-,"Inclusion Polymorphism: Also known as runtime polymorphism or method overriding, it allows objects of different classes to be treated as objects of a common superclass, enabling dynamic method dispatch.",-
6,4,4,,,-,Software engineering principes,-,Object oriented programming,-,Understand,-,"Software Engineering Principles: Principles such as SOLID (Single Responsibility, Open/Closed, Liskov Substitution, Interface Segregation, Dependency Inversion) guide object-oriented design and promote maintainability, scalability, and robustness.",-
6,4,4,1,,-,Coupling（not treated）,-,Object oriented programming,-,Understand,-,,-
6,4,4,2,,-,Design patterns（not covered）,-,Object oriented programming,-,Understand,-,,-
6,4,4,3,,-,Encapsulation and information hiding,-,Object oriented programming,-,Understand,-,"Encapsulation and Information Hiding: Encapsulation is the bundling of data and methods that operate on the data into a single unit (class), while information hiding restricts access to certain components of an object, promoting modularity and reducing dependencies.",-
6,4,5,,,-,OO in Python en C++,-,Object oriented programming,-,Understand,-,"OO in Python and C++: Both Python and C++ are object-oriented languages, but they have different approaches to implementing OOP concepts. Python emphasizes simplicity and readability, while C++ offers more control over memory management and performance.",-
6,5,,,,-,Haskell,-,Haskell,-,Understand,-,Haskell: A purely functional programming language known for its strong type system and lazy evaluation.,-
6,5,1,,,-,First steps,-,Haskell,-,Understand,-,"First steps: Basic introduction to Haskell syntax, data types, and functional programming concepts.",-
6,5,2,,,-,Lists and tuples,-,Haskell,-,Understand,-,"Lists and tuples: Common data structures in Haskell; lists are sequences of elements, tuples are fixed-size heterogeneous collections of elements.",-
6,5,3,,,-,Functions,-,Haskell,-,Understand,-,"Functions: Fundamental building blocks for defining computations, often using pattern matching and recursion.",-
6,5,4,,,-,Working with lists,-,Haskell,-,Understand,-,"Working with lists: Various operations for efficient manipulation of lists, such as mapping, filtering, folding, and list comprehensions.",-
6,5,5,,,-,Tips'n Tricks,-,Haskell,-,Understand,-,"Tips'n Tricks: Practical tips and best practices for writing clear, concise, and idiomatic Haskell code.",-
6,5,6,,,-,Types,-,Haskell,-,Understand,-,Types: Haskell boasts a powerful type system ensuring type safety and expressive type signatures for functions and data structures.,-
6,5,7,,,-,Polymorphism,-,Haskell,-,Understand,-,Polymorphism: Haskell supports both parametric polymorphism using type variables and ad-hoc polymorphism using type classes.,-
6,5,8,,,-,Input/Output,-,Haskell,-,Understand,-,"Input/Output: Interaction with the outside world, including reading from and writing to files, handling user input, and performing IO operations.",-
6,5,9,,,-,Functors,-,Haskell,-,Understand,-,"Functors: Types that can be mapped over, allowing for serialization of computations while preserving structure.",-
6,5,10,,,-,do-notation,-,Haskell,-,Understand,-,"do-notation: Syntax sugar in Haskell used to serialize IO operations in a more imperative style, making IO code more readable and manageable.",-
6,6,,,,-,Functional programming,-,Functional programming,-,Understand,-,Functional programming: A programming paradigm centered around the evaluation of mathematical functions and avoiding mutable state and side effects.,-
6,6,1,,,-,Haskell design choices,-,Functional programming,-,Understand,-,"Haskell design choices: Haskell is a purely functional programming language designed to be concise, expressive, and efficient, featuring lazy evaluation and strong static typing.",-
6,6,2,,,-,Procedures versus functions,-,Functional programming,-,Understand,-,"Procedures versus functions: Functions in functional programming are pure and deterministic, while procedures may have side effects and mutable state, common in imperative programming.",-
6,6,2,1,,-,Program State and Input/Output,-,Functional programming,-,Understand,-,"Program State and Input/Output: In functional programming, program state is typically immutable, and IO operations are handled in a referentially transparent manner using monads or other abstractions.",-
6,6,2,2,,-,Evaluation strategy,-,Functional programming,-,Understand,-,"Evaluation strategy: Functional programming languages often use lazy evaluation, where expressions are only evaluated when their results are needed, enabling more efficient and modular code.",-
6,6,3,,,-,Lazy evaluation,-,Functional programming,-,Understand,-,"Lazy evaluation: In lazy evaluation, expressions are not evaluated until their results are needed, allowing for more efficient use of resources and enabling the creation of infinite data structures.",-
6,7,,,,-,Enlang,-,Enlang,-,Understand,-,,-
6,7,1,,,-,History,-,Enlang,-,Understand,-,"History: Erlang is a programming language developed by Ericsson in the 1980s for telecommunications applications, known for its fault tolerance and concurrency features.",-
6,7,2,,,-,Imperative vs Functional,-,Enlang,-,Understand,-,"Imperative vs Functional: Erlang is primarily a functional programming language, emphasizing immutability and declarative programming, although it does support some imperative constructs.",-
6,7,3,,,-,Strict vs lazy evaluation,-,Enlang,-,Understand,-,"Strict vs lazy evaluation: Erlang primarily uses strict evaluation, meaning expressions are evaluated as soon as they are bound to variables. Lazy evaluation is not a primary feature of Erlang.",-
6,7,4,,,-,IO in Erlang,-,Enlang,-,Understand,-,"IO in Erlang: Input/output operations in Erlang are handled through message passing between Erlang processes, allowing for asynchronous and concurrent IO operations.",-
6,7,5,,,-,Data types,-,Enlang,-,Understand,-,"Data types: Erlang supports a variety of data types including integers, floats, atoms, tuples, lists, binaries, and maps, as well as user-defined data structures.",-
6,7,6,,,-,Functions,-,Enlang,-,Understand,-,"Functions: Functions in Erlang are first-class citizens, meaning they can be passed as arguments to other functions, returned from functions, and assigned to variables.",-
6,7,7,,,-,Regular expressions,-,Enlang,-,Understand,-,"Regular expressions: Erlang provides support for regular expressions through the re module, allowing for pattern matching and manipulation of strings based on regular expressions.",-
6,7,8,,,-,Error handling,-,Enlang,-,Understand,-,"Error handling: Erlang has built-in mechanisms for error handling, including the use of exception handling with try...catch blocks and the error function for raising errors.",-